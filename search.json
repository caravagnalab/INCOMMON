[{"path":"caravagnalab.github.io/TAPACLOTH/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"caravagnalab.github.io/TAPACLOTH/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"caravagnalab.github.io/TAPACLOTH/LICENSE.html","id":"0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"caravagnalab.github.io/TAPACLOTH/LICENSE.html","id":"1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"caravagnalab.github.io/TAPACLOTH/LICENSE.html","id":"2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"caravagnalab.github.io/TAPACLOTH/LICENSE.html","id":"3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"caravagnalab.github.io/TAPACLOTH/LICENSE.html","id":"4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"caravagnalab.github.io/TAPACLOTH/LICENSE.html","id":"5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"caravagnalab.github.io/TAPACLOTH/LICENSE.html","id":"6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"caravagnalab.github.io/TAPACLOTH/LICENSE.html","id":"7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"caravagnalab.github.io/TAPACLOTH/LICENSE.html","id":"8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"caravagnalab.github.io/TAPACLOTH/LICENSE.html","id":"9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"caravagnalab.github.io/TAPACLOTH/LICENSE.html","id":"10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"caravagnalab.github.io/TAPACLOTH/LICENSE.html","id":"11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"caravagnalab.github.io/TAPACLOTH/LICENSE.html","id":"12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"caravagnalab.github.io/TAPACLOTH/LICENSE.html","id":"13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"caravagnalab.github.io/TAPACLOTH/LICENSE.html","id":"14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"caravagnalab.github.io/TAPACLOTH/LICENSE.html","id":"15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"caravagnalab.github.io/TAPACLOTH/LICENSE.html","id":"16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"caravagnalab.github.io/TAPACLOTH/LICENSE.html","id":"17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"caravagnalab.github.io/TAPACLOTH/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"caravagnalab.github.io/TAPACLOTH/articles/TAPACLOTH.html","id":"karyotype-and-multiplicity-assessment","dir":"Articles","previous_headings":"","what":"Karyotype and multiplicity assessment","title":"TAPACLOTH","text":"TAPACLOTH assess, every mutation, following statuses: 1:0 (LOH), 1:1 (diploid heterozygous), 2:0 (copy-neutral LOH), 2:1 (trisomy), 2:2 (tetrasomy); multiplicity 1 2 ploidy greater 1; TAPACLOTH implements two type statistical tests; required inputs : read/counts panel assay tumour sample purity \\(\\pi > 0\\) Tumour sample purity \\(\\pi\\) can estimated copy number assessment, pathology assessment, general bioinformatics approach outside TAPACLOTH. tests, TAPACLOTH assumes input purity correct, assert can tested estimating purity TAPACLOTH directly.","code":""},{"path":"caravagnalab.github.io/TAPACLOTH/articles/TAPACLOTH.html","id":"purity-assessment","dir":"Articles","previous_headings":"","what":"Purity assessment","title":"TAPACLOTH","text":"TAPACLOTH can used estimate purity cancer sample spectrum somatic mutations detected targeted panel sequencing; required inputs : read/counts variant allele frequencies panel assay. estimate tumour sample purity, made example copy number pathology assessment, provided input, TAPACLOTH additionally computes reliability score estimate.","code":""},{"path":"caravagnalab.github.io/TAPACLOTH/articles/TAPACLOTH.html","id":"inputs-format","dir":"Articles","previous_headings":"","what":"Inputs format","title":"TAPACLOTH","text":"tests, input must prepared using function init, providing input following data: mutations tibble columns indicating chromosome chr, start position , end position , reference ref adn alternative alt alleles, coverage DP, number reads variant NV, variant allelic frequency VAF gene name gene Hugo Symbol; sample, name sample; purity, sample purity; input can prepared right format using function init. example input dataset.","code":""},{"path":"caravagnalab.github.io/TAPACLOTH/articles/classify-and-plot.html","id":"exact-read-counts-based-test","dir":"Articles","previous_headings":"","what":"Exact read-counts based test","title":"Classify karyotype and multiplicity","text":"TAPACLOTH provides exact test (p-value) assess karyotype multipilcity read-count data. test based model sequencing outcome following either Binomial Beta-Binomial process, number reads variant represents number successes total number trials corresponding coverage. clonal variant affecting genome site ploidy \\(p\\), multiplicity \\(m \\\\{1,2\\}\\) sample purity \\(\\pi\\) expected VAF \\[ \\mathbb{E}[\\text{VAF}] = \\frac{m\\pi}{p\\pi + 2\\left(1-\\pi\\right)} \\] (Beta-)Binomial process represents success probability counting process. Therefore, assume null model possible combination karyotype multiplicity, consider every input mutation \\(NV\\) reads variant locus; \\(DP\\) coverage locus; sample purity \\(\\pi\\); expected number reads variant follows \\[ P(X = NV) = Bin\\left(NV \\;\\large\\mid\\;\\normalsize DP, \\frac{m\\pi}{p\\pi + 2\\left(1-\\pi\\right)}\\right) \\] therefore p-value two-tailed test \\[ p = \\sum_{\\} Bin\\left(\\;\\large\\mid\\;\\normalsize DP, \\frac{m\\pi}{p\\pi + 2\\left(1-\\pi\\right)}\\right) \\] \\(= \\left\\{:P(X=)\\leq P(X=NV)\\right\\}\\). Beta-Binomial case simply follows \\(P(X_{BB} \\leq x) = \\sum_{k = 0}^x \\textit{Beta-Bin}(x \\mid c, \\pi/2, \\rho)\\) -dipsersion \\(\\rho\\). Beta-Binomial distribution can used take account -dispersion sequencing assay.","code":""},{"path":"caravagnalab.github.io/TAPACLOTH/articles/classify-and-plot.html","id":"example","dir":"Articles","previous_headings":"Exact read-counts based test","what":"Example","title":"Classify karyotype and multiplicity","text":"following example, classification task run using Binomial Beta-Binomial models - appreciate difference across width acceptance regions class. input must prepared using function init: run run_classifier using certain model, classifier object added input, contains model parameters outcome classifier possible classes, along corresponding p-values. results classification mutations affecting specific gene panel can visualized using internal plotting functions. First plots must generated. following example shows results specific gene, “TP53”.  test shows fixed \\(\\alpha\\)-level, including -dispersion results larger confidence interval \\(NV\\) unlikely karyotype-multiplcity hypotheses rejected. classification procedure implemented  allows multiple classes, different combinations karyotype multiplicity can yield expectation value VAF. following example, classification results plotted known oncogene TSHR. Classes compatible read counts data include diploid heterozygous (1:1) amplification (2:0, 2:1, 2:2) multiplicity 1. Knowledge gene role can used make choice: since TSHR oncogene, likely mutation affecting amplified. One can reduce ambiguity classification also making test strict, example excluding overdispersion relying Binomial model. following example gene TSHR shows relying strict Binomial model reduces classification ambiguity, allowing amplification states. Another way reduce ambiguity increase alpha_level parameter decrease overdispersion paramter rho using Beta-Binomial model. example shows using stricter test (low overdispersion large \\(\\alpha\\) level) may reduce number possible classes even one karyotype multiplicity combination.","code":"input = init(mutations = example_data$data,              sample = example_data$sample,              purity = example_data$purity,              gene_roles = cancer_gene_census) print(input) #> ── [ TAPACLOTH ]  Input data for sample 0009b464-b376-4fbc-8a56-da538269a02f, wi #> # A tibble: 25 × 10 #>    chr        from        to ref   alt      NV    DP   VAF gene   gene_role      #>    <chr>     <dbl>     <dbl> <chr> <chr> <dbl> <dbl> <dbl> <chr>  <chr>          #>  1 chr10 114879306 114879306 G     C        30    45 0.667 TCF7L2 oncogene, fus… #>  2 chr14  30159463  30159463 G     A         7    25 0.28  PRKD1  fusion         #>  3 chr14  30203217  30203217 G     C         3    25 0.12  PRKD1  fusion         #>  4 chr14  30332623  30332623 T     A         9    48 0.188 PRKD1  fusion         #>  5 chr14  81536104  81536104 T     C        17    54 0.315 TSHR   oncogene       #>  6 chr16  72916293  72916293 A     G        17    37 0.459 ZFHX3  TSG            #>  7 chr16  72960833  72960833 C     T        10    26 0.385 ZFHX3  TSG            #>  8 chr17   7577058   7577058 C     A        23    26 0.885 TP53   oncogene, TSG… #>  9 chr17  11931906  11931906 G     T        15    19 0.789 MAP2K4 oncogene, TSG  #> 10 chr17  16076272  16076272 G     C        11    12 0.917 NCOR1  TSG            #> # … with 15 more rows #> # ℹ Use `print(n = ...)` to see more rows out = run_classifier(   input,   alpha_level = 0.1,   model = \"Binomial\" ) #>  #> ── TAPACLOTH binomial clonality/Zygosity testing for sample 0009b464-b376-4fbc-8 #> ℹ Computing null model distributions and p-values.  out = run_classifier(     out,     alpha_level = 0.1,     model = \"Beta-Binomial\",     rho = 0.01     ) #>  #> ── TAPACLOTH beta-binomial clonality/Zygosity testing for sample 0009b464-b376-4 #> ℹ Computing null model distributions and p-values.  print(out) #> ── [ TAPACLOTH ]  Input data for sample 0009b464-b376-4fbc-8a56-da538269a02f, wi #> # A tibble: 25 × 10 #>    chr        from        to ref   alt      NV    DP   VAF gene   gene_role      #>    <chr>     <dbl>     <dbl> <chr> <chr> <dbl> <dbl> <dbl> <chr>  <chr>          #>  1 chr10 114879306 114879306 G     C        30    45 0.667 TCF7L2 oncogene, fus… #>  2 chr14  30159463  30159463 G     A         7    25 0.28  PRKD1  fusion         #>  3 chr14  30203217  30203217 G     C         3    25 0.12  PRKD1  fusion         #>  4 chr14  30332623  30332623 T     A         9    48 0.188 PRKD1  fusion         #>  5 chr14  81536104  81536104 T     C        17    54 0.315 TSHR   oncogene       #>  6 chr16  72916293  72916293 A     G        17    37 0.459 ZFHX3  TSG            #>  7 chr16  72960833  72960833 C     T        10    26 0.385 ZFHX3  TSG            #>  8 chr17   7577058   7577058 C     A        23    26 0.885 TP53   oncogene, TSG… #>  9 chr17  11931906  11931906 G     T        15    19 0.789 MAP2K4 oncogene, TSG  #> 10 chr17  16076272  16076272 G     C        11    12 0.917 NCOR1  TSG            #> # … with 15 more rows #> # ℹ Use `print(n = ...)` to see more rows #> ── [ TAPACLOTH ]  Test using binomial model  with significance level 0.1 ─────── #> # A tibble: 200 × 12 #>    id            NV    DP   VAF gene  gene_…¹ karyo…² multi…³   l_a   r_a pvalue #>    <chr>      <dbl> <dbl> <dbl> <chr> <chr>   <chr>     <int> <int> <int>  <dbl> #>  1 chr10:114…    30    45 0.667 TCF7… oncoge… 1:0           1    32    40   1.00 #>  2 chr10:114…    30    45 0.667 TCF7… oncoge… 1:1           1    15    25   1.00 #>  3 chr10:114…    30    45 0.667 TCF7… oncoge… 2:0           1    15    25   1.00 #>  4 chr10:114…    30    45 0.667 TCF7… oncoge… 2:0           2    37    43   1.00 #>  5 chr10:114…    30    45 0.667 TCF7… oncoge… 2:1           1     9    19   1.00 #>  6 chr10:114…    30    45 0.667 TCF7… oncoge… 2:1           2    23    33   1.00 #>  7 chr10:114…    30    45 0.667 TCF7… oncoge… 2:2           1     6    15   1.00 #>  8 chr10:114…    30    45 0.667 TCF7… oncoge… 2:2           2    16    26   1.00 #>  9 chr14:301…     7    25 0.28  PRKD1 fusion  1:0           1    17    23   1.00 #> 10 chr14:301…     7    25 0.28  PRKD1 fusion  1:1           1     7    15   1.00 #> # … with 190 more rows, 1 more variable: outcome <lgl>, and abbreviated #> #   variable names ¹​gene_role, ²​karyotype, ³​multiplicity #> # ℹ Use `print(n = ...)` to see more rows, and `colnames()` to see all variable names #> ── [ TAPACLOTH ]  Test using beta-binomial model  with overdispersion parameter #> # A tibble: 200 × 12 #>    id            NV    DP   VAF gene  gene_…¹ karyo…² multi…³   l_a   r_a pvalue #>    <chr>      <dbl> <dbl> <dbl> <chr> <chr>   <chr>     <int> <int> <int>  <dbl> #>  1 chr10:114…    30    45 0.667 TCF7… oncoge… 1:0           1    32    40   1.00 #>  2 chr10:114…    30    45 0.667 TCF7… oncoge… 1:1           1    15    25   1.00 #>  3 chr10:114…    30    45 0.667 TCF7… oncoge… 2:0           1    15    25   1.00 #>  4 chr10:114…    30    45 0.667 TCF7… oncoge… 2:0           2    37    43   1.00 #>  5 chr10:114…    30    45 0.667 TCF7… oncoge… 2:1           1     9    19   1.00 #>  6 chr10:114…    30    45 0.667 TCF7… oncoge… 2:1           2    23    33   1.00 #>  7 chr10:114…    30    45 0.667 TCF7… oncoge… 2:2           1     6    15   1.00 #>  8 chr10:114…    30    45 0.667 TCF7… oncoge… 2:2           2    16    26   1.00 #>  9 chr14:301…     7    25 0.28  PRKD1 fusion  1:0           1    17    23   1.00 #> 10 chr14:301…     7    25 0.28  PRKD1 fusion  1:1           1     7    15   1.00 #> # … with 190 more rows, 1 more variable: outcome <lgl>, and abbreviated #> #   variable names ¹​gene_role, ²​karyotype, ³​multiplicity #> # ℹ Use `print(n = ...)` to see more rows, and `colnames()` to see all variable names out = plot_test(out) plot_gene(out, model = \"Binomial\", gene_name = \"PRKD1\")[[1]]+ggplot2::xlim(1,get_DP(out, get_id(out,\"PRKD1\")[[1]])) plot_gene(out, model = \"Beta-Binomial\", gene_name = \"PRKD1\")[[1]]+ggplot2::xlim(1,get_DP(out, get_id(out, \"PRKD1\")[[1]])) plot_gene(out, model = \"Beta-Binomial\", gene_name = \"TSHR\") #> [[1]] plot_gene(out, model = \"Binomial\", gene_name = \"TSHR\") #> [[1]] out = run_classifier(   input,   alpha_level = 0.2,   model = \"Beta-Binomial\",   rho = 0.0001 ) #>  #> ── TAPACLOTH beta-binomial clonality/Zygosity testing for sample 0009b464-b376-4 #> ℹ Computing null model distributions and p-values. out = plot_test(out) plot_gene(out, model = \"Beta-Binomial\", gene_name = \"TSHR\") #> [[1]]"},{"path":"caravagnalab.github.io/TAPACLOTH/articles/purity-estimates.html","id":"mixture-model-based-purity-estimate","dir":"Articles","previous_headings":"","what":"Mixture-model based purity estimate","title":"Purity estimates","text":"TAPACLOTH infers sample purity fitting number reads variant somatic mutations mixture Binomial Beta-Binomial distributions, using BMix. BMix fit performed using Binomial Beta-Binomial mixture models 1 3 clusters, best model selected. Purity estimated twice mean mixture component expected represent cluster clonal heterozygous mutations. selected component one lowest mean data fitted two components, intermediate mean data fitted three components. case data fit mixture two components, expectation one represents clonal heterozygous cluster. case adopt conservative strategy select component results closest estimate input purity, available, given distant input parameter eps.","code":""},{"path":"caravagnalab.github.io/TAPACLOTH/articles/purity-estimates.html","id":"example","dir":"Articles","previous_headings":"Mixture-model based purity estimate","what":"Example","title":"Purity estimates","text":"example, input purity estimate cancer sample correct, VAF spectrum somatic mutations fit using mixture Binomial distributions. input must prepared using function init: test shows inferred purity matches true value reliability score 82%. provide input purity cancer sample underestimated respect ground-truth, TAPACLOTH retrieves correct purity value reports corresponding reliability score input estimate. Results fitting procedure shown plot data$purity_estimate$binomial$plot_bmix. output plot shows (left) assignment variants fitted mixture components, (center) fitted densities comparison tested model, based three different likelihood measures (BIC, ICL NLL).","code":"input = init(mutations = example_data$data,              sample = example_data$sample,              purity = example_data$purity,              gene_roles = cancer_gene_census) print(input) #> ── [ TAPACLOTH ]  Input data for sample 0009b464-b376-4fbc-8a56-da538269a02f, wi #> # A tibble: 25 × 10 #>    chr        from        to ref   alt      NV    DP   VAF gene   gene_role      #>    <chr>     <dbl>     <dbl> <chr> <chr> <dbl> <dbl> <dbl> <chr>  <chr>          #>  1 chr10 114879306 114879306 G     C        30    45 0.667 TCF7L2 oncogene, fus… #>  2 chr14  30159463  30159463 G     A         7    25 0.28  PRKD1  fusion         #>  3 chr14  30203217  30203217 G     C         3    25 0.12  PRKD1  fusion         #>  4 chr14  30332623  30332623 T     A         9    48 0.188 PRKD1  fusion         #>  5 chr14  81536104  81536104 T     C        17    54 0.315 TSHR   oncogene       #>  6 chr16  72916293  72916293 A     G        17    37 0.459 ZFHX3  TSG            #>  7 chr16  72960833  72960833 C     T        10    26 0.385 ZFHX3  TSG            #>  8 chr17   7577058   7577058 C     A        23    26 0.885 TP53   oncogene, TSG… #>  9 chr17  11931906  11931906 G     T        15    19 0.789 MAP2K4 oncogene, TSG  #> 10 chr17  16076272  16076272 G     C        11    12 0.917 NCOR1  TSG            #> # … with 15 more rows #> # ℹ Use `print(n = ...)` to see more rows out = estimate_purity(input,                 model = \"Beta-Binomial\",                 eps = 0.01) #>  #> ── TAPACLOTH purity estimate of sample 0009b464-b376-4fbc-8a56-da538269a02f usin #>  #> ── BMix fit ──────────────────────────────────────────────────────────────────── #> ℹ Binomials k_B = 0, Beta-Binomials k_BB = 1, 2, and 3; 6 fits to run. #> Warning in stats4::mle(minuslogl = .NLLBetaBinMix(k + K[1], data, z_nk, : start #> values do not satisfy constraints #> Warning in lbeta(shape1[okk], shape2[okk]): NaNs produced #> Warning in value[[3L]](cond): MLE error, forcing stop. #> Warning in stats4::mle(minuslogl = .NLLBetaBinMix(k + K[1], data, z_nk, : start #> values do not satisfy constraints  #> Warning in stats4::mle(minuslogl = .NLLBetaBinMix(k + K[1], data, z_nk, : start #> values do not satisfy constraints #> Warning in lbeta(shape1[okk], shape2[okk]): NaNs produced #> Warning in value[[3L]](cond): MLE error, forcing stop. #> Warning in stats4::mle(minuslogl = .NLLBetaBinMix(k + K[1], data, z_nk, : start #> values do not satisfy constraints  #> Warning in stats4::mle(minuslogl = .NLLBetaBinMix(k + K[1], data, z_nk, : start #> values do not satisfy constraints  #> Warning in stats4::mle(minuslogl = .NLLBetaBinMix(k + K[1], data, z_nk, : start #> values do not satisfy constraints #> Warning in checkwz(wz, M = M, trace = trace, wzepsilon = control$wzepsilon): #> 6 diagonal elements of the working weights variable 'wz' have been replaced by #> 1.819e-12 #> Warning in checkwz(wz, M = M, trace = trace, wzepsilon = control$wzepsilon): #> 5 diagonal elements of the working weights variable 'wz' have been replaced by #> 1.819e-12 #> Warning in checkwz(wz, M = M, trace = trace, wzepsilon = control$wzepsilon): #> 1 diagonal elements of the working weights variable 'wz' have been replaced by #> 1.819e-12 #> Warning in checkwz(wz, M = M, trace = trace, wzepsilon = control$wzepsilon): #> 5 diagonal elements of the working weights variable 'wz' have been replaced by #> 1.819e-12 #> Warning in checkwz(wz, M = M, trace = trace, wzepsilon = control$wzepsilon): #> 3 diagonal elements of the working weights variable 'wz' have been replaced by #> 1.819e-12 #> Warning in checkwz(wz, M = M, trace = trace, wzepsilon = control$wzepsilon): #> 4 diagonal elements of the working weights variable 'wz' have been replaced by #> 1.819e-12 #> Warning in checkwz(wz, M = M, trace = trace, wzepsilon = control$wzepsilon): #> 6 diagonal elements of the working weights variable 'wz' have been replaced by #> 1.819e-12 #> Warning in checkwz(wz, M = M, trace = trace, wzepsilon = control$wzepsilon): #> 5 diagonal elements of the working weights variable 'wz' have been replaced by #> 1.819e-12 #> Warning in checkwz(wz, M = M, trace = trace, wzepsilon = control$wzepsilon): #> 7 diagonal elements of the working weights variable 'wz' have been replaced by #> 1.819e-12 #> Warning in checkwz(wz, M = M, trace = trace, wzepsilon = control$wzepsilon): #> 4 diagonal elements of the working weights variable 'wz' have been replaced by #> 1.819e-12 #> Warning in checkwz(wz, M = M, trace = trace, wzepsilon = control$wzepsilon): #> 7 diagonal elements of the working weights variable 'wz' have been replaced by #> 1.819e-12  #> Warning in checkwz(wz, M = M, trace = trace, wzepsilon = control$wzepsilon): #> 7 diagonal elements of the working weights variable 'wz' have been replaced by #> 1.819e-12 #> Warning in checkwz(wz, M = M, trace = trace, wzepsilon = control$wzepsilon): #> 4 diagonal elements of the working weights variable 'wz' have been replaced by #> 1.819e-12 #> Warning in stats4::mle(minuslogl = .NLLBetaBinMix(k + K[1], data, z_nk, : start #> values do not satisfy constraints  #> Warning in stats4::mle(minuslogl = .NLLBetaBinMix(k + K[1], data, z_nk, : start #> values do not satisfy constraints  #> Warning in stats4::mle(minuslogl = .NLLBetaBinMix(k + K[1], data, z_nk, : start #> values do not satisfy constraints #> Warning in checkwz(wz, M = M, trace = trace, wzepsilon = control$wzepsilon): #> 1 diagonal elements of the working weights variable 'wz' have been replaced by #> 1.819e-12 #> Warning in checkwz(wz, M = M, trace = trace, wzepsilon = control$wzepsilon): #> 5 diagonal elements of the working weights variable 'wz' have been replaced by #> 1.819e-12 #> Warning in checkwz(wz, M = M, trace = trace, wzepsilon = control$wzepsilon): #> 3 diagonal elements of the working weights variable 'wz' have been replaced by #> 1.819e-12 #> Warning in checkwz(wz, M = M, trace = trace, wzepsilon = control$wzepsilon): #> 4 diagonal elements of the working weights variable 'wz' have been replaced by #> 1.819e-12 #> Warning in checkwz(wz, M = M, trace = trace, wzepsilon = control$wzepsilon): #> 6 diagonal elements of the working weights variable 'wz' have been replaced by #> 1.819e-12 #> Warning in checkwz(wz, M = M, trace = trace, wzepsilon = control$wzepsilon): #> 5 diagonal elements of the working weights variable 'wz' have been replaced by #> 1.819e-12 #> Warning in checkwz(wz, M = M, trace = trace, wzepsilon = control$wzepsilon): #> 7 diagonal elements of the working weights variable 'wz' have been replaced by #> 1.819e-12 #> Warning in checkwz(wz, M = M, trace = trace, wzepsilon = control$wzepsilon): #> 4 diagonal elements of the working weights variable 'wz' have been replaced by #> 1.819e-12 #> Warning in checkwz(wz, M = M, trace = trace, wzepsilon = control$wzepsilon): #> 7 diagonal elements of the working weights variable 'wz' have been replaced by #> 1.819e-12  #> Warning in checkwz(wz, M = M, trace = trace, wzepsilon = control$wzepsilon): #> 7 diagonal elements of the working weights variable 'wz' have been replaced by #> 1.819e-12 #> Warning in checkwz(wz, M = M, trace = trace, wzepsilon = control$wzepsilon): #> 4 diagonal elements of the working weights variable 'wz' have been replaced by #> 1.819e-12 #> Warning in checkwz(wz, M = M, trace = trace, wzepsilon = control$wzepsilon): #> 6 diagonal elements of the working weights variable 'wz' have been replaced by #> 1.819e-12 #> Warning in checkwz(wz, M = M, trace = trace, wzepsilon = control$wzepsilon): #> 5 diagonal elements of the working weights variable 'wz' have been replaced by #> 1.819e-12 #> Warning in stats4::mle(minuslogl = .NLLBetaBinMix(k + K[1], data, z_nk, : start #> values do not satisfy constraints #> Warning in lbeta(shape1[okk], shape2[okk]): NaNs produced #> Warning in value[[3L]](cond): MLE error, forcing stop. #> Warning in stats4::mle(minuslogl = .NLLBetaBinMix(k + K[1], data, z_nk, : start #> values do not satisfy constraints  #> Warning in stats4::mle(minuslogl = .NLLBetaBinMix(k + K[1], data, z_nk, : start #> values do not satisfy constraints #> ℹ Bmix best fit completed in 0.01 mins #> ── [ BMix ] My BMix model n = 25 with k = 1 component(s) (0 + 1) ─────────────── #> • Clusters: π = 100% [BBin 1], with π > 0. #> ℹ Score (model selection): ICL = 183.99. #> Warning: `guides(<scale> = FALSE)` is deprecated. Please use `guides(<scale> = #> \"none\")` instead. #> Warning: Removed 2 rows containing missing values (geom_bar). #> Warning: Graphs cannot be horizontally aligned unless the axis parameter is set. #> Placing graphs unaligned. #> Warning: `guides(<scale> = FALSE)` is deprecated. Please use `guides(<scale> = #> \"none\")` instead. #> Warning: Removed 2 rows containing missing values (geom_bar). #> Warning: Graphs cannot be horizontally aligned unless the axis parameter is set. #> Placing graphs unaligned.  print(out) #> ── [ TAPACLOTH ]  Input data for sample 0009b464-b376-4fbc-8a56-da538269a02f, wi #> # A tibble: 25 × 10 #>    chr        from        to ref   alt      NV    DP   VAF gene   gene_role      #>    <chr>     <dbl>     <dbl> <chr> <chr> <dbl> <dbl> <dbl> <chr>  <chr>          #>  1 chr10 114879306 114879306 G     C        30    45 0.667 TCF7L2 oncogene, fus… #>  2 chr14  30159463  30159463 G     A         7    25 0.28  PRKD1  fusion         #>  3 chr14  30203217  30203217 G     C         3    25 0.12  PRKD1  fusion         #>  4 chr14  30332623  30332623 T     A         9    48 0.188 PRKD1  fusion         #>  5 chr14  81536104  81536104 T     C        17    54 0.315 TSHR   oncogene       #>  6 chr16  72916293  72916293 A     G        17    37 0.459 ZFHX3  TSG            #>  7 chr16  72960833  72960833 C     T        10    26 0.385 ZFHX3  TSG            #>  8 chr17   7577058   7577058 C     A        23    26 0.885 TP53   oncogene, TSG… #>  9 chr17  11931906  11931906 G     T        15    19 0.789 MAP2K4 oncogene, TSG  #> 10 chr17  16076272  16076272 G     C        11    12 0.917 NCOR1  TSG            #> # … with 15 more rows #> # ℹ Use `print(n = ...)` to see more rows #> ── [ TAPACLOTH ]  Purity estimate using  [ BMix ]  with beta-binomial model ──── #> # A tibble: 1 × 3 #>   purity reliability purity_bmix #>    <dbl>       <dbl>       <dbl> #> 1  0.885       0.880        0.79 # Example error with purity = 0.4 input = init(   mutations = dplyr::tibble(              chr = sample(paste0(\"chr\",1:23), size = 30, replace = TRUE),              from = seq(1000,30000,1000),              to = seq(1001,30001,1000),              ref = sample(c(\"A\",\"T\",\"C\",\"G\"), size = 30, replace = TRUE),              alt = sample(c(\"A\",\"T\",\"C\",\"G\"), size = 30, replace = TRUE),              NV =  c(seq(5, 14, 1), seq(40,58,2), seq(80, 98, 2))*2,              DP = 200,              VAF = c(seq(5, 14, 1), seq(40,58,2), seq(80, 98, 2))*2/200,              gene = paste0(\"test gene \", 1:30)            ),   sample = \"test\",   purity = 0.4 )  out = estimate_purity(   input,   model = \"binomial\",   eps = 0.01) #>  #> ── TAPACLOTH purity estimate of sample test using binomial model ─────────────── #>  #> ── BMix fit ──────────────────────────────────────────────────────────────────── #> ℹ Binomials k_B = 1, 2, and 3, Beta-Binomials k_BB = 0; 6 fits to run. #> ℹ Bmix best fit completed in 0 mins #> ── [ BMix ] My BMix model n = 30 with k = 3 component(s) (3 + 0) ─────────────── #> • Clusters: π = 33% [Bin 1], 33% [Bin 3], and 33% [Bin 2], with π > 0. #> • Binomial Bin 1 with mean = 0.490000000000001. #> • Binomial Bin 2 with mean = 0.89. #> • Binomial Bin 3 with mean = 0.095. #> ℹ Score (model selection): ICL = 361.63. #> Warning: `guides(<scale> = FALSE)` is deprecated. Please use `guides(<scale> = #> \"none\")` instead. #> Warning: Removed 6 rows containing missing values (geom_bar). #> Warning: Graphs cannot be horizontally aligned unless the axis parameter is set. #> Placing graphs unaligned.  print(out) #> ── [ TAPACLOTH ]  Input data for sample test, with purity 0.4 ────────────────── #> # A tibble: 30 × 10 #>    chr    from    to ref   alt      NV    DP   VAF gene         gene_role #>    <chr> <dbl> <dbl> <chr> <chr> <dbl> <dbl> <dbl> <chr>        <chr>     #>  1 chr18  1000  1001 G     T        10   200  0.05 test gene 1  NA        #>  2 chr18  2000  2001 A     C        12   200  0.06 test gene 2  NA        #>  3 chr18  3000  3001 G     T        14   200  0.07 test gene 3  NA        #>  4 chr6   4000  4001 G     G        16   200  0.08 test gene 4  NA        #>  5 chr9   5000  5001 C     C        18   200  0.09 test gene 5  NA        #>  6 chr11  6000  6001 G     C        20   200  0.1  test gene 6  NA        #>  7 chr18  7000  7001 T     T        22   200  0.11 test gene 7  NA        #>  8 chr14  8000  8001 A     G        24   200  0.12 test gene 8  NA        #>  9 chr22  9000  9001 A     G        26   200  0.13 test gene 9  NA        #> 10 chr19 10000 10001 G     T        28   200  0.14 test gene 10 NA        #> # … with 20 more rows #> # ℹ Use `print(n = ...)` to see more rows #> ── [ TAPACLOTH ]  Purity estimate using  [ BMix ]  with binomial model ───────── #> # A tibble: 1 × 3 #>   purity reliability purity_bmix #>    <dbl>       <dbl>       <dbl> #> 1    0.4       0.408        0.98 plot_bmix(out, model = \"Binomial\")"},{"path":"caravagnalab.github.io/TAPACLOTH/articles/purity-estimates.html","id":"classifier-re-run-with-the-inferred-purity","dir":"Articles","previous_headings":"","what":"Classifier re-run with the inferred purity","title":"Purity estimates","text":"TAPACLOTH purity estimate can used preliminary step classification task, especially input estimate available considered unreliable.","code":""},{"path":"caravagnalab.github.io/TAPACLOTH/articles/purity-estimates.html","id":"example-1","dir":"Articles","previous_headings":"Classifier re-run with the inferred purity","what":"Example","title":"Purity estimates","text":"example, classification task first run underestimated input purity. following example value purity replaced TAPACLOTH estimate classification task re-run new value. two classifications can compared. example shows impact incorrect purity estimate classification variants, TAPACLOTH can used improve results input estimate reliable enough. incorrect purity estimate can result bad variant classification can eventually lead wrong conclusions downstream analyses.","code":"input = init(   mutations = dplyr::tibble(              chr = sample(paste0(\"chr\",1:23), size = 30, replace = TRUE),              from = seq(1000,30000,1000),              to = seq(1001,30001,1000),              ref = sample(c(\"A\",\"T\",\"C\",\"G\"), size = 30, replace = TRUE),              alt = sample(c(\"A\",\"T\",\"C\",\"G\"), size = 30, replace = TRUE),              NV =  c(seq(5, 14, 1), seq(40,58,2), seq(80, 98, 2))*2,              DP = 200,              VAF = c(seq(5, 14, 1), seq(40,58,2), seq(80, 98, 2))*2/200,              gene = paste0(\"test gene \", 1:30)            ),   sample = \"test\",   purity = 0.4 ) classified_wrong = run_classifier(   input,   alpha_level = 1e-3,   model = \"Beta-Binomial\",   rho = 0.01 ) #>  #> ── TAPACLOTH beta-binomial clonality/Zygosity testing for sample test ────────── #> ℹ Computing null model distributions and p-values.  classified_wrong = plot_test(classified_wrong)  plt_wrong = plot_gene(x = classified_wrong,           model = \"Beta-Binomial\",           gene_name = \"test gene 13\") out = estimate_purity(   out,   model = \"Beta-Binomial\",   eps = 0.01) #>  #> ── TAPACLOTH purity estimate of sample test using beta-binomial model ────────── #>  #> ── BMix fit ──────────────────────────────────────────────────────────────────── #> ℹ Binomials k_B = 0, Beta-Binomials k_BB = 1, 2, and 3; 6 fits to run. #> Warning in stats4::mle(minuslogl = .NLLBetaBinMix(k + K[1], data, z_nk, : start #> values do not satisfy constraints  #> Warning in stats4::mle(minuslogl = .NLLBetaBinMix(k + K[1], data, z_nk, : start #> values do not satisfy constraints  #> Warning in stats4::mle(minuslogl = .NLLBetaBinMix(k + K[1], data, z_nk, : start #> values do not satisfy constraints  #> Warning in stats4::mle(minuslogl = .NLLBetaBinMix(k + K[1], data, z_nk, : start #> values do not satisfy constraints  #> Warning in stats4::mle(minuslogl = .NLLBetaBinMix(k + K[1], data, z_nk, : start #> values do not satisfy constraints  #> Warning in stats4::mle(minuslogl = .NLLBetaBinMix(k + K[1], data, z_nk, : start #> values do not satisfy constraints  #> Warning in stats4::mle(minuslogl = .NLLBetaBinMix(k + K[1], data, z_nk, : start #> values do not satisfy constraints  #> Warning in stats4::mle(minuslogl = .NLLBetaBinMix(k + K[1], data, z_nk, : start #> values do not satisfy constraints #> Warning in lbeta(shape1[okk], shape2[okk]): NaNs produced #> Warning in value[[3L]](cond): MLE error, forcing stop. #> Warning in stats4::mle(minuslogl = .NLLBetaBinMix(k + K[1], data, z_nk, : start #> values do not satisfy constraints #> Warning in lbeta(shape1[okk], shape2[okk]): NaNs produced #> Warning in value[[3L]](cond): MLE error, forcing stop. #> Warning in stats4::mle(minuslogl = .NLLBetaBinMix(k + K[1], data, z_nk, : start #> values do not satisfy constraints #> Warning in lbeta(shape1[okk], shape2[okk]): NaNs produced #> Warning in value[[3L]](cond): MLE error, forcing stop. #> Warning in stats4::mle(minuslogl = .NLLBetaBinMix(k + K[1], data, z_nk, : start #> values do not satisfy constraints #> Warning in lbeta(shape1[okk], shape2[okk]): NaNs produced #> Warning in value[[3L]](cond): MLE error, forcing stop. #> Warning in stats4::mle(minuslogl = .NLLBetaBinMix(k + K[1], data, z_nk, : start #> values do not satisfy constraints #> ℹ Bmix best fit completed in 0.01 mins #> ── [ BMix ] My BMix model n = 30 with k = 3 component(s) (0 + 3) ─────────────── #> • Clusters: π = 33% [BBin 3], 33% [BBin 1], and 33% [BBin 2], with π > 0. #> ℹ Score (model selection): ICL = 317. #> Warning: `guides(<scale> = FALSE)` is deprecated. Please use `guides(<scale> = #> \"none\")` instead. #> Warning: Removed 6 rows containing missing values (geom_bar). #> Warning: Graphs cannot be horizontally aligned unless the axis parameter is set. #> Placing graphs unaligned. #> Warning: `guides(<scale> = FALSE)` is deprecated. Please use `guides(<scale> = #> \"none\")` instead. #> Warning: Removed 6 rows containing missing values (geom_bar). #> Warning: Graphs cannot be horizontally aligned unless the axis parameter is set. #> Placing graphs unaligned.  out$purity = get_purity_bmix(out, model = \"beta-binomial\")  classified_right = run_classifier(   out,   alpha_level = 1e-3,   model = \"Beta-Binomial\",   rho = 0.01 ) #>  #> ── TAPACLOTH beta-binomial clonality/Zygosity testing for sample test ────────── #> ℹ Computing null model distributions and p-values.  classified_right = plot_test(classified_right) plt_right = plot_gene(x = classified_right,           model = \"Beta-Binomial\",           gene_name = \"test gene 13\") ggpubr::ggarrange(plotlist = list(   plt_wrong[[1]]+xlim(1,200),   plt_right[[1]]+xlim(1,200)   ), ncol = 1, nrow = 2)"},{"path":"caravagnalab.github.io/TAPACLOTH/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Nicola Calonaci. Author, maintainer. Giulio Caravagna. Author, maintainer.","code":""},{"path":"caravagnalab.github.io/TAPACLOTH/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Calonaci N, Caravagna G (2022). TAPACLOTH: Targeted panel-oriented test clonality heterozygosity. R package version 0.0.1, https://github.com/caravagnalab/TAPACLOTH.","code":"@Manual{,   title = {TAPACLOTH: Targeted panel-oriented test for clonality and heterozygosity},   author = {Nicola Calonaci and Giulio Caravagna},   year = {2022},   note = {R package version 0.0.1},   url = {https://github.com/caravagnalab/TAPACLOTH}, }"},{"path":"caravagnalab.github.io/TAPACLOTH/index.html","id":"tapacloth-","dir":"","previous_headings":"","what":"Targeted panel-oriented test for clonality and heterozygosity","title":"Targeted panel-oriented test for clonality and heterozygosity","text":"TAPACLOTH tool uses targeted sequencing data classify somatic mutations either subclonal, clonal heterozygous clonal loss heterozygosity. Two types tests available: exact one based Binomial Beta-Binomial modelling sequencing read counts, approximate based allelic frequencies. former parametrised p-value. Additionally, TAPACLOTH can infer sample purity, information used carry variant classification. Since two tests independent, one can first estimate sample purity use input classification task.","code":""},{"path":[]},{"path":[]},{"path":"caravagnalab.github.io/TAPACLOTH/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Targeted panel-oriented test for clonality and heterozygosity","text":"can install development version TAPACLOTH GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"caravagnalab/TAPACLOTH\")"},{"path":"caravagnalab.github.io/TAPACLOTH/index.html","id":"copyright-and-contacts","dir":"","previous_headings":"Installation","what":"Copyright and contacts","title":"Targeted panel-oriented test for clonality and heterozygosity","text":"Cancer Data Science (CDS) Laboratory.","code":""},{"path":"caravagnalab.github.io/TAPACLOTH/reference/estimate_purity.html","id":null,"dir":"Reference","previous_headings":"","what":"Infer sample purity using a mixture of Binomial or Beta-Binomial distributions. — estimate_purity","title":"Infer sample purity using a mixture of Binomial or Beta-Binomial distributions. — estimate_purity","text":"Infer sample purity using mixture Binomial Beta-Binomial distributions.","code":""},{"path":"caravagnalab.github.io/TAPACLOTH/reference/estimate_purity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Infer sample purity using a mixture of Binomial or Beta-Binomial distributions. — estimate_purity","text":"","code":"estimate_purity(x, model = \"Binomial\", eps = 0.01)"},{"path":"caravagnalab.github.io/TAPACLOTH/reference/estimate_purity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Infer sample purity using a mixture of Binomial or Beta-Binomial distributions. — estimate_purity","text":"x object class 'TAPACLOTH' generated function init. model expected distribution number reads variant fixed coverage purity, can chosen Binomial (-dispersion) Beta-Binomial (-dispersion included). eps case data fitted mixture 2 distributions, sample purity estimated using whose peak closer input purity estimate value parameter. distributions satisfy condition, one closest input purity estimate used new estimate.","code":""},{"path":"caravagnalab.github.io/TAPACLOTH/reference/estimate_purity.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Infer sample purity using a mixture of Binomial or Beta-Binomial distributions. — estimate_purity","text":"object class TAPACLOTH containing inferred purity.","code":""},{"path":"caravagnalab.github.io/TAPACLOTH/reference/estimate_purity.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Infer sample purity using a mixture of Binomial or Beta-Binomial distributions. — estimate_purity","text":"","code":"input = init(mutations = example_data$data, sample = example_data$sample, purity = example_data$purity) out = estimate_purity(x = input, model = \"binomial\", eps = 0.01) #>  #> ── TAPACLOTH purity estimate of sample 0009b464-b376-4fbc-8a56-da538269a02f usin #>  #>  #> ── BMix fit ──────────────────────────────────────────────────────────────────── #>  #> ℹ Binomials k_B = 1, 2, and 3, Beta-Binomials k_BB = 0; 6 fits to run. #>  #> ℹ Bmix best fit completed in 0 mins #>  #> ── [ BMix ] My BMix model n = 25 with k = 3 component(s) (3 + 0) ─────────────── #> • Clusters: π = 44% [Bin 2], 38% [Bin 1], and 19% [Bin 3], with π > 0. #> • Binomial Bin 1 with mean = 0.142417250287977. #> • Binomial Bin 2 with mean = 0.380681225982814. #> • Binomial Bin 3 with mean = 0.833815266384638. #> ℹ Score (model selection): ICL = 192.38. #> Warning: `guides(<scale> = FALSE)` is deprecated. Please use `guides(<scale> = \"none\")` instead. #> Warning: Removed 6 rows containing missing values (geom_bar). #> Warning: Graphs cannot be horizontally aligned unless the axis parameter is set. Placing graphs unaligned. print(out) #> ── [ TAPACLOTH ]  Input data for sample 0009b464-b376-4fbc-8a56-da538269a02f, wi #> # A tibble: 25 × 10 #>    chr        from        to ref   alt      NV    DP   VAF gene   gene_role      #>    <chr>     <dbl>     <dbl> <chr> <chr> <dbl> <dbl> <dbl> <chr>  <chr>          #>  1 chr10 114879306 114879306 G     C        30    45 0.667 TCF7L2 oncogene, fus… #>  2 chr14  30159463  30159463 G     A         7    25 0.28  PRKD1  fusion         #>  3 chr14  30203217  30203217 G     C         3    25 0.12  PRKD1  fusion         #>  4 chr14  30332623  30332623 T     A         9    48 0.188 PRKD1  fusion         #>  5 chr14  81536104  81536104 T     C        17    54 0.315 TSHR   oncogene       #>  6 chr16  72916293  72916293 A     G        17    37 0.459 ZFHX3  TSG            #>  7 chr16  72960833  72960833 C     T        10    26 0.385 ZFHX3  TSG            #>  8 chr17   7577058   7577058 C     A        23    26 0.885 TP53   oncogene, TSG… #>  9 chr17  11931906  11931906 G     T        15    19 0.789 MAP2K4 oncogene, TSG  #> 10 chr17  16076272  16076272 G     C        11    12 0.917 NCOR1  TSG            #> # … with 15 more rows #> # ℹ Use `print(n = ...)` to see more rows #> ── [ TAPACLOTH ]  Purity estimate using  [ BMix ]  with binomial model ───────── #> # A tibble: 1 × 3 #>   purity reliability purity_bmix #>    <dbl>       <dbl>       <dbl> #> 1  0.885       0.836        0.76 #>"},{"path":"caravagnalab.github.io/TAPACLOTH/reference/gene_classification.html","id":null,"dir":"Reference","previous_headings":"","what":"Getter for class 'TAPACLOTH'. — gene_classification","title":"Getter for class 'TAPACLOTH'. — gene_classification","text":"Get classification data specific gene selected model.","code":""},{"path":"caravagnalab.github.io/TAPACLOTH/reference/gene_classification.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Getter for class 'TAPACLOTH'. — gene_classification","text":"","code":"gene_classification(x, gene_id, model)"},{"path":"caravagnalab.github.io/TAPACLOTH/reference/gene_classification.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Getter for class 'TAPACLOTH'. — gene_classification","text":"x obj class 'TAPACLOTH'. gene_id name gene. model Model used test get classification data.","code":""},{"path":"caravagnalab.github.io/TAPACLOTH/reference/gene_classification.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Getter for class 'TAPACLOTH'. — gene_classification","text":"tibble gene-specific classification data.","code":""},{"path":"caravagnalab.github.io/TAPACLOTH/reference/get_DP.html","id":null,"dir":"Reference","previous_headings":"","what":"Getter for class 'TAPACLOTH'. — get_DP","title":"Getter for class 'TAPACLOTH'. — get_DP","text":"Get coverage specific mutation sample.","code":""},{"path":"caravagnalab.github.io/TAPACLOTH/reference/get_DP.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Getter for class 'TAPACLOTH'. — get_DP","text":"","code":"get_DP(x, mutation_id)"},{"path":"caravagnalab.github.io/TAPACLOTH/reference/get_DP.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Getter for class 'TAPACLOTH'. — get_DP","text":"x obj class 'TAPACLOTH'. mutation_id Coordinates mutation form string containing chr,,,alt,ref coordinates, colon separated.","code":""},{"path":"caravagnalab.github.io/TAPACLOTH/reference/get_DP.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Getter for class 'TAPACLOTH'. — get_DP","text":"DP mutation.","code":""},{"path":"caravagnalab.github.io/TAPACLOTH/reference/get_NV.html","id":null,"dir":"Reference","previous_headings":"","what":"Getter for class 'TAPACLOTH'. — get_NV","title":"Getter for class 'TAPACLOTH'. — get_NV","text":"Get number reads variant specific mutation sample.","code":""},{"path":"caravagnalab.github.io/TAPACLOTH/reference/get_NV.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Getter for class 'TAPACLOTH'. — get_NV","text":"","code":"get_NV(x, mutation_id)"},{"path":"caravagnalab.github.io/TAPACLOTH/reference/get_NV.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Getter for class 'TAPACLOTH'. — get_NV","text":"x obj class 'TAPACLOTH'. mutation_id Coordinates mutation form string containing chr,,,alt,ref coordinates, colon separated.","code":""},{"path":"caravagnalab.github.io/TAPACLOTH/reference/get_NV.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Getter for class 'TAPACLOTH'. — get_NV","text":"NV mutation.","code":""},{"path":"caravagnalab.github.io/TAPACLOTH/reference/get_VAF.html","id":null,"dir":"Reference","previous_headings":"","what":"Getter for class 'TAPACLOTH'. — get_VAF","title":"Getter for class 'TAPACLOTH'. — get_VAF","text":"Get variant allele frequency (VAF) specific mutation sample.","code":""},{"path":"caravagnalab.github.io/TAPACLOTH/reference/get_VAF.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Getter for class 'TAPACLOTH'. — get_VAF","text":"","code":"get_VAF(x, mutation_id)"},{"path":"caravagnalab.github.io/TAPACLOTH/reference/get_VAF.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Getter for class 'TAPACLOTH'. — get_VAF","text":"x obj class 'TAPACLOTH'. mutation_id Coordinates mutation form string containing chr,,,alt,ref coordinates, colon separated.","code":""},{"path":"caravagnalab.github.io/TAPACLOTH/reference/get_VAF.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Getter for class 'TAPACLOTH'. — get_VAF","text":"VAF mutation.","code":""},{"path":"caravagnalab.github.io/TAPACLOTH/reference/get_classes.html","id":null,"dir":"Reference","previous_headings":"","what":"Getter for class 'TAPACLOTH'. — get_classes","title":"Getter for class 'TAPACLOTH'. — get_classes","text":"Get significant classification data specified model, already tested.","code":""},{"path":"caravagnalab.github.io/TAPACLOTH/reference/get_classes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Getter for class 'TAPACLOTH'. — get_classes","text":"","code":"get_classes(x, model)"},{"path":"caravagnalab.github.io/TAPACLOTH/reference/get_classes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Getter for class 'TAPACLOTH'. — get_classes","text":"x obj class 'TAPACLOTH'. model Model used test get classification data.","code":""},{"path":"caravagnalab.github.io/TAPACLOTH/reference/get_classes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Getter for class 'TAPACLOTH'. — get_classes","text":"tibble.","code":""},{"path":"caravagnalab.github.io/TAPACLOTH/reference/get_classifier.html","id":null,"dir":"Reference","previous_headings":"","what":"Getter for class 'TAPACLOTH'. — get_classifier","title":"Getter for class 'TAPACLOTH'. — get_classifier","text":"Get classification data specific selected model.","code":""},{"path":"caravagnalab.github.io/TAPACLOTH/reference/get_classifier.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Getter for class 'TAPACLOTH'. — get_classifier","text":"","code":"get_classifier(x, model = NULL)"},{"path":"caravagnalab.github.io/TAPACLOTH/reference/get_classifier.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Getter for class 'TAPACLOTH'. — get_classifier","text":"x obj class 'TAPACLOTH'. model Model used test get classification data.","code":""},{"path":"caravagnalab.github.io/TAPACLOTH/reference/get_classifier.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Getter for class 'TAPACLOTH'. — get_classifier","text":"tibble classification data.","code":""},{"path":"caravagnalab.github.io/TAPACLOTH/reference/get_coord.html","id":null,"dir":"Reference","previous_headings":"","what":"Getter for class 'TAPACLOTH'. — get_coord","title":"Getter for class 'TAPACLOTH'. — get_coord","text":"Get coordinates mutation(s) mapped specified gene.","code":""},{"path":"caravagnalab.github.io/TAPACLOTH/reference/get_coord.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Getter for class 'TAPACLOTH'. — get_coord","text":"","code":"get_coord(x, gene_name)"},{"path":"caravagnalab.github.io/TAPACLOTH/reference/get_coord.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Getter for class 'TAPACLOTH'. — get_coord","text":"x obj class 'TAPACLOTH'. gene_name Name gene affected mutation.","code":""},{"path":"caravagnalab.github.io/TAPACLOTH/reference/get_coord.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Getter for class 'TAPACLOTH'. — get_coord","text":"list mutation coordinates.","code":""},{"path":"caravagnalab.github.io/TAPACLOTH/reference/get_gene.html","id":null,"dir":"Reference","previous_headings":"","what":"Getter for class 'TAPACLOTH'. — get_gene","title":"Getter for class 'TAPACLOTH'. — get_gene","text":"Get ID gene affected specified mutation.","code":""},{"path":"caravagnalab.github.io/TAPACLOTH/reference/get_gene.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Getter for class 'TAPACLOTH'. — get_gene","text":"","code":"get_gene(x, mutation_id)"},{"path":"caravagnalab.github.io/TAPACLOTH/reference/get_gene.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Getter for class 'TAPACLOTH'. — get_gene","text":"x obj class 'TAPACLOTH'. mutation_id Coordinates mutation form string containing chr,,,alt,ref coordinates, colon separated.","code":""},{"path":"caravagnalab.github.io/TAPACLOTH/reference/get_gene.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Getter for class 'TAPACLOTH'. — get_gene","text":"tibble name gene affected specified mutation.","code":""},{"path":"caravagnalab.github.io/TAPACLOTH/reference/get_id.html","id":null,"dir":"Reference","previous_headings":"","what":"Getter for class 'TAPACLOTH'. — get_id","title":"Getter for class 'TAPACLOTH'. — get_id","text":"Get ID mutation(s) affecting specified gene","code":""},{"path":"caravagnalab.github.io/TAPACLOTH/reference/get_id.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Getter for class 'TAPACLOTH'. — get_id","text":"","code":"get_id(x, gene_name)"},{"path":"caravagnalab.github.io/TAPACLOTH/reference/get_id.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Getter for class 'TAPACLOTH'. — get_id","text":"x obj class 'TAPACLOTH'. gene_name Name selected gene.","code":""},{"path":"caravagnalab.github.io/TAPACLOTH/reference/get_id.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Getter for class 'TAPACLOTH'. — get_id","text":"ID( mutation(s).","code":""},{"path":"caravagnalab.github.io/TAPACLOTH/reference/get_params.html","id":null,"dir":"Reference","previous_headings":"","what":"Getter for class 'TAPACLOTH'. — get_params","title":"Getter for class 'TAPACLOTH'. — get_params","text":"Get model parameters performed classification tests.","code":""},{"path":"caravagnalab.github.io/TAPACLOTH/reference/get_params.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Getter for class 'TAPACLOTH'. — get_params","text":"","code":"get_params(x)"},{"path":"caravagnalab.github.io/TAPACLOTH/reference/get_params.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Getter for class 'TAPACLOTH'. — get_params","text":"x obj class 'TAPACLOTH'.","code":""},{"path":"caravagnalab.github.io/TAPACLOTH/reference/get_params.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Getter for class 'TAPACLOTH'. — get_params","text":"tibble containing parameters models used classification.","code":""},{"path":"caravagnalab.github.io/TAPACLOTH/reference/get_purity_bmix.html","id":null,"dir":"Reference","previous_headings":"","what":"Getter for class 'TAPACLOTH'. — get_purity_bmix","title":"Getter for class 'TAPACLOTH'. — get_purity_bmix","text":"Extract sample purity estimated using specified model","code":""},{"path":"caravagnalab.github.io/TAPACLOTH/reference/get_purity_bmix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Getter for class 'TAPACLOTH'. — get_purity_bmix","text":"","code":"get_purity_bmix(x, model)"},{"path":"caravagnalab.github.io/TAPACLOTH/reference/get_purity_bmix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Getter for class 'TAPACLOTH'. — get_purity_bmix","text":"x obj class 'TAPACLOTH'. model Model used purity estimation","code":""},{"path":"caravagnalab.github.io/TAPACLOTH/reference/get_purity_bmix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Getter for class 'TAPACLOTH'. — get_purity_bmix","text":"Sample purity obtained BMix purity estimation procedure.","code":""},{"path":"caravagnalab.github.io/TAPACLOTH/reference/get_purity_estimate.html","id":null,"dir":"Reference","previous_headings":"","what":"Getter for class 'TAPACLOTH'. — get_purity_estimate","title":"Getter for class 'TAPACLOTH'. — get_purity_estimate","text":"Extract data parameters purity estimation.","code":""},{"path":"caravagnalab.github.io/TAPACLOTH/reference/get_purity_estimate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Getter for class 'TAPACLOTH'. — get_purity_estimate","text":"","code":"get_purity_estimate(x, model)"},{"path":"caravagnalab.github.io/TAPACLOTH/reference/get_purity_estimate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Getter for class 'TAPACLOTH'. — get_purity_estimate","text":"x obj class 'TAPACLOTH'. model Model used purity estimation","code":""},{"path":"caravagnalab.github.io/TAPACLOTH/reference/get_purity_estimate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Getter for class 'TAPACLOTH'. — get_purity_estimate","text":"Purity estimate data.","code":""},{"path":"caravagnalab.github.io/TAPACLOTH/reference/get_reliability.html","id":null,"dir":"Reference","previous_headings":"","what":"Getter for class 'TAPACLOTH'. — get_reliability","title":"Getter for class 'TAPACLOTH'. — get_reliability","text":"Extract reliability input sample purity compared TAPACLOTH estimate using specified model.","code":""},{"path":"caravagnalab.github.io/TAPACLOTH/reference/get_reliability.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Getter for class 'TAPACLOTH'. — get_reliability","text":"","code":"get_reliability(x, model)"},{"path":"caravagnalab.github.io/TAPACLOTH/reference/get_reliability.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Getter for class 'TAPACLOTH'. — get_reliability","text":"x obj class 'TAPACLOTH'. model Model used purity estimation","code":""},{"path":"caravagnalab.github.io/TAPACLOTH/reference/get_reliability.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Getter for class 'TAPACLOTH'. — get_reliability","text":"Reliability input purity estimate.","code":""},{"path":"caravagnalab.github.io/TAPACLOTH/reference/init.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare input for analyses with 'TAPACLOTH'. — init","title":"Prepare input for analyses with 'TAPACLOTH'. — init","text":"Process input data object class 'TAPACLOTH', ready analyses run_classifier estimate_purity functions.","code":""},{"path":"caravagnalab.github.io/TAPACLOTH/reference/init.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare input for analyses with 'TAPACLOTH'. — init","text":"","code":"init(mutations, sample, purity, gene_roles = TAPACLOTH::cancer_gene_census)"},{"path":"caravagnalab.github.io/TAPACLOTH/reference/init.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare input for analyses with 'TAPACLOTH'. — init","text":"mutations tibble columns chromosome chr, start position , end position , reference ref alternative alt alleles, coverage DP, number reads variant NV, variant allelic frequency VAF gene name gene Hugo Symbol. sample Sample name. purity Sample purity. gene_roles tibble reporting list gene names gene associated role gene_role among \"oncogene\", \"TSG\" \"fusion\". Default taken COSMIC cancer gene census.","code":""},{"path":"caravagnalab.github.io/TAPACLOTH/reference/init.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepare input for analyses with 'TAPACLOTH'. — init","text":"object class TAPACLOTH.","code":""},{"path":"caravagnalab.github.io/TAPACLOTH/reference/init.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prepare input for analyses with 'TAPACLOTH'. — init","text":"","code":"input = init(mutations = example_data$data, sample = example_data$sample, purity = example_data$purity) print(input) #> ── [ TAPACLOTH ]  Input data for sample 0009b464-b376-4fbc-8a56-da538269a02f, wi #> # A tibble: 25 × 10 #>    chr        from        to ref   alt      NV    DP   VAF gene   gene_role      #>    <chr>     <dbl>     <dbl> <chr> <chr> <dbl> <dbl> <dbl> <chr>  <chr>          #>  1 chr10 114879306 114879306 G     C        30    45 0.667 TCF7L2 oncogene, fus… #>  2 chr14  30159463  30159463 G     A         7    25 0.28  PRKD1  fusion         #>  3 chr14  30203217  30203217 G     C         3    25 0.12  PRKD1  fusion         #>  4 chr14  30332623  30332623 T     A         9    48 0.188 PRKD1  fusion         #>  5 chr14  81536104  81536104 T     C        17    54 0.315 TSHR   oncogene       #>  6 chr16  72916293  72916293 A     G        17    37 0.459 ZFHX3  TSG            #>  7 chr16  72960833  72960833 C     T        10    26 0.385 ZFHX3  TSG            #>  8 chr17   7577058   7577058 C     A        23    26 0.885 TP53   oncogene, TSG… #>  9 chr17  11931906  11931906 G     T        15    19 0.789 MAP2K4 oncogene, TSG  #> 10 chr17  16076272  16076272 G     C        11    12 0.917 NCOR1  TSG            #> # … with 15 more rows #> # ℹ Use `print(n = ...)` to see more rows"},{"path":"caravagnalab.github.io/TAPACLOTH/reference/models_avail.html","id":null,"dir":"Reference","previous_headings":"","what":"Getter for class 'TAPACLOTH'. — models_avail","title":"Getter for class 'TAPACLOTH'. — models_avail","text":"List models used classification tests.","code":""},{"path":"caravagnalab.github.io/TAPACLOTH/reference/models_avail.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Getter for class 'TAPACLOTH'. — models_avail","text":"","code":"models_avail(x)"},{"path":"caravagnalab.github.io/TAPACLOTH/reference/models_avail.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Getter for class 'TAPACLOTH'. — models_avail","text":"x obj class 'TAPACLOTH'.","code":""},{"path":"caravagnalab.github.io/TAPACLOTH/reference/models_avail.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Getter for class 'TAPACLOTH'. — models_avail","text":"Model names.","code":""},{"path":"caravagnalab.github.io/TAPACLOTH/reference/plot.TAPACLOTH.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot for class 'TAPACLOTH'. — plot.TAPACLOTH","title":"Plot for class 'TAPACLOTH'. — plot.TAPACLOTH","text":"terzile model used, default plot histogram VAF spectrum plotted, expected clonal peak, purity VAF mutations affecting target gene highlighted. Binomial Beta-Binomial model used, includes plot showing details used statistical test bottom panel.","code":""},{"path":"caravagnalab.github.io/TAPACLOTH/reference/plot.TAPACLOTH.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot for class 'TAPACLOTH'. — plot.TAPACLOTH","text":"","code":"plot.TAPACLOTH(x, ...)"},{"path":"caravagnalab.github.io/TAPACLOTH/reference/plot.TAPACLOTH.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot for class 'TAPACLOTH'. — plot.TAPACLOTH","text":"x obj class 'TAPACLOTH'. ... Default S3 method parameter.","code":""},{"path":"caravagnalab.github.io/TAPACLOTH/reference/plot.TAPACLOTH.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot for class 'TAPACLOTH'. — plot.TAPACLOTH","text":"Nothing.","code":""},{"path":"caravagnalab.github.io/TAPACLOTH/reference/plot.TAPACLOTH.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot for class 'TAPACLOTH'. — plot.TAPACLOTH","text":"","code":"input = init(mutations = example_data$data[1,], sample = example_data$sample, purity = example_data$purity) x = run_classifier(input, alpha_level = 1e-3, model = \"Binomial\") #>  #> ── TAPACLOTH binomial clonality/Zygosity testing for sample 0009b464-b376-4fbc-8 #>  #> ℹ Computing null model distributions and p-values. x = plot_test(x) plot.TAPACLOTH(x) #> [[1]] #> [[1]]$`chr10:114879306:114879306:G:C`  #>  #>"},{"path":"caravagnalab.github.io/TAPACLOTH/reference/plot_bmix.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot function for class 'TAPACLOTH'. — plot_bmix","title":"Plot function for class 'TAPACLOTH'. — plot_bmix","text":"Plot results BMix fit used purity estimation, specified model.","code":""},{"path":"caravagnalab.github.io/TAPACLOTH/reference/plot_bmix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot function for class 'TAPACLOTH'. — plot_bmix","text":"","code":"plot_bmix(x, model)"},{"path":"caravagnalab.github.io/TAPACLOTH/reference/plot_bmix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot function for class 'TAPACLOTH'. — plot_bmix","text":"x obj class 'TAPACLOTH'. model Model used purity estimate","code":""},{"path":"caravagnalab.github.io/TAPACLOTH/reference/plot_bmix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot function for class 'TAPACLOTH'. — plot_bmix","text":"plot BMix fit.","code":""},{"path":"caravagnalab.github.io/TAPACLOTH/reference/plot_gene.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot function for class 'TAPACLOTH'. — plot_gene","title":"Plot function for class 'TAPACLOTH'. — plot_gene","text":"Plot results classification specified model specified gene.","code":""},{"path":"caravagnalab.github.io/TAPACLOTH/reference/plot_gene.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot function for class 'TAPACLOTH'. — plot_gene","text":"","code":"plot_gene(x, model, gene_name)"},{"path":"caravagnalab.github.io/TAPACLOTH/reference/plot_gene.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot function for class 'TAPACLOTH'. — plot_gene","text":"x obj class 'TAPACLOTH'. model Model used classification. gene_name Name gene affected mutation.","code":""},{"path":"caravagnalab.github.io/TAPACLOTH/reference/plot_gene.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot function for class 'TAPACLOTH'. — plot_gene","text":"tibble classification data specified mutation.","code":""},{"path":"caravagnalab.github.io/TAPACLOTH/reference/plot_heatmap.html","id":null,"dir":"Reference","previous_headings":"","what":"Plotting function for class 'TAPACLOTH'. — plot_heatmap","title":"Plotting function for class 'TAPACLOTH'. — plot_heatmap","text":"Generates composite heatmap useful information data classification results.","code":""},{"path":"caravagnalab.github.io/TAPACLOTH/reference/plot_heatmap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plotting function for class 'TAPACLOTH'. — plot_heatmap","text":"","code":"plot_heatmap(x, model = \"binomial\")"},{"path":"caravagnalab.github.io/TAPACLOTH/reference/plot_heatmap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plotting function for class 'TAPACLOTH'. — plot_heatmap","text":"x obj class 'TAPACLOTH' containing classifier.","code":""},{"path":"caravagnalab.github.io/TAPACLOTH/reference/plot_heatmap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plotting function for class 'TAPACLOTH'. — plot_heatmap","text":"object class 'TAPACLOTH' containing list ggplot2 plots named plot_test inside classifier.","code":""},{"path":"caravagnalab.github.io/TAPACLOTH/reference/plot_heatmap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plotting function for class 'TAPACLOTH'. — plot_heatmap","text":"","code":"x = init(mutations = example_data$data, sample = example_data$sample, purity = example_data$purity) x = run_classifier(x) #>  #> ── TAPACLOTH binomial clonality/Zygosity testing for sample 0009b464-b376-4fbc-8 #>  #> ℹ Computing null model distributions and p-values. plot_heatmap(x) #> Error in loadNamespace(x): there is no package called ‘viridis’"},{"path":"caravagnalab.github.io/TAPACLOTH/reference/plot_test.html","id":null,"dir":"Reference","previous_headings":"","what":"Plotting function for class 'TAPACLOTH'. — plot_test","title":"Plotting function for class 'TAPACLOTH'. — plot_test","text":"Produces list plots, one mutation input, displaying results classification.","code":""},{"path":"caravagnalab.github.io/TAPACLOTH/reference/plot_test.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plotting function for class 'TAPACLOTH'. — plot_test","text":"","code":"plot_test(x)"},{"path":"caravagnalab.github.io/TAPACLOTH/reference/plot_test.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plotting function for class 'TAPACLOTH'. — plot_test","text":"x obj class 'TAPACLOTH'.","code":""},{"path":"caravagnalab.github.io/TAPACLOTH/reference/plot_test.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plotting function for class 'TAPACLOTH'. — plot_test","text":"object class 'TAPACLOTH' containing list ggplot2 plots named plot_test inside classifier.","code":""},{"path":"caravagnalab.github.io/TAPACLOTH/reference/print.TAPACLOTH.html","id":null,"dir":"Reference","previous_headings":"","what":"Print for class 'TAPACLOTH'. — print.TAPACLOTH","title":"Print for class 'TAPACLOTH'. — print.TAPACLOTH","text":"Print class 'TAPACLOTH'.","code":""},{"path":"caravagnalab.github.io/TAPACLOTH/reference/print.TAPACLOTH.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print for class 'TAPACLOTH'. — print.TAPACLOTH","text":"","code":"# S3 method for TAPACLOTH print(x, ...)"},{"path":"caravagnalab.github.io/TAPACLOTH/reference/print.TAPACLOTH.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print for class 'TAPACLOTH'. — print.TAPACLOTH","text":"x obj class 'TAPACLOTH'. ... Default S3 method parameter.","code":""},{"path":"caravagnalab.github.io/TAPACLOTH/reference/print.TAPACLOTH.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print for class 'TAPACLOTH'. — print.TAPACLOTH","text":"Nothing.","code":""},{"path":"caravagnalab.github.io/TAPACLOTH/reference/print.TAPACLOTH.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print for class 'TAPACLOTH'. — print.TAPACLOTH","text":"","code":"x = init(mutations = example_data$data,          sample = example_data$sample,          purity = example_data$purity) x = run_classifier(     x,      alpha_level = 1e-3,     model = \"Binomial\") #>  #> ── TAPACLOTH binomial clonality/Zygosity testing for sample 0009b464-b376-4fbc-8 #>  #> ℹ Computing null model distributions and p-values. x = estimate_purity(x = x, model = \"binomial\", eps = 0.01) #>  #> ── TAPACLOTH purity estimate of sample 0009b464-b376-4fbc-8a56-da538269a02f usin #>  #>  #> ── BMix fit ──────────────────────────────────────────────────────────────────── #>  #> ℹ Binomials k_B = 1, 2, and 3, Beta-Binomials k_BB = 0; 6 fits to run. #>  #> ℹ Bmix best fit completed in 0 mins #>  #> ── [ BMix ] My BMix model n = 25 with k = 3 component(s) (3 + 0) ─────────────── #> • Clusters: π = 43% [Bin 1], 37% [Bin 2], and 20% [Bin 3], with π > 0. #> • Binomial Bin 1 with mean = 0.368962990832848. #> • Binomial Bin 2 with mean = 0.142222703267291. #> • Binomial Bin 3 with mean = 0.815000740834499. #> ℹ Score (model selection): ICL = 189.65. #> Warning: `guides(<scale> = FALSE)` is deprecated. Please use `guides(<scale> = \"none\")` instead. #> Warning: Removed 6 rows containing missing values (geom_bar). #> Warning: Graphs cannot be horizontally aligned unless the axis parameter is set. Placing graphs unaligned. print(x) #> ── [ TAPACLOTH ]  Input data for sample 0009b464-b376-4fbc-8a56-da538269a02f, wi #> # A tibble: 25 × 10 #>    chr        from        to ref   alt      NV    DP   VAF gene   gene_role      #>    <chr>     <dbl>     <dbl> <chr> <chr> <dbl> <dbl> <dbl> <chr>  <chr>          #>  1 chr10 114879306 114879306 G     C        30    45 0.667 TCF7L2 oncogene, fus… #>  2 chr14  30159463  30159463 G     A         7    25 0.28  PRKD1  fusion         #>  3 chr14  30203217  30203217 G     C         3    25 0.12  PRKD1  fusion         #>  4 chr14  30332623  30332623 T     A         9    48 0.188 PRKD1  fusion         #>  5 chr14  81536104  81536104 T     C        17    54 0.315 TSHR   oncogene       #>  6 chr16  72916293  72916293 A     G        17    37 0.459 ZFHX3  TSG            #>  7 chr16  72960833  72960833 C     T        10    26 0.385 ZFHX3  TSG            #>  8 chr17   7577058   7577058 C     A        23    26 0.885 TP53   oncogene, TSG… #>  9 chr17  11931906  11931906 G     T        15    19 0.789 MAP2K4 oncogene, TSG  #> 10 chr17  16076272  16076272 G     C        11    12 0.917 NCOR1  TSG            #> # … with 15 more rows #> # ℹ Use `print(n = ...)` to see more rows #> ── [ TAPACLOTH ]  Purity estimate using  [ BMix ]  with binomial model ───────── #> # A tibble: 1 × 3 #>   purity reliability purity_bmix #>    <dbl>       <dbl>       <dbl> #> 1  0.885       0.804        0.74 #>  #> ── [ TAPACLOTH ]  Test using binomial model  with significance level 0.001 ───── #> # A tibble: 200 × 12 #>    id            NV    DP   VAF gene  gene_…¹ karyo…² multi…³   l_a   r_a pvalue #>    <chr>      <dbl> <dbl> <dbl> <chr> <chr>   <chr>     <int> <int> <int>  <dbl> #>  1 chr10:114…    30    45 0.667 TCF7… oncoge… 1:0           1    26    43   1.00 #>  2 chr10:114…    30    45 0.667 TCF7… oncoge… 1:1           1    10    31   1.00 #>  3 chr10:114…    30    45 0.667 TCF7… oncoge… 2:0           1    10    31   1.00 #>  4 chr10:114…    30    45 0.667 TCF7… oncoge… 2:0           2    32    45   1.00 #>  5 chr10:114…    30    45 0.667 TCF7… oncoge… 2:1           1     5    24   1.00 #>  6 chr10:114…    30    45 0.667 TCF7… oncoge… 2:1           2    17    38   1.00 #>  7 chr10:114…    30    45 0.667 TCF7… oncoge… 2:2           1     2    20   1.00 #>  8 chr10:114…    30    45 0.667 TCF7… oncoge… 2:2           2    11    32   1.00 #>  9 chr14:301…     7    25 0.28  PRKD1 fusion  1:0           1    13    25   1.00 #> 10 chr14:301…     7    25 0.28  PRKD1 fusion  1:1           1     4    19   1.00 #> # … with 190 more rows, 1 more variable: outcome <lgl>, and abbreviated #> #   variable names ¹​gene_role, ²​karyotype, ³​multiplicity #> # ℹ Use `print(n = ...)` to see more rows, and `colnames()` to see all variable names"},{"path":"caravagnalab.github.io/TAPACLOTH/reference/run_classifier.html","id":null,"dir":"Reference","previous_headings":"","what":"Classify mutations using a (Beta-)Binomial model-based test. — run_classifier","title":"Classify mutations using a (Beta-)Binomial model-based test. — run_classifier","text":"Classify mutations using (Beta-)Binomial model-based test.","code":""},{"path":"caravagnalab.github.io/TAPACLOTH/reference/run_classifier.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Classify mutations using a (Beta-)Binomial model-based test. — run_classifier","text":"","code":"run_classifier(x, alpha_level = 0.01, model = \"Binomial\", rho = NA)"},{"path":"caravagnalab.github.io/TAPACLOTH/reference/run_classifier.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Classify mutations using a (Beta-)Binomial model-based test. — run_classifier","text":"x object class 'TAPACLOTH' generated function init. alpha_level significance level used hypothesis testing. model Model used classification task, either \"Binomial\" (-dispersion) \"Beta-Binomial\" (-dispersion included), used expected distribution number reads variant fixed coverage purity. rho \"Beta-Binomial\" model selected, parameter tunes -dispersion expected distribution used test.","code":""},{"path":"caravagnalab.github.io/TAPACLOTH/reference/run_classifier.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Classify mutations using a (Beta-)Binomial model-based test. — run_classifier","text":"object class TAPACLOTH containing input plus classification data paramters.","code":""},{"path":"caravagnalab.github.io/TAPACLOTH/reference/run_classifier.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Classify mutations using a (Beta-)Binomial model-based test. — run_classifier","text":"","code":"x = init(mutations = example_data$data,          sample = example_data$sample,          purity = example_data$purity) x = run_classifier(     x,      alpha_level = 1e-3,     model = \"Binomial\") #>  #> ── TAPACLOTH binomial clonality/Zygosity testing for sample 0009b464-b376-4fbc-8 #>  #> ℹ Computing null model distributions and p-values. print(x) #> ── [ TAPACLOTH ]  Input data for sample 0009b464-b376-4fbc-8a56-da538269a02f, wi #> # A tibble: 25 × 10 #>    chr        from        to ref   alt      NV    DP   VAF gene   gene_role      #>    <chr>     <dbl>     <dbl> <chr> <chr> <dbl> <dbl> <dbl> <chr>  <chr>          #>  1 chr10 114879306 114879306 G     C        30    45 0.667 TCF7L2 oncogene, fus… #>  2 chr14  30159463  30159463 G     A         7    25 0.28  PRKD1  fusion         #>  3 chr14  30203217  30203217 G     C         3    25 0.12  PRKD1  fusion         #>  4 chr14  30332623  30332623 T     A         9    48 0.188 PRKD1  fusion         #>  5 chr14  81536104  81536104 T     C        17    54 0.315 TSHR   oncogene       #>  6 chr16  72916293  72916293 A     G        17    37 0.459 ZFHX3  TSG            #>  7 chr16  72960833  72960833 C     T        10    26 0.385 ZFHX3  TSG            #>  8 chr17   7577058   7577058 C     A        23    26 0.885 TP53   oncogene, TSG… #>  9 chr17  11931906  11931906 G     T        15    19 0.789 MAP2K4 oncogene, TSG  #> 10 chr17  16076272  16076272 G     C        11    12 0.917 NCOR1  TSG            #> # … with 15 more rows #> # ℹ Use `print(n = ...)` to see more rows #> ── [ TAPACLOTH ]  Test using binomial model  with significance level 0.001 ───── #> # A tibble: 200 × 12 #>    id            NV    DP   VAF gene  gene_…¹ karyo…² multi…³   l_a   r_a pvalue #>    <chr>      <dbl> <dbl> <dbl> <chr> <chr>   <chr>     <int> <int> <int>  <dbl> #>  1 chr10:114…    30    45 0.667 TCF7… oncoge… 1:0           1    26    43   1.00 #>  2 chr10:114…    30    45 0.667 TCF7… oncoge… 1:1           1    10    31   1.00 #>  3 chr10:114…    30    45 0.667 TCF7… oncoge… 2:0           1    10    31   1.00 #>  4 chr10:114…    30    45 0.667 TCF7… oncoge… 2:0           2    32    45   1.00 #>  5 chr10:114…    30    45 0.667 TCF7… oncoge… 2:1           1     5    24   1.00 #>  6 chr10:114…    30    45 0.667 TCF7… oncoge… 2:1           2    17    38   1.00 #>  7 chr10:114…    30    45 0.667 TCF7… oncoge… 2:2           1     2    20   1.00 #>  8 chr10:114…    30    45 0.667 TCF7… oncoge… 2:2           2    11    32   1.00 #>  9 chr14:301…     7    25 0.28  PRKD1 fusion  1:0           1    13    25   1.00 #> 10 chr14:301…     7    25 0.28  PRKD1 fusion  1:1           1     4    19   1.00 #> # … with 190 more rows, 1 more variable: outcome <lgl>, and abbreviated #> #   variable names ¹​gene_role, ²​karyotype, ³​multiplicity #> # ℹ Use `print(n = ...)` to see more rows, and `colnames()` to see all variable names"},{"path":"caravagnalab.github.io/TAPACLOTH/reference/test_setup.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute parameters and distribution for null hypothesis. — test_setup","title":"Compute parameters and distribution for null hypothesis. — test_setup","text":"Compute parameters distribution null hypothesis.","code":""},{"path":"caravagnalab.github.io/TAPACLOTH/reference/test_setup.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute parameters and distribution for null hypothesis. — test_setup","text":"","code":"test_setup(   coverage = 500,   purity = 1,   rho = 0.01,   alpha_level = 0.01,   model = \"binomial\" )"},{"path":"caravagnalab.github.io/TAPACLOTH/reference/test_setup.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute parameters and distribution for null hypothesis. — test_setup","text":"coverage sequencing coverage locus mutation. purity Sample purity. rho overdisperion parameter \"Beta-Binomial\" model. alpha_level confidence level test. model Model used test, either \"Binomial\" \"Beta-Binomial\".","code":""},{"path":"caravagnalab.github.io/TAPACLOTH/reference/test_setup.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute parameters and distribution for null hypothesis. — test_setup","text":"list.","code":""},{"path":"caravagnalab.github.io/TAPACLOTH/reference/test_setup.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute parameters and distribution for null hypothesis. — test_setup","text":"","code":"null_model = test_setup(coverage = 500, purity = 1.0, rho = 0.01, alpha_level = 0.01, model = 'binomial')  print(null_model) #> $model #> [1] \"binomial\" #>  #> $rho #> [1] 0.01 #>  #> $coverage #> [1] 500 #>  #> $purity #> [1] 1 #>  #> $alpha_level #> [1] 0.01 #>  #> $test #> # A tibble: 8 × 7 #>   karyotype multiplicity inputs               l_a   r_a   l_v   r_v #>   <chr>            <int> <list>             <int> <int> <dbl> <dbl> #> 1 1:0                  1 <tibble [500 × 3]>   500   500 1     1     #> 2 1:1                  1 <tibble [500 × 3]>   221   279 0.442 0.558 #> 3 2:0                  1 <tibble [500 × 3]>   221   279 0.442 0.558 #> 4 2:0                  2 <tibble [500 × 3]>   500   500 1     1     #> 5 2:1                  1 <tibble [500 × 3]>   140   194 0.28  0.388 #> 6 2:1                  2 <tibble [500 × 3]>   306   360 0.612 0.72  #> 7 2:2                  1 <tibble [500 × 3]>   101   150 0.202 0.3   #> 8 2:2                  2 <tibble [500 × 3]>   221   279 0.442 0.558 #>"}]
