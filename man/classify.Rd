% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/classify.R
\name{classify}
\alias{classify}
\title{Classify mutations using a Beta-Binomial model-based test.}
\usage{
classify(
  x,
  k_max = 8,
  priors_k_m = priors_k_m,
  priors_eta = priors_eta,
  purity_error = 0.05,
  num_cores = NULL,
  iter_warmup = 500,
  iter_sampling = 1000,
  num_chains = 4,
  results_dir = "~/INCONNON_inference/results",
  generate_report_plot = F,
  reports_dir = "~/INCONNON_inference/reports",
  stan_fit_dump = F,
  stan_fit_dir = "~/INCONNON_inference/fits"
)
}
\arguments{
\item{x}{An object of class \code{'INCOMMON'} generated with function \code{init}.}

\item{k_max}{The maximum value of total copy number to be included in the model.}

\item{priors_k_m}{A dplyr::tibble or data frame with columns \code{gene}, \code{gene_role}, \code{tumor_type}, \code{ploidy}, \code{multiplicity}
and \code{p} indicating tumor-specific or pan-cancer (PANCA) prior probabilities.}

\item{priors_eta}{A dplyr::tibble or data frame with columns \code{mean_eta}, \code{var_eta}, \code{alpha_eta} and \code{beta_eta}
providing parameters of the Gamma prior distribution over the per copy sequencing rate.}

\item{purity_error}{The expected error on the input sample purity estimate.}

\item{num_cores}{The number of cores to use for parallel stan sampling.}

\item{iter_warmup}{The number of iterations of the stan warmup phase.}

\item{iter_sampling}{The number of iterations of the stan sampling  phase.}

\item{dump}{Whether to dump results to a file.}

\item{dump_file}{The file path for dumping results.}
}
\value{
An object of class \code{INCOMMON} containing the original input plus
the classification data and parameters.
}
\description{
Classify mutations using a Beta-Binomial model-based test.
}
\examples{
# First load example data
data(MSK_genomic_data)
data(MSK_clinical_data)
data(priors_k_m)
data(priors_eta)
# Initialize the INCOMMON object for a single sample (note the outputs to screen)
sample = 'P-0002081'
x = init(genomic_data = MSK_genomic_data[MSK_genomic_data$sample == sample,], clinical_data = MSK_clinical_data[MSK_clinical_data$sample == sample,])
# Run INCOMMON classification
x = classify(x = x, priors_k_m = priors_k_m, priors_eta = priors_eta, num_cores = 1, iter_warmup = 10, iter_sampling = 10, num_chains = 1)
# An S3 method can be used to report to screen what is in the object
print(x)
}
