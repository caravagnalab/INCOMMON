as.data.frame(fit_cll)["omega_s1"][[1]]
as.data.frame(fit_cll)["omega_s1"][[2]]
as.data.frame(fit_cll)["omega_s1"][[1]] %>% mean()
fit_cll
mean(as.data.frame(fit_cll)["omega_s1"][[1]])-
mean(as.data.frame(fit_cll)["omega"][[1]])
s1 = (mean(as.data.frame(fit_cll)["omega_s1"][[1]])-
mean(as.data.frame(fit_cll)["omega"][[1]]))/mean(as.data.frame(fit_cll)["omega"][[1]])
s1
s2 = (mean(as.data.frame(fit_cll)["omega_s2"][[1]])-
mean(as.data.frame(fit_cll)["omega"][[1]]))/mean(as.data.frame(fit_cll)["omega"][[1]])
s2
fs2_t1
t1
t2
FUN = function(x, y, z, u){
print(paste(x,y,z,u,sep = "_"))
}
FUN("fasta.fa","bams1,bams2","vcf1,vcf2", "UP005")
setwd("~/cds/easypar/scripts/")
devtools::load_all("~/Documents/GitHub/easypar/")
FUN = function(x, y, z, u){
print(paste(x,y,z,u,sep = "_"))
}
FUN("fasta.fa","bams1,bams2","vcf1,vcf2", "UP005")
1:4
"A":"D"
PARAMS = data.frame(x = 1:4,
y = 1:4,
z = 1:4,
u = 1:4)
PARAMS
setwd("~/cds/easypar/")
easypar::run_SLURM(FUN, PARAMS, modules = 'R')
easypar::run_PBSpro(FUN, PARAMS, modules = 'R')
devtools::load_all("~/Documents/GitHub/easypar/")
FUN = function(x, y, z, u){
sink("outfile.txt")
cat(paste(x,y,z,u,sep = "_"))
cat("\n")
sink()
}
FUN("fasta.fa","bams1,bams2","vcf1,vcf2", "UP005")
PARAMS = data.frame(x = 1:4,
y = 1:4,
z = 1:4,
u = 1:4)
PARAMS = data.frame(x = 1:4,
y = 1:4,
z = 1:4,
u = 1:4)
PARAMS
easypar::run_PBSpro(FUN, PARAMS, modules = 'R')
setwd("~/cds/easypar/output/")
easypar::run_PBSpro(FUN, PARAMS, modules = 'R')
devtools::load_all("~/Documents/GitHub/easypar/")
devtools::load_all("~/Documents/GitHub/easypar/")
devtools::load_all("~/Documents/GitHub/easypar/")
FUN = function(x, y, z, u){
sink("outfile.txt")
cat(paste(x,y,z,u,sep = "_"))
cat("\n")
sink()
}
PARAMS = data.frame(x = 1:4,
y = 1:4,
z = 1:4,
u = 1:4)
setwd("~/cds/easypar/output/")
easypar::run_PBSpro(FUN, PARAMS, modules = 'R')
devtools::load_all("~/Documents/GitHub/easypar/")
PARAMS = data.frame(x = 1:4,
y = 1:4,
z = 1:4,
u = 1:4)
easypar::run_PBSpro(FUN, PARAMS, modules = 'R')
devtools::load_all("~/Documents/GitHub/easypar/")
easypar::run_PBSpro(FUN, PARAMS, modules = 'R')
devtools::load_all("~/Documents/GitHub/easypar/")
devtools::load_all("~/Documents/GitHub/easypar/")
easypar::run_PBSpro(FUN, PARAMS, modules = 'R')
devtools::load_all("~/Documents/GitHub/easypar/")
FUN = function(x, y, z, u){
cat(paste(x,y,z,u,sep = "_"))
cat("\n")
}
easypar::run_PBSpro(FUN, PARAMS, modules = 'R')
devtools::load_all("~/Documents/GitHub/easypar/")
easypar::run_PBSpro(FUN, PARAMS, modules = 'R')
devtools::load_all("~/Documents/GitHub/easypar/")
easypar::run_PBSpro(FUN, PARAMS, modules = 'R')
setwd("./Documents/GitHub/TAPACLOTH/")
devtools::check()
devtools::install()
## set your user name and email:
usethis::use_git_config(user.name = "nicola-calonaci", user.email = "nicola.calonaci@gmail.com")
## set personal access token:
credentials::set_github_pat("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")
devtools::install()
devtools::check()
devtools::install()
devtools::document()
devtools::check()
pkgdown::build_site()
library(dplyr)
library(TAPACLOTH)
data = dplyr::tibble(sample = "test",
gene = c("test gene 1", "test gene 2", "test gene 3", "target gene"),
nv = c(10, 50, 90, 120),
dp = c(100, 100, 100, 200),
VAF = c(0.1, 0.5, 0.9, 0.6),
purity = 1
)
print(data)
binomial_model = run_classifier(
data = data,
alpha_level = 1e-3,
model = "Binomial"
)
betabinomial_model = run_classifier(
data = data,
alpha_level = 1e-3,
model = "Beta-Binomial",
rho = 0.01
)
print(binomial_model)
print(betabinomial_model)
binomial_model$fit
betabinomial_model$data
betabinomial_model$fit
plot(binomial_model)
plot(binomial_model, target_gene = "test gene 3", "test")
plot(betabinomial_model, target_gene = "test gene 3", "test")
print(binomial_model)
print(betabinomial_model)
print(binomial_model)
print(betabinomial_model)
0.3/1
0.3-1
1-0.3
(1-0.3)/20
seq(0.3, 1, 0.035)
data = dplyr::tibble(sample = paste0("test ", seq(1:20)),
gene = "target gene",
nv = seq(10,100,4.6) %>% round(0),
dp = 100,
VAF = (seq(10,100,4.6) %>% round(0))/100,
purity = seq(0.3, 1, 0.035)
)
data = dplyr::tibble(sample = paste0("test ", seq(1:20)),
gene = "target gene",
nv = seq(10,100,4.6) %>% round(0),
dp = 100,
VAF = (seq(10,100,4.6) %>% round(0))/100,
purity = seq(0.3, 0.99, 0.035)
)
data
classified_data = run_classifier(
data = data,
model = "terzile"
)
print(classified_data)
(1-0.2)/20
data = dplyr::tibble(sample = paste0("test ", seq(1:20)),
gene = "target gene",
nv = seq(10,100,4.6) %>% round(0),
dp = 100,
VAF = (seq(10,100,4.6) %>% round(0))/100,
purity = seq(0.2, 0.99, 0.04)
)
classified_data = run_classifier(
data = data,
model = "terzile"
)
print(classified_data)
0.9/20
seq(0.1,1,0.05)
seq(0.1,1,0.05) %>% length()
seq(0.1,1,0.045) %>% length()
seq(0.1,0.99,0.045) %>% length()
data = dplyr::tibble(sample = paste0("test ", seq(1:20)),
gene = "target gene",
nv = seq(10,100,4.6) %>% round(0),
dp = 100,
VAF = (seq(10,100,4.6) %>% round(0))/100,
purity = seq(0.1,0.99,0.045)
)
data = dplyr::tibble(sample = paste0("test ", seq(1:20)),
gene = "target gene",
nv = seq(10,100,4.6) %>% round(0),
dp = 100,
VAF = (seq(10,100,4.6) %>% round(0))/100,
purity = seq(0.1,0.99,0.045)
)
```{r}
data
classified_data = run_classifier(
data = data,
model = "terzile"
)
print(classified_data)
exp(log(10)*seq(0.1, 1, length.out=20))
(log(10)*seq(0.1, 1, length.out=20))
(log(10)*seq(0.1, 1, length.out=20))/2
exp(log(10)*seq(-1, 1, length.out=20))
exp(log(10)*seq(-1, 0, length.out=20))
exp(log(10)*seq(-0.5, 0, length.out=20))
data = dplyr::tibble(sample = paste0("test ", seq(1:20)),
gene = "target gene",
nv = seq(10,100,4.6) %>% round(0),
dp = 100,
VAF = (seq(10,100,4.6) %>% round(0))/100,
purity = exp(log(10)*seq(-0.5, 0, length.out=20))
)
classified_data = run_classifier(
data = data,
model = "terzile"
)
print(classified_data)
exp(log(10)*seq(-0.5, 0, length.out=20)) %>% round(1)
data = dplyr::tibble(sample = paste0("test ", seq(1:20)),
gene = "target gene",
nv = seq(10,100,4.6) %>% round(0),
dp = 100,
VAF = (seq(10,100,4.6) %>% round(0))/100,
purity = exp(log(10)*seq(-0.5, 0, length.out=20)) %>% round(1)
)
classified_data = run_classifier(
data = data,
model = "terzile"
)
print(classified_data)
plot(classified_data, target_gene = "target gene", sample_name = "test 6")
plot(classified_data, target_gene = "target gene", sample_name = "test 7")
devtools::load_all()
devtools::document()
devtools::install()
devtools::check()
pkgdown::build_site()
devtools::load_all()
devtools::load_all()
devtools::load_all()
devtools::load_all()
devtools::install()
library(dplyr)
library(TAPACLOTH)
classified_data_w = run_classifier(
data = data,
alpha_level = 1e-3,
model = "Beta-Binomial",
rho = 0.01
)
print(classified_data_w)
devtools::document()
devtools::install()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
0.4799 %>% round(2)
devtools::document()
devtools::install()
pkgdown::build_s
pkgdown::build_site()
pkgdown::build_site()
data = dplyr::tibble(sample = paste0("test ", seq(1:20)),
gene = "target gene",
nv = seq(10,100,4.6) %>% round(0),
dp = 100,
VAF = (seq(10,100,4.6) %>% round(0))/100,
purity = exp(log(10)*seq(-0.5, 0, length.out=20)) %>% round(1)
)
classified_data = run_classifier(
data = data,
model = "terzile"
)
print(classified_data)
data = dplyr::tibble(sample = paste0("test ", seq(1:20)),
gene = "target gene",
nv = seq(10,100,4.6) %>% round(0),
dp = 100,
VAF = (seq(10,100,4.6) %>% round(0))/100,
purity = exp(log(10)*seq(-0.7, 0, length.out=20)) %>% round(1)
)
```{r}
classified_data = run_classifier(
data = data,
model = "terzile"
)
print(classified_data)
data = dplyr::tibble(sample = paste0("test ", seq(1:20)),
gene = "target gene",
nv = seq(10,100,4.6) %>% round(0),
dp = 100,
VAF = (seq(10,100,4.6) %>% round(0))/100,
purity = exp(log(10)*seq(-0.4, 0, length.out=20)) %>% round(1)
)
classified_data = run_classifier(
data = data,
model = "terzile"
)
print(classified_data)
ggpubr::ggarrange(plotlist = list(
plot(
classified_data,
target_gene = "target gene",
sample_name = "test 7"
),
plot(
classified_data,
target_gene = "target gene",
sample_name = "test 8"
)
),
ncol = 2,
nrow = 1)
devtools::build_site()
data = dplyr::tibble(sample = "test",
gene = paste0("test gene ", 1:10),
nv = c(50, 60, 100, 250, 225, 270, 35, 375, 400, 450),
dp = 500,
VAF = c(10, 12, 20, 50, 45, 54, 61, 75, 80, 90)/100,
purity = 1
)
plot(data)
classified_data_r = run_classifier(
data = data,
alpha_level = 1e-3,
model = "Beta-Binomial",
rho = 0.01
)
plot(classified_data_r)
classified_data_r
plot(classified_data_r, "test gene 1","test")
x = classified_data_r
inherits(x, "TAPACLOTH")
any(class(x$fit) == "bmix")
target_gene
target_gene = "test gene 1"
sample_name = "test"
fit_plot = plot_fit(fit = x, target_gene = target_gene, sample_name)
devtools::load_all()
fit_plot = plot_fit(fit = x, target_gene = target_gene, sample_name)
fit_plot
fit = x
fit$model == "terzile"
fit$fit = fit$fit %>%
dplyr::mutate(class = class_binom)
fit
# Select sample
fit$fit = fit$fit %>%
dplyr::filter(sample == sample_name)
fit$fit
# Get class of mutations on target gene
gene_status = fit$fit %>%
dplyr::filter(gene == target_gene) %>%
dplyr::mutate(class = paste0(class, ' (', nv, '/', dp, ')')) %>%
dplyr::pull(class) %>%
paste(collapse = ', ')
# Get VAF of mutations on target gene
gene_vafs = fit$fit %>%
dplyr::filter(gene == target_gene) %>%
dplyr::pull(VAF)
gene_vafs
gene_status
fit$fit$purity[1]
devtools::document()
ddevtools::install()
devtools::install()
pkgdown::build_site()
ggpubr::ggarrange(plotlist = list(
plot(
classified_data,
target_gene = "target gene",
sample_name = "test 7"
),
plot(
classified_data,
target_gene = "target gene",
sample_name = "test 8"
)
),
ncol = 1,
nrow = 2)
pkgdown::build_site()
# Fit plot
colormap = ggsci::pal_jama("default")(7)[1:3]
names(colormap) = c("Clonal", "Clonal LOH", "Subclonal")
colormap[1]
fit_plot = fit$fit %>%
ggplot2::ggplot() +
CNAqc:::my_ggplot_theme() +
ggplot2::geom_histogram(binwidth = 0.01, aes(VAF, fill = class)) +
ggsci::scale_fill_manual(name = "",
values = c(`Clonal`=colormap["Clonal"],
`Clonal LOH`=colormap["Clonal LOH"],
`Subclonal`=colormap["Subclonal"])) +
ggplot2::xlim(0, 1) +
ggplot2::labs(
title = sample_name,
subtitle = paste0("Purity: ", fit$fit$purity[1], " - ", target_gene, ": ", gene_status)
) +
ggplot2::guides(fill = guide_legend(''),
color = guide_legend('', override.aes = aes(fill = NA)))  +
ggplot2::geom_vline(aes(xintercept = gene_vafs,
color = "Target VAF"),
linetype = 6) +
ggplot2::geom_vline(
aes(xintercept = fit$fit$purity[1],
color = "Purity"),
linetype = 'dashed',
size = .6
) +
ggplot2::geom_vline(aes(xintercept = fit$fit$purity[1] / 2,
color = "Clonal peak"),
linetype = 'dashed') +
ggplot2::scale_color_manual(
name = "",
values = c(
`Target VAF` = "indianred3",
`Purity` = "black",
`Clonal Peak` = "gray"
)
)
fit_plot = fit$fit %>%
ggplot2::ggplot() +
CNAqc:::my_ggplot_theme() +
ggplot2::geom_histogram(binwidth = 0.01, aes(VAF, fill = class)) +
ggplot2::scale_fill_manual(name = "",
values = c(`Clonal`=colormap["Clonal"],
`Clonal LOH`=colormap["Clonal LOH"],
`Subclonal`=colormap["Subclonal"])) +
ggplot2::xlim(0, 1) +
ggplot2::labs(
title = sample_name,
subtitle = paste0("Purity: ", fit$fit$purity[1], " - ", target_gene, ": ", gene_status)
) +
ggplot2::guides(fill = guide_legend(''),
color = guide_legend('', override.aes = aes(fill = NA)))  +
ggplot2::geom_vline(aes(xintercept = gene_vafs,
color = "Target VAF"),
linetype = 6) +
ggplot2::geom_vline(
aes(xintercept = fit$fit$purity[1],
color = "Purity"),
linetype = 'dashed',
size = .6
) +
ggplot2::geom_vline(aes(xintercept = fit$fit$purity[1] / 2,
color = "Clonal peak"),
linetype = 'dashed') +
ggplot2::scale_color_manual(
name = "",
values = c(
`Target VAF` = "indianred3",
`Purity` = "black",
`Clonal Peak` = "gray"
)
)
fit_plot = plot_fit(fit = x, target_gene = target_gene, sample_name)
devtools::load_all()
fit_plot = plot_fit(fit = x, target_gene = target_gene, sample_name)
fit_plot
ggsci::scale_fill_jama()
# Fit plot
colormap = ggsci::pal_jama("default")(7)[1:3]
names(colormap) = c("Clonal", "Clonal LOH", "Subclonal")
fit_plot = fit$fit %>%
ggplot2::ggplot() +
CNAqc:::my_ggplot_theme() +
ggplot2::geom_histogram(binwidth = 0.01, aes(VAF, fill = class)) +
ggplot2::scale_fill_manual(values = colormap)+
# ggsci::scale_fill_jama() +
xlim(0, 1) +
ggplot2::labs(
title = sample_name,
subtitle = paste0("Purity: ", fit$fit$purity[1], " - ", target_gene, ": ", gene_status)
) +
ggplot2::guides(fill = guide_legend(''),
color = guide_legend('', override.aes = aes(fill = NA)))  +
ggplot2::geom_vline(aes(xintercept = gene_vafs,
color = "Target VAF"),
linetype = 6) +
ggplot2::geom_vline(
aes(xintercept = fit$fit$purity[1],
color = "Purity"),
linetype = 'dashed',
size = .6
) +
ggplot2::geom_vline(aes(xintercept = fit$fit$purity[1] / 2,
color = "Clonal peak"),
linetype = 'dashed') +
ggplot2::scale_color_manual(
name = "",
values = c(
`Target VAF` = "indianred3",
`Purity` = "black",
`Clonal Peak` = "gray"
)
)
fit_plot = plot_fit(fit = x, target_gene = target_gene, sample_name)
fit_plot
devtools::load_all()
plot_fit(fit = x, target_gene = target_gene, sample_name)
devtools::document()
devtools::install()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
