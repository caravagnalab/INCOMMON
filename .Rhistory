x = readRDS(f)
x = tryCatch({
CNAqc:::advanced_phasing(x)
}, error = function(e) {
})
if (!is.null(x)) {
return(x$phasing %>% select(sample, gene_affected, karyotype, multiplicity))
}
}
input_pcawg = easypar::run(
FUN = phase,
PARAMS = lapply(pcawg_files, list),
parallel = TRUE,
filter_errors = FALSE
)
input_pcawg
input_pcawg[[1]]
input_tcga = easypar::run(
FUN = phase,
PARAMS = lapply(tcga_files, list),
parallel = TRUE,
filter_errors = FALSE
)
input_tcga
f = tcga_files[1]
cli::cli_alert(paste0("Phasing sample ", stringr::str_split(f, "/")[[1]][2]))
x = readRDS(f)
x
x
x$fits$CPE
CNAqc:::advanced_phasing(x$fits$CPE)
phase = function(f) {
cli::cli_alert(paste0("Phasing sample ", stringr::str_split(f, "/")[[1]][2]))
x = readRDS(f)
if(f %in% pcawg_files){
x = tryCatch({
CNAqc:::advanced_phasing(x)
}, error = function(e) {
})
}
if(f %in% tcga_files){
x = tryCatch({
CNAqc:::advanced_phasing(x$fits$CPE)
}, error = function(e) {
})
}
if (!is.null(x)) {
return(x$phasing %>% select(sample, gene_affected, karyotype, multiplicity))
}
}
input_tcga = easypar::run(
FUN = phase,
PARAMS = lapply(tcga_files, list),
parallel = TRUE,
filter_errors = FALSE,
export = c("pcawg_files", "tcga_files")
)
input_tcga
input_tcga[[1]]
input_tcga[[1]]$message
f
f %in% tcga_files
x = tryCatch({
CNAqc:::advanced_phasing(x$fits$CPE)
}, error = function(e) {
})
x
!is.null(x)
x$phasing
x$phasing %>% select(sample, gene_affected, karyotype, multiplicity)
x$phasing
input_pcawg[[1]]
x$phasing
x
x$phasing$karyotype
x$phasing$SamID
f
x = readRDS(f)
x = tryCatch({
CNAqc:::advanced_phasing(x$fits$CPE)
}, error = function(e) {
})
x$phasing %>%
rename(sample = SamID, gene_affected = Hugo_Symbol, ) %>%
select(sample, gene_affected, karyotype, multiplicity)
phase = function(f) {
cli::cli_alert(paste0("Phasing sample ", stringr::str_split(f, "/")[[1]][2]))
x = readRDS(f)
if(f %in% pcawg_files){
x = tryCatch({
CNAqc:::advanced_phasing(x)
}, error = function(e) {
})
if (!is.null(x)) {
return(x$phasing %>%
select(sample, gene_affected, karyotype, multiplicity))
}
}
if(f %in% tcga_files){
x = tryCatch({
CNAqc:::advanced_phasing(x$fits$CPE)
}, error = function(e) {
})
if (!is.null(x)) {
return(x$phasing %>%
rename(sample = SamID, gene_affected = Hugo_Symbol, ) %>%
select(sample, gene_affected, karyotype, multiplicity))
}
}
}
input_tcga = easypar::run(
FUN = phase,
PARAMS = lapply(tcga_files[1:2], list),
parallel = TRUE,
filter_errors = FALSE,
export = c("pcawg_files", "tcga_files")
)
input_tcga
input_tcga = easypar::run(
FUN = phase,
PARAMS = lapply(tcga_files, list),
parallel = TRUE,
filter_errors = FALSE,
export = c("pcawg_files", "tcga_files")
)
input_tcga
input_pcawg %>% do.call(rbind(, .))
input_pcawg %>% do.call(rbind,.)
input_pcawg[1]
input_pcawg[[2]]
input_pcawg %>% length()
input_pcawg = input_pcawg %>%
do.call(rbind,.)
input_tcga = input_tcga %>%
do.call(rbind,.)
input_pcawg
input_tcga
mart <- useDataset("hsapiens_gene_ensembl", useMart("ensembl", host="https://uswest.ensembl.org"))
G_list <-
getBM(
filters = "ensembl_gene_id",
attributes = c("ensembl_gene_id", "hgnc_symbol"),
values = input_pcawg$gene_affected %>% unique(),
mart = mart
)
G_list
G_list = G_list %>%
rename(gene = ensembl_gene_id)
G_list
input_pcawg
head(G_list)
input_pcawg %>% rename(gene = gene_affected)
input_pcawg %>% rename(gene = gene_affected) %>%
left_join(G_list, by = "gene")
input_pcawg %>% rename(gene = gene_affected) %>%
left_join(G_list, by = "gene") %>%
filter(!is.na(hgnc_symbol)) %>%
select(-gene) %>%
rename(gene = hgnc_symbol)
input_pcawg = input_pcawg %>% rename(gene = gene_affected) %>%
left_join(G_list, by = "gene") %>%
filter(!is.na(hgnc_symbol)) %>%
select(-gene) %>%
rename(gene = hgnc_symbol)
rbind(input_pcawg, input_tcga)
input_tcga
rbind(input_pcawg, input_tcga %>% rename(gene = gene_affected))
dataset = rbind(input_pcawg,
input_tcga %>%
rename(gene = gene_affected))
saveRDS(dataset, file = "./phasing.rds")
dataset %>%
filter(karyotype %in% c("1:0","1:1","2:0","2:1","2:2",))
dataset
dataset %>%
filter(karyotype %in% c("1:0","1:1","2:0","2:1","2:2"))
data = readRDS("./dataset.rds")
data
data %>% tail()
data
dataset %>%
filter(karyotype %in% c("1:0","1:1","2:0","2:1","2:2"))
target_genes = read_tsv("./COSMIC_census.tsv") %>%
dplyr::select(`Gene Symbol`, `Tumour Types(Somatic)`, Tier) %>%
rename(gene = `Gene Symbol`, TumorType = `Tumour Types(Somatic)`)
target_genes
dataset %>%
filter(karyotype %in% c("1:0","1:1","2:0","2:1","2:2"), gene %in% target_genes)
dataset
target_genes
dataset %>%
filter(karyotype %in% c("1:0","1:1","2:0","2:1","2:2"), gene %in% target_genes$gene)
dataset
data
msk_met_metadata = read_tsv("./mskmet/msk_met_2021_clinical_data_ALL_SAMPLE.tsv")
msk_met_metadata
msk_met_data = read.table("./mskmet/data_mutations.txt", header = TRUE, sep = "\t") %>%
dplyr::as_tibble() %>%
dplyr::rename(sample = Tumor_Sample_Barcode, gene = Hugo_Symbol, nv = t_alt_count, nr = t_ref_count) %>%
dplyr::mutate(dp = nv+nr) %>%
dplyr::mutate(VAF = nv/dp) %>%
dplyr::select(sample, gene, nv, dp, VAF)
msk_met_genes = msk_met_data$gene %>% unique()
msk_met_genes
target_genes = c(msk_met_genes, target_genes$gene) %>% unique()
target_genes
dataset %>%
filter(karyotype %in% c("1:0","1:1","2:0","2:1","2:2"), gene %in% target_genes$gene)
dataset %>%
filter(karyotype %in% c("1:0","1:1","2:0","2:1","2:2"), gene %in% target_genes)
data
x = readRDS("./cache.rds")
x
x
as_tibble(x
)
dplyr::as_tibble(x)
x[[1
]]
x[[2]]
x[[3]]
x[[4]]
x[[5]]
x[[6]]
x[[7]]
x[[8]]
x[[9]]
x[[10]]
setwd("~/Documents/GitHub/TAPACLOTH/")
x = readRDS("./testdata.rds")
x
cosmic = readr::read_tsv("~/cds/guascone/dati_ncalonaci/tapacloth/COSMIC_census.tsv")
comsim
comsic
cosmic
cosmic %>%
dplyr::renmae(gene = `Gene Symbol`, role = `Rola in Cancer`) %>%
select(gene, role)
library(dplyr)
cosmic %>%
dplyr::renmae(gene = `Gene Symbol`, role = `Rola in Cancer`) %>%
select(gene, role)
cosmic %>%
dplyr::rename(gene = `Gene Symbol`, role = `Rola in Cancer`) %>%
select(gene, role)
cosmic %>%
dplyr::rename(gene = `Gene Symbol`, role = `Role in Cancer`) %>%
select(gene, role)
cosmic = cosmic %>%
dplyr::rename(gene = `Gene Symbol`, role = `Role in Cancer`) %>%
select(gene, role)
x$data %>%
left_join(comsic, by = "gene")
x$data %>%
left_join(cosmic, by = "gene")
x$data = x$data %>%
left_join(cosmic, by = "gene")
x = TAPACLOTH::run_classifier(
x = x,
alpha_level = 0.05,
model = "Beta-Binomial",
rho = 1e-3
)
x
devtools::load_all()
x = TAPACLOTH::run_classifier(
x = x,
alpha_level = 0.05,
model = "Beta-Binomial",
rho = 1e-3
)
x
saveRDS(x, "~/cds/example_tapa_fit.rds")
x$data
get_classifier(x)
get_data(x)
get_classifier(x, model = "beta-binomial")
get_classifier(x, model = "beta-binomial") %>% get_data()
get_alpha(x)
get_alpha(x, "beta-binomial")
get_rho(x, "beta-binomial")
get_rho(x)
plot_gene(x, model = "beta-binomial", gene_name = "SPEN")
get_classifier(x) %>% get_data()
get_classifier(x, model = "beta-binomial") %>% get_data()
x %>%
mutate(outcome = pvalue > 0.05)
x$data %>%
mutate(outcome = pvalue > 0.05)
x$data %>%
mutate(outcome = pvalue > 0.05)
x$classifier$data %>%
mutate(outcome = pvalue > 0.05)
x$classifier$`beta-binomial`data %>%
mutate(outcome = pvalue > 0.05)
x$classifier$`beta-binomial`data
x$classifier$`beta-binomial`$data %>%
mutate(outcome = pvalue > 0.05)
x$classifier$`beta-binomial`$data = x$classifier$`beta-binomial`$data %>%
mutate(outcome = pvalue > 0.05)
x
x$
x = plot_test(x)
x$x$classifier$`beta-binomial`$plot_test$`chr16:663074:663075:G:A`
x$x$classifier$`beta-binomial`$plot_test$`chr12:1438:1439:G:C`
x$x$classifier$`beta-binomial`$plot_test$`chr4:377657:377658:C:T`
x$data
x = x %>% mutate(VAF = NV/DP)
x$data = x$data %>% mutate(VAF = NV/DP)
x
x$data
setwd("~/Documents/GitHub/TAPACLOTH/")
out
x = readRDS("~/cds/guascone/dati_ncalonaci/tapacloth/SNV_simple_k/0009b464-b376-4fbc-8a56-da538269a02f.rds")
devtools::load_all()
devtools::load_all()
out = TAPACLOTH::run_classifier(x,
alpha_level = 0.1,
model = "beta-binomial",
rho = 1e-4)
alpha_level = 0.1
model = "beta-binomial"
rho = 1e-4
model
model = model %>% tolower()
# Output
test = list()
class(test) = "TAPACLOTH"
stopifnot(model%in% c("binomial", "beta-binomial", "terzile"))
inherits(x, "TAPACLOTH")
test = x
test$classifier = list()
class(test) = "TAPACLOTH"
model %in% c("binomial", "beta-binomial")
cli::cli_h1(
"TAPACLOTH {.field {model}} clonality/Zygosity testing for sample {.field {x$sample}}"
)
cat("\n")
cli::cli_alert_info("Computing null model distributions and p-values.")
x = idify(x)
x$data
x$data$id
x$data$id[1]
i = x$data$id[1]
id = x$data$id[1]
null_model = test_setup(
coverage = get_DP(x, mutation_id = id),
purity = get_purity(x),
rho = rho,
alpha_level = alpha_level,
model = model
)
pvalues = get_pvalues(x, null_model, id)
pvalues
pvalues$outcome = pvalues$pvalue > alpha_level
pvalues
x = readRDS("~/cds/guascone/dati_ncalonaci/tapacloth/SNV_simple_k/0009b464-b376-4fbc-8a56-da538269a02f.rds")
devtools::load_all()
out = TAPACLOTH::run_classifier(x,
alpha_level = 0.1,
model = "beta-binomial",
rho = 1e-4)
out
out$data
out$classifier$`beta-binomial`$data
out$classifier$`beta-binomial`$data %>% dplyr::filter(outcome==TRUE)
out$classifier$`beta-binomial`$data %>% dplyr::filter(outcome==TRUE) %>% select(chr, from, to, ref, alt, karyotype, multiplicity, outcome)
out$classifier$`beta-binomial`$data %>% dplyr::filter(outcome==TRUE) %>% select(chr, from, to, ref, alt, karyotype.y, multiplicity.y, outcome)
out$classifier$`beta-binomial`$data %>% select(chr, from, to, ref, alt, karyotype.y, multiplicity.y, outcome)
get_classes = function(x, model){
y = x$classifier[[model]]$data %>%
dplyr::select(chr, from, to, ref, alt, karyotype.y, multiplicity.y, outcome)
return(y)
}
devtools::load_all()
get_classes(out, model="beta-binomial")
get_params(out)
out$classifier %>% names()
out$classifier %>% names() %>% Vectorize()
out$classifier %>% names() %>% as.list()
get_params = function(x){
lapply(names(x$classifier) %>% as.list(), function(model){
x$classifier[[model]]$params
}) %>% do.call(rbind)
}
devtools::load_all()
out$classifier %>% names() %>% as.list()
get_params(out)
get_params = function(x){
lapply(x$classifier %>% names(), function(model){
x$classifier[[model]]$params
}) %>% do.call(rbind, .)
}
devtools::load_all()
get_params(out)
devtools::load_all()
get_params(out)
get_params = function(x) {
lapply(x$classifier %>% names(), function(model) {
tibble(model = model,
x$classifier[[model]]$params)
}) %>%
do.call(rbind, .)
}
get_params(out)
devtools::load_all()
get_params(out)
View(get_params)
View(get_params)
x = readRDS("~/cds/guascone/dati_ncalonaci/tapacloth/SNV_simple_k/0009b464-b376-4fbc-8a56-da538269a02f.rds")
out = TAPACLOTH::run_classifier(x,
alpha_level = 0.1,
model = "beta-binomial",
rho = 1e-4)
get_params(out)
get_classes(out)
out
get_classes(out, model = "beta-binomial")
x = out
model
model = "beta-binomial"
x$data
gene_id = "CFAP74"
x$classifier[[model]]
x$classifier[[model]]$data %>%
dplyr::filter(gene == gene_id)
#' @description
#' Get coordinates of mutation(s) mapped on a specified gene.
#' @param x An obj of class \code{'TAPACLOTH'}.
#' @param chr Chromosome affected by the mutation.
#' @param from Start position of the mutation.
#' @param to End position of the mutation.
#' @param ref Reference allele.
#' @param alt Alternative allele.
#' @return A tibble with classification data for the specified mutation.
#' @export
get_coord = function(x, gene_name){
x %>%
idify() %>%
get_data() %>%
dplyr::filter(gene == gene_name) %>%
pull(chr, from, to, ref, alt)
}
x$data[1]
x$data[1,]
get_coord(x, "CFAP74")
gene_name = "CFAP74"
x %>%
idify() %>%
get_data() %>%
dplyr::filter(gene == gene_name)
x %>%
idify() %>%
get_data() %>%
dplyr::filter(gene == gene_name) %>%
pull(chr, from, to, ref, alt)
x %>%
idify() %>%
get_data() %>%
dplyr::filter(gene == gene_name) %>%
pull(c(chr, from, to, ref, alt))
x %>%
idify() %>%
get_data() %>%
dplyr::filter(gene == gene_name) %>%
pull(id)
x %>%
idify() %>%
get_data() %>%
dplyr::filter(gene == gene_name) %>%
pull(id) %>%
strsplit(., split = ":")
x %>%
idify() %>%
get_data() %>%
dplyr::filter(gene == gene_name) %>%
pull(id) %>%
strsplit(., split = ":")[[1]]
#' @description
#' Get coordinates of mutation(s) mapped on a specified gene.
#' @param x An obj of class \code{'TAPACLOTH'}.
#' @param chr Chromosome affected by the mutation.
#' @param from Start position of the mutation.
#' @param to End position of the mutation.
#' @param ref Reference allele.
#' @param alt Alternative allele.
#' @return A tibble with classification data for the specified mutation.
#' @export
get_coord = function(x, gene_name){
x %>%
idify() %>%
get_data() %>%
dplyr::filter(gene == gene_name) %>%
pull(id) %>%
strsplit(., split = ":",)
}
get_coord(x, "CFAP74")
get_coord(x, "CFAP74")
y = get_coord(x, "CFAP74")
y[[1]]
y[[1]] %>% paste(sep=",")
y[[1]] %>% paste(collapse=",")
y = get_coord(x, "CFAP74")
y[1]
y[[1]][1]
devtools::load_all
devtools::load_all()
devtools::document()
devtools::check()
x = readRDS("./testdata.rds")
x
usethis::use_data(x)
