p = prob,
alternative = "two.sided",
conf.level = 0.95)
test_loh = binom.test(x = nsucc,
n = ntrials,
p = prob*2,
alternative = "two.sided",
conf.level = 0.95)
BH = p.adjust(c(test_clonal$p.value, test_loh$p.value), method = "BH")
x$p.value_ind_clonal = test_clonal$p.value
x$p.value_ind_loh = test_loh$p.value
x$p.value_clonal = BH[1]
x$p.value_loh = BH[2]
return(x %>% as_tibble())
}
test = apply(data.frame(x), 1, bintest) %>%
do.call(rbind, .)
test = test %>%
mutate(class = case_when(
Hugo_Symbol == "KEAP1" & p.value_clonal >= 0.9 ~ "KEAP1 Clonal Heterozygous",
Hugo_Symbol == "KEAP1" & p.value_loh >= 0.9 ~ "KEAP1 Clonal LOH",
Hugo_Symbol == "KEAP1"  & p.value_loh < 0.9 ~ "KEAP1 Subclonal",
TRUE ~ "Other"
))
test %>% pull(class) %>% table()
# test %>%
#   filter(Hugo_Symbol=="KEAP1") %>%
#   filter(p.value_clonal > 0.98 | p.value_loh > 0.98)
#
# test = test %>%
#   mutate(VAF = as.double(VAF),
#          Purity = as.integer(Purity))
plot_vaf_patient = function(patient){
x = test %>%
filter(Tumor_Sample_Barcode == patient) %>%
mutate(Purity = as.double(Purity)/100,
VAF = as.double(VAF))
purity = x %>% pull(Purity) %>% unique()
colormap = c("purple", "blue", "yellow", "grey")
names(colormap) = c("KEAP1 Clonal Heterozygous", "KEAP1 Clonal LOH", "KEAP1 Subclonal", "Other")
ggplot(x, aes(x = VAF, fill = class))+
geom_histogram(binwidth = 0.01)+
xlim(0,1)+
ggtitle(paste0("Sample: ", patient, "\nSample purity: ", purity))+
CNAqc:::my_ggplot_theme()+
scale_fill_manual(values = colormap)
}
toplot = test %>%
group_by(Tumor_Sample_Barcode) %>%
filter(any(class %in% c("Clonal Heterozygous", "Clonal LOH")))
plist = lapply(toplot %>%
pull(Tumor_Sample_Barcode) %>%
unique(), plot_vaf_patient)
ggpubr::ggarrange(plotlist = plist, common.legend = TRUE, legend = "bottom")
plist
toplot
test
test %>% pull(class) %>% table()
plot_vaf_patient = function(patient){
x = test %>%
filter(Tumor_Sample_Barcode == patient) %>%
mutate(Purity = as.double(Purity)/100,
VAF = as.double(VAF))
purity = x %>% pull(Purity) %>% unique()
colormap = c("purple", "blue", "yellow", "grey")
names(colormap) = c("KEAP1 Clonal Heterozygous", "KEAP1 Clonal LOH", "KEAP1 Subclonal", "Other")
ggplot(x, aes(x = VAF, fill = class))+
geom_histogram(binwidth = 0.01)+
xlim(0,1)+
ggtitle(paste0("Sample: ", patient, "\nSample purity: ", purity))+
CNAqc:::my_ggplot_theme()+
scale_fill_manual(values = colormap)
}
toplot = test %>%
group_by(Tumor_Sample_Barcode) %>%
filter(any(class %in% c("Clonal Heterozygous", "Clonal LOH")))
toplot = test %>%
group_by(Tumor_Sample_Barcode) %>%
filter(any(class %in% c("KEAP1 Clonal Heterozygous", "KEAP1 Clonal LOH")))
toplot
plist = lapply(toplot %>%
pull(Tumor_Sample_Barcode) %>%
unique(), plot_vaf_patient)
ggpubr::ggarrange(plotlist = plist, common.legend = TRUE, legend = "bottom")
plt = ggpubr::ggarrange(plotlist = plist, common.legend = TRUE, legend = "bottom")
ggsave(filename = "./classifier.png",
plot = plt,
device = "png",
dpi = "print",
width = 8,
height = 6)
setwd("~/cds/regina_elena/")
x = readRDS("./fits_high_dp/097a7d36-905b-72be-e050-11ac0d482c9a.rds.rds")
library(TAPACLOTH)
devtools::load_all("~/Documents/GitHub/TAPACLOTH/")
plot_heatmap(x)
x
x = readRDS("./fits_high_dp/097a7d36-905b-72be-e050-11ac0d482c9a.rds.rds")
x
plot_heatmap(x)
plot_heatmap(x, model = "beta-binomial")
x = readRDS("./fits_high_dp/0cb4356c-b5d6-4541-b048-ff6d4b3a5d26.rds.rds")
x
x = readRDS("./fits_high_dp/241abdfd-e6de-4830-a233-4bbc5f622725.rds.rds")
x
plot_heatmap(x, model = "beta-binomial")
x = readRDS("./fits_high_dp/50b61288-1412-4104-92e6-8b1a359ef399.rds.rds")
x
x = readRDS("./fits_high_dp/28839c75-90a8-493f-b658-8c63e0ebd324.rds.rds")
x
x = readRDS("./fits_high_dp/2102558b-87b0-447b-bb9a-e4ae9df8b75e.rds.rds")
x
plot_heatmap(x, model = "beta-binomial")
setwd("~/Documents/GitHub/TAPACLOTH/")
x = init(example_data$data,example_data$sample, example_data$purity)
stopifnot(inherits(x, "TAPACLOTH"))
model = model %>% tolower()
model = "beta-binomial"
model = model %>% tolower()
stopifnot(model%in% c("binomial", "beta-binomial"))
# Output
test = x
if (!("classifier" %in% names(test)))
!("classifier" %in% names(test))
test$classifier = list()
cli::cli_h1(
"TAPACLOTH {.field {model}} clonality/Zygosity testing for sample {.field {x$sample}}"
)
cat("\n")
cli::cli_alert_info("Computing null model distributions and p-values.")
x = idify(x)
pvalues = lapply(x$data$id, function(id) {
null_model = test_setup(
coverage = get_DP(x, mutation_id = id),
purity = get_purity(x),
rho = rho,
alpha_level = alpha_level,
model = model
)
pvalues = get_pvalues(x, null_model, id)
## Multiple-hypotheses correction (BH)
pvalues
pvalues$outcome = pvalues$pvalue > alpha_level
return(pvalues)
}) %>%
do.call(rbind, .)
rho = 1e-4
pvalues = lapply(x$data$id, function(id) {
null_model = test_setup(
coverage = get_DP(x, mutation_id = id),
purity = get_purity(x),
rho = rho,
alpha_level = alpha_level,
model = model
)
pvalues = get_pvalues(x, null_model, id)
## Multiple-hypotheses correction (BH)
pvalues
pvalues$outcome = pvalues$pvalue > alpha_level
return(pvalues)
}) %>%
do.call(rbind, .)
alpha_level = 0.05
pvalues = lapply(x$data$id, function(id) {
null_model = test_setup(
coverage = get_DP(x, mutation_id = id),
purity = get_purity(x),
rho = rho,
alpha_level = alpha_level,
model = model
)
pvalues = get_pvalues(x, null_model, id)
## Multiple-hypotheses correction (BH)
pvalues
pvalues$outcome = pvalues$pvalue > alpha_level
return(pvalues)
}) %>%
do.call(rbind, .)
pvalues
id = x$data$id
id = x$data$id[1]
id
coverage = get_DP(x, mutation_id = id)
purity = get_purity(x)
rho = rho
# Range of NV values
nvs = 1:coverage
nvs
# Compute Binomial or Beta-Binomial probability for NV values in range
log_p = NULL
log_p = lapply(c("1:0", "1:1", "2:0", "2:1", "2:2"), function(karyotype) {
alleles = stringr::str_split(string = karyotype, pattern = ":") %>% unlist() %>% as.integer()
ploidy = sum(alleles)
lapply(1:max(alleles), function(mult) {
if ((model %>% tolower()) == 'binomial') {
log_p = sapply(nvs,
dbinom,
size = coverage,
prob = mult * purity / (2 * (1 - purity) + purity * ploidy))
}
else {
log_p = sapply(
nvs,
VGAM::dbetabinom,
size = coverage,
prob = mult * purity / (2 * (1 - purity) + purity * ploidy),
rho = rho
)
}
# Compute P(X > NV) for each NV value
# p_x = cumsum(log_p)
# Find l_a such that P(X <= l_a) < alpha
# l_a = which(p_x < alpha_level, arr.ind = TRUE) %>% max
#
# # Find r_a such that P(X > r_a) < 1 - alpha
# r_a = which(p_x > 1 - alpha_level, arr.ind = TRUE) %>% min
# Compute two-tailed p-value for each NV value
p_x = sapply(nvs, function(nv){log_p[which(log_p <= log_p[nv])] %>% sum()})
# Find left extremum NV l_a such that p-value < alpha
l_a = which(p_x > alpha_level, arr.ind = TRUE) %>% min
# Find right extremum NV l_a such that p-value < alpha
r_a = which(p_x > alpha_level, arr.ind = TRUE) %>% max
# Adjustments for plots when test fails
if (is.infinite(l_a))
l_a = 1
if (is.infinite(r_a))
r_a = coverage
# Translate NV cutoffs in VAF space
vafs = nvs / coverage
l_v = vafs[l_a]
r_v = vafs[r_a]
return(tibble(
karyotype = karyotype,
multiplicity = mult,
inputs = list(tibble(nv = nvs,
p = p_x,
VAF = vafs)),
l_a = l_a,
r_a = r_a,
l_v = l_v,
r_v = r_v
))
}) %>% do.call(rbind, .)
}) %>% do.call(rbind, .)
log_p
l_a
plot(log_p)
plot(log_p[1,]$inputs)
p_x
# Compute two-tailed p-value for each NV value
p_x = sapply(nvs, function(nv){log_p[which(log_p <= log_p[nv])] %>% sum()})
log_p
karyoype = "1:0"
alleles = stringr::str_split(string = karyotype, pattern = ":") %>% unlist() %>% as.integer()
karyotype = "1:0"
alleles = stringr::str_split(string = karyotype, pattern = ":") %>% unlist() %>% as.integer()
ploidy = sum(alleles)
1:max(alleles)
mult = 1
log_p = sapply(
nvs,
VGAM::dbetabinom,
size = coverage,
prob = mult * purity / (2 * (1 - purity) + purity * ploidy),
rho = rho
)
log_p
plot(log_p)
coverage
# Compute two-tailed p-value for each NV value
p_x = sapply(nvs, function(nv){log_p[which(log_p <= log_p[nv])] %>% sum()})
plot(p_x)
plot(1-p_x)
p_x = 1-p_x
p_x
plot(p_x)
alpha_level
1-alpha_level
which(p_x < alpha_level, arr.ind = TRUE)
(p_x < alpha_level, arr.ind = TRUE)
which(p_x < alpha_level, arr.ind = TRUE)
which(p_x < 1-alpha_level, arr.ind = TRUE)
which(p_x < 1-alpha_level, arr.ind = TRUE) %>% min
which(p_x < 1-alpha_level, arr.ind = TRUE) %>% min
which(p_x < 1-alpha_level, arr.ind = TRUE) %>% max
list(
model = model,
rho = rho,
coverage = coverage,
purity = purity,
alpha_level = alpha_level,
test = log_p
)
x
id
null_model = test_setup(
coverage = get_DP(x, mutation_id = id),
purity = get_purity(x),
rho = rho,
alpha_level = alpha_level,
model = model
)
null_model
devtools::load_all()
null_model = test_setup(
coverage = get_DP(x, mutation_id = id),
purity = get_purity(x),
rho = rho,
alpha_level = alpha_level,
model = model
)
null_model
null_model$test %>%
dplyr::select(karyotype, multiplicity, l_a, r_a)
y = null_model$test %>%
dplyr::select(karyotype, multiplicity, l_a, r_a)
y$id = mutation_id
y$pvalue = sapply(null_model$test$inputs, function(s) {
s$p[get_NV(x, mutation_id)]
})
mutation_id = id
y$pvalue = sapply(null_model$test$inputs, function(s) {
s$p[get_NV(x, mutation_id)]
})
y$pvalue
log_p
y$gene = get_gene(x, mutation_id)
y
get_DP(x, mutation_id = id)
get_NV(x, mutation_id = id)
get_purity(x)
30/45
1-alpha_level
2*0.885/3
1-0.01
pvalues$pvalue > alpha_level
pvalues
pvalues = get_pvalues(x, null_model, id)
pvalues
pvalues$pavlue
pvalues$pvalue
p.adjust(pvalues$pvalue, method = "BH")
0.457*8
0.457/8
0.457*8
p.adjust(pvalues$pvalue, method = "Bonferroni")
p.adjust(pvalues$pvalue, method = "bonferroni")
pvalues$pvalue = p.adjust(pvalues$pvalue, method = "BH")
1 - alpha_level
pvalues$pvalue
pvalues$pvalue < 1 - alpha_level
x
pvalues$pvalue < 1 - alpha_level
p.adjust(pvalues$pvalue, method = "BH")
pvalues$pvalue < 1 - alpha_level
pvalues = lapply(x$data$id, function(id) {
null_model = test_setup(
coverage = get_DP(x, mutation_id = id),
purity = get_purity(x),
rho = rho,
alpha_level = alpha_level,
model = model
)
pvalues = get_pvalues(x, null_model, id)
pvalues$pvalue = p.adjust(pvalues$pvalue, method = "BH")
pvalues$outcome = pvalues$pvalue < 1 - alpha_level
return(pvalues)
}) %>%
do.call(rbind, .)
pvalues
pvalues$outcome
pvalues$outcome %>% table()
x$data$id
devtools::install()
## set your user name and email:
usethis::use_git_config(user.name = "nicola-calonaci", user.email = "nicola.calonaci@gmail.com")
## set personal access token:
credentials::set_github_pat("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")
devtools::install()
devtools::check()
devtools::check()
devtools::document()
devtools::load_all()
devtools::document()
x = run_classifier(x = init(mutations = example_data$data, sample = example_data$sample, purity = example_data$purity))
x$classifier$binomial$data
stopifnot(inherits(x, "TAPACLOTH"))
model = model %>% tolower()
# Tibble 2 matrix
t2m = function(x){
m =  x[, 2:ncol(x)] %>% as.matrix()
colnames(m) = names(x)[2:length(names(x))]
rownames(m) = x$label
m
}
model = "binomial"
input_classes = x %>%
TAPACLOTH:::get_classifier(model = model) %>%
TAPACLOTH:::get_data() %>%
dplyr::mutate(
label = paste0(gene, " (", from, ") ", ref, '>', alt),
label_k = paste(karyotype, ' (', multiplicity, ')', sep = '')
)
input_classes
# Matrix of the classifications
input_classes_matrix = input_classes %>%
dplyr::mutate(outcome = ifelse(outcome, 1, 0)) %>%
dplyr::select(label, label_k, outcome) %>%
tidyr::pivot_wider(names_from = label_k, values_from = outcome)
# Idiotic formats
matrix_outcomes = input_classes_matrix %>% t2m()
matrix_outcomes
# p-values
pvalue_matrix = input_classes %>%
dplyr::select(label, label_k, pvalue) %>%
tidyr::pivot_wider(names_from = label_k, values_from = pvalue)
pvalue_matrix
p_matrix =  pvalue_matrix %>% t2m
p_matrix
# Nicola - I don't understand why I have to use <, shouldn't it be >= to remove non-significant ones?
alpha_test = TAPACLOTH::get_params(x) %>%
dplyr::filter(model == !!model) %>%
pull(alpha)
p_matrix
alpha_test
p_matrix[p_matrix > 1-alpha_test]
p_matrix[p_matrix > 1-alpha_test] = NA
p_matrix[p_matrix < 1-alpha_test]
x < alpha_test*0.001
x
p_matrix<0.001*alpha_test
p_matrix<0.001*alpha_tes %>% table()
p_matrix<0.001*alpha_test %>% table()
p_matrix = apply(p_matrix, c(1, 2), function(x) {
if (is.na(x)) return('')
if (x < alpha_test*0.001) return("***")
if (x < alpha_test*0.01) return("**")
return("*")
})
# Read counts data
df_counts = input_classes %>%
dplyr::select(label, NV, DP, VAF) %>%
dplyr::distinct() %>%
data.frame()
rownames(df_counts) = df_counts$label
df_counts = df_counts[, 2:ncol(df_counts)]
# Roles
roles_all = input_classes$gene_role %>% unique()
roles_all = strsplit(roles_all, ',') %>% unlist %>% unique
roles_all_others = roles_all[!(roles_all %in% c("TSG", "oncogene", NA))]
df_roles = input_classes %>%
dplyr::select(label, gene_role) %>%
dplyr::rename(role = gene_role) %>%
dplyr::distinct() %>%
rowwise() %>%
mutate(
TSG = grepl('TSG', role),
oncogene = grepl('oncogene', role),
other = sapply(roles_all_others, function(x)
grepl(x, role)) %>% any,
unknown = is.na(role)
) %>%
dplyr::select(-role) %>%
as.data.frame()
rownames(df_roles) = df_roles$label
df_roles = df_roles[,-1]
# df_roles = apply(df_roles, 2, function(x) ifelse(x, 1, 0)) %>% data.frame
df_roles = apply(df_roles, 2, function(x)
ifelse(x, "YES", "NO")) %>% data.frame
# Annotation rows
annotation_rows = cbind(df_counts, df_roles)
# I decided we do not show these
annotation_rows = annotation_rows[,!apply(annotation_rows, 2, function(x)
all(x == "NO"))]
annotation_rows = annotation_rows[, colnames(annotation_rows) != 'NV']
annotation_rows = annotation_rows[, colnames(annotation_rows) != 'other']
presence_annotation = 'darkgray'
onco_color = 'orange'
tsg_color = 'steelblue'
annotation_colors = list(
TSG = c(`NO` = "white", `YES` = tsg_color),
oncogene = c(`NO` = "white", `YES` = onco_color),
other = c(`NO` = "white", `YES` = presence_annotation),
unknown = c(`NO` = "white", `YES` = presence_annotation),
# DP = RColorBrewer::brewer.pal(10, 'Purples'),
DP = viridis::viridis(10, direction = -1),
NV = RColorBrewer::brewer.pal(8, 'Purples'),
# VAF = RColorBrewer::brewer.pal(10, 'Spectral')
VAF = viridis::viridis(10, direction = -1)
)
pheatmap::pheatmap(
mat = matrix_outcomes,
main = x$sample,
cluster_cols = FALSE,
fontsize_row = 6,
fontsize = 7,
cellwidth = 20,
cellheight = 10,
display_numbers = p_matrix,
number_color = 'white',
# border_color = NA
gaps_col = c(1, 2, 4, 6, 8),
breaks = c(-1, 0, 1),
color = c(`0` = ggplot2::alpha('gainsboro', .5), `1` = 'indianred3'),
legend_breaks = c(0, 1),
legend_labels = c(`0` = "Reject H0", `1` = "Fail to\nReject H0"),
annotation_row = annotation_rows,
annotation_colors = annotation_colors
)
devtools::load_all()
devtools::document()
devtools::check()
