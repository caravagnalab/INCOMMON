prior_ts %>% filter(gene == g)
} else {
prior_panca %>% filter(gene == g)
}
}) %>% do.call(rbind, .)
# Run TAPACLOTH classifier
out = TAPACLOTH::run_classifier(
x = what,
cutoff = 0.0,
rho = 0.01,
priors = prior,
gene_role_specific = FALSE,
assign_extremes = TRUE
)
}
if(!is.null(out)){
# Extract classification likelihoods
out = extract_likelihood(out)
saveRDS(object = out, file = paste0('/Users/nicola.calonaci/Dropbox/2023.TAPACLOTH/results/fits/TAPACLOTH', s, '.rds'))
out = out$classifier$data %>%
add_labels() %>%
dplyr::select(-density) %>%
dplyr::select(sample, purity, tumor_type, gene, gene_role, HGVSp_Short, label, likelihood, entropy, chr, from, ref, alt, NV, DP, VAF, dplyr::everything())
}
out
}
x = prepare_msk_data()
# x = x %>% convert_msk_tumor_types()
x = x %>% convert_tumor_types()
priors = readRDS("./results/priors_my_drivers.rds")
res = easypar::run(
FUN = classify,
PARAMS = lapply(unique(x$sample)[1:2], list),
packages = c("tidyverse"),
export = ls(environment()),
cores.ratio = .9,
parallel = TRUE,
# filter_errors = FALSE
filter_errors = TRUE
)
res
setwd('~')
x
unique(x$sample)[1:2]
classify(unique(x$sample)[1])
library(TAPACLOTH)
library('TAPACLOTH')
devtools::load_all('~/Documents/GitHub/TAPACLOTH/')
classify(unique(x$sample)[1])
classify = function(s){
# Get sample data
what = get_msk_sample(msk_data = x, s = s)
# Get purity of sample
purity = get_msk_sample_purity(msk_data = what, s = s)
# Get tumor type of sample
ttype = get_msk_sample_tumor_type(msk_data = what, s = s)
# Initialize TAPACLOTH object
what = TAPACLOTH::init(mutations = what,
sample = s,
purity = purity)
# Summarize gene role when multiple are annotated
what = what %>% reduce_gene_role()
# Remove genes with unknown role
what$data = what$data %>% dplyr::filter(!is.na(gene_role))
what$data = what$data %>% dplyr::mutate(DP = as.integer(DP))
what$data = what$data %>% dplyr::mutate(NV = as.integer(NV))
# Return NULL of purity is not available
out = NULL
if(!is.na(what$purity)){
# Use tumor-specific or Pan-cancer priors
prior = priors %>% dplyr::filter(gene %in% what$data$gene, tumor_type %in% c("PANCA", ttype))
prior_ts = prior %>% dplyr::filter(tumor_type != "PANCA")
prior_panca = prior %>% dplyr::filter(tumor_type == "PANCA")
prior = lapply(prior$gene %>% unique(), function(g){
if(g %in% prior_ts$gene){
prior_ts %>% filter(gene == g)
} else {
prior_panca %>% filter(gene == g)
}
}) %>% do.call(rbind, .)
# Run TAPACLOTH classifier
out = TAPACLOTH::run_classifier(
x = what,
cutoff = 0.0,
rho = 0.01,
priors = prior,
gene_role_specific = FALSE,
assign_extremes = TRUE
)
}
if(!is.null(out)){
# Extract classification likelihoods
out = extract_likelihood(out)
saveRDS(object = out, file = paste0('/Users/nicola.calonaci/Dropbox/2023.TAPACLOTH/results/fits/TAPACLOTH/', s, '.rds'))
out = out$classifier$data %>%
add_labels() %>%
dplyr::select(-density) %>%
dplyr::select(sample, purity, tumor_type, gene, gene_role, HGVSp_Short, label, likelihood, entropy, chr, from, ref, alt, NV, DP, VAF, dplyr::everything())
}
out
}
classify(unique(x$sample)[1])
res = easypar::run(
FUN = classify,
PARAMS = lapply(unique(x$sample), list),
packages = c("tidyverse"),
export = ls(environment()),
cores.ratio = .9,
parallel = TRUE,
# filter_errors = FALSE
filter_errors = TRUE
)
setwd('~/dati/final_tc')
setwd('~/dati/final_tc')
library(tidyverse)
source("./scripts/library.R")
classify = function(s){
# Get sample data
what = get_msk_sample(msk_data = x, s = s)
# Get purity of sample
purity = get_msk_sample_purity(msk_data = what, s = s)
# Get tumor type of sample
ttype = get_msk_sample_tumor_type(msk_data = what, s = s)
# Initialize TAPACLOTH object
what = TAPACLOTH::init(mutations = what,
sample = s,
purity = purity)
# Summarize gene role when multiple are annotated
what = what %>% reduce_gene_role()
# Remove genes with unknown role
what$data = what$data %>% dplyr::filter(!is.na(gene_role))
what$data = what$data %>% dplyr::mutate(DP = as.integer(DP))
what$data = what$data %>% dplyr::mutate(NV = as.integer(NV))
# Return NULL of purity is not available
out = NULL
if(!is.na(what$purity)){
# Use tumor-specific or Pan-cancer priors
prior = priors %>% dplyr::filter(gene %in% what$data$gene, tumor_type %in% c("PANCA", ttype))
prior_ts = prior %>% dplyr::filter(tumor_type != "PANCA")
prior_panca = prior %>% dplyr::filter(tumor_type == "PANCA")
prior = lapply(prior$gene %>% unique(), function(g){
if(g %in% prior_ts$gene){
prior_ts %>% filter(gene == g)
} else {
prior_panca %>% filter(gene == g)
}
}) %>% do.call(rbind, .)
# Run TAPACLOTH classifier
out = TAPACLOTH::run_classifier(
x = what,
cutoff = 0.0,
rho = 0.01,
priors = prior,
gene_role_specific = FALSE,
assign_extremes = TRUE
)
}
if(!is.null(out)){
# Extract classification likelihoods
# out = extract_likelihood(out)
saveRDS(object = out, file = paste0('/Users/nicola.calonaci/Dropbox/2023.TAPACLOTH/results/fits/TAPACLOTH/', s, '.rds'))
out = out$classifier$data %>%
add_labels() %>%
dplyr::select(-density) %>%
dplyr::select(sample, purity, tumor_type, gene, gene_role, HGVSp_Short, label, likelihood, entropy, chr, from, ref, alt, NV, DP, VAF, dplyr::everything())
}
out
}
priors = readRDS("./results/priors_my_drivers.rds")
setwd('~/')
x = prepare_msk_data()
# x = x %>% convert_msk_tumor_types()
x = x %>% convert_tumor_types()
x = prepare_msk_data()
setwd('~/dati/final_tc')
priors = readRDS("./results/priors_my_drivers.rds")
x = prepare_msk_data()
# x = x %>% convert_msk_tumor_types()
x = x %>% convert_tumor_types()
setwd('~')
devtools::load_all("~/Documents/GitHub/TAPACLOTH/")
res = easypar::run(
FUN = classify,
PARAMS = lapply(unique(x$sample), list),
packages = c("tidyverse"),
export = ls(environment()),
cores.ratio = .9,
parallel = TRUE,
# filter_errors = FALSE
filter_errors = TRUE
)
setwd('~/Documents/GitHub/rRACES/')
devtools::load_all('./')
setwd('~')
install.packages(c("shiny", "ggplot2", "DT"))
install.packages(c("shiny", "DT"))
library(shiny)
library(DT)
library(ggplot2)
ui <- fluidPage(
titlePanel("Sample Fit Visualizer"),
sidebarLayout(
sidebarPanel(
# Placeholder for any inputs/filters you might want to add
),
mainPanel(
DTOutput("samplesTable"),
plotOutput("fitPlot")
)
)
)
library(tidyverse)
samples_tibble = readRDS("~/Dropbox/2023. TAPACLOTH/results/msk_classified_with_priors.rds")
samples_tibble = readRDS("~/Dropbox/2023.TAPACLOTH/results/msk_classified_with_priors.rds")
samples_tibble
samples_tibble = samples_tibble[1:10,]
# Render the table
output$samplesTable <- renderDT({
# Assuming `samples_tibble` is your input tibble
datatable(samples_tibble, selection = 'single')
}, server = FALSE)
output$samplesTable
server <- function(input, output, session) {
samples_tibble = readRDS("~/Dropbox/2023.TAPACLOTH/results/msk_classified_with_priors.rds")
samples_tibble = samples_tibble[1:10,]
# Render the table
output$samplesTable <- renderDT({
# Assuming `samples_tibble` is your input tibble
datatable(samples_tibble, selection = 'single')
}, server = FALSE)
# Reactive expression to fetch the ggplot object from the selected RDS file
selectedPlot <- reactive({
# Get the selected row
selectedRow <- input$samplesTable_rows_selected
if (length(selectedRow) == 1) {
# Assuming your tibble has a column `rds_path` with the file paths
# rdsPath <- samples_tibble$rds_path[selectedRow]
# ggplotObj <- readRDS(rdsPath)
data <- data.frame(
x = runif(50, min = -10, max = 10), # 50 random values for x-axis
y = runif(50, min = -10, max = 10)  # 50 random values for y-axis
)
# Generate scatterplot
ggplotObj  = ggplot(data, aes(x = x, y = y)) +
geom_point() +
ggtitle("Random Scatterplot with 50 Points") +
xlab("X Axis") +
ylab("Y Axis") +
theme_minimal()
return(ggplotObj)
}
})
# Render the ggplot object
output$fitPlot <- renderPlot({
# Check if there is a selected plot
if (!is.null(selectedPlot())) {
print(selectedPlot())
}
})
}
shinyApp(ui = ui, server = server)
server <- function(input, output, session) {
# Reactive values to store row indices for Group A and B
groupA <- reactiveVal()
groupB <- reactiveVal()
# Render the DataTable with selection enabled
output$samplesTable <- renderDT({
datatable(samples_tibble, selection = 'multiple', options = list(dom = 'Bfrtip', buttons = c('selectAll', 'selectNone'), pageLength = 10))
}, server = FALSE)
# Assign selected rows to Group A
observeEvent(input$assignA, {
groupA(input$samplesTable_rows_selected)
})
# Assign selected rows to Group B
observeEvent(input$assignB, {
groupB(input$samplesTable_rows_selected)
})
# Handle "Select All Visible Rows" button click
observeEvent(input$selectAll, {
session$sendCustomMessage('selectVisibleRows', list())
})
# Display Group A and B selections
output$groupAStatus <- renderText({
paste("Group A Rows:", paste(groupA(), collapse = ", "))
})
output$groupBStatus <- renderText({
paste("Group B Rows:", paste(groupB(), collapse = ", "))
})
# Define reactive expressions and outputs for analysis results as before
}
shinyApp(ui = ui, server = server)
setwd('~/Documents/GitHub/INCOMMON/')
devtools::load_all()
devtools::document()
devtools::document()
pkgdown::build_site()
library(dplyr)
library(INCOMMON)
print(example_data)
input = init(mutations = example_data$data,
sample = example_data$sample,
purity = example_data$purity,
tumor_type = example_data$tumor_type,
gene_roles = cancer_gene_census)
print(input)
out = classify(
x = input,
priors = NULL,
entropy_cutoff = NULL,
rho = 0.01
)
print(out)
plot_classification(out)
plot_classification(out)
devtools::install_github('caravagnalab/INCOMMON')
devtools::document()
pkgdown::build_site()
devtools::install_github('caravagnalab/INCOMMON')
devtools::document()
pkgdown::build_site()
devtools::install_github('caravagnalab/INCOMMON')
devtools::document()
pkgdown::build_site()
x = init(mutations = example_data$data,
sample = example_data$sample,
purity = example_data$purity,
tumor_type = example_data$tumor_type)
x
print(x)
x = classify(
x = x,
priors = NULL,
entropy_cutoff = 0.2,
rho = 0.01,
karyotypes = c("1:0","1:1","2:0","2:1","2:2")
)
devtools::install_github('caravagnalab/INCOMMON')
devtools::document()
pkgdown::build_site()
x = init(mutations = example_data$data,
sample = example_data$sample,
purity = example_data$purity,
tumor_type = example_data$tumor_type)
x = classify(
x = x,
priors = pcawg_priors,
entropy_cutoff = 0.2,
rho = 0.01,
karyotypes = c("1:0","1:1","2:0","2:1","2:2")
)
library(dplyr)
x = init(mutations = example_data$data,
sample = example_data$sample,
purity = example_data$purity,
tumor_type = example_data$tumor_type)
x = classify(
x = x,
priors = pcawg_priors,
entropy_cutoff = 0.2,
rho = 0.01,
karyotypes = c("1:0","1:1","2:0","2:1","2:2")
)
x
print(x)
priors = pcawg_priors
entropy_cutoff = 0.2,
entropy_cutoff = 0.2
rho = 0.01
karyotypes = c("1:0","1:1","2:0","2:1","2:2")
stopifnot(inherits(x, "INCOMMON"))
if(is.null(entropy_cutoff)) entropy_cutoff = 1
# Output
output = x
if (!("fit" %in% names(output)))
output$fit = list()
cli::cli_h1(
"INCOMMON inference of copy number and mutation multiplicity for sample {.field {x$sample}}"
)
cat("\n")
check_input(x)
cli::cli_alert_info("Performing classification")
x = idify(x)
tests = lapply(ids(x), function(id) {
# Control for duplicates
if(info(x, mutation_id = id) %>% nrow() > 1){
cli_alert_warning(text = "More than one mutation mapped at: {.field {id}}")
info(x, id)
cli_alert_warning(text = "Keeping first row by default (check your input data)")
w = which(data(x)$id==id)
x$data = x$data[-w[2:length(w)],]
}
# Compute model likelihood, posterior and entropy
compute_posterior(
NV = NV(x, id),
DP = DP(x, id),
gene = gene(x, id),
priors = priors,
tumor_type = tumor_type(x),
purity = purity(x),
entropy_cutoff = entropy_cutoff,
rho = rho,
karyotypes = karyotypes
)
})
id = ids(x)[1]
NV = NV(x, id)
DP = DP(x, id)
gene = gene(x, id)
priors = priors
tumor_type = tumor_type(x)
purity = purity(x)
entropy_cutoff = entropy_cutoff
NV_x = 1:DP
# Density
db = function(Major, minor, prior, gene)
{
expected_peaks = CNAqc:::expected_vaf_peak(Major, minor, purity)$peak
lapply(expected_peaks %>% seq_along(), function(p) {
# Classification label
label = paste0(Major + minor, 'N (Mutated: ', p, "N)")
if(prior != 1){
if(!(label %in% priors$label)) cli::cli_alert_danger("Incomplete prior distribution!")
stopifnot(label %in% priors$label)
prior = prior %>% dplyr::filter(label == !!label) %>% dplyr::pull(p)
}
# Expected VAF peak of mixture component
expected_peak = expected_peaks[p]
# Beta-Binomial likelihood distribution
likelihood = compute_likelihood(NV = NV_x, DP = DP, prob = expected_peak, rho = rho)
# # Posterior distribution
# if (is.null(priors)){
#   prior = 1
# } else {
#   prior = get_prior(priors, gene, tumor_type, label)
# }
posterior = prior*likelihood
posterior = posterior/sum(posterior) # Normalise
# Output
out = data.frame(
value = posterior,
NV = NV_x,
Major = Major,
minor = minor,
ploidy = Major + minor,
multiplicity = p,
karyotype = paste0(Major, ":", minor),
label = label,
peak = expected_peak
)
out
}) %>%
do.call(dplyr::bind_rows, .)
}
is.null(priors)
priors
get_prior(priors, gene, tumor_type)
prior = get_prior(priors, gene, tumor_type)
k ="1:0"
alleles = strsplit(k, split = ":")[[1]] %>% as.integer()
Major = alleles[1]
minor = alleles[2]
prior
expected_peaks = CNAqc:::expected_vaf_peak(Major, minor, purity)$peak
expected_peaks %>% seq_along()
p=1
# Classification label
label = paste0(Major + minor, 'N (Mutated: ', p, "N)")
prior != 1
if(prior != 1){
if(!(label %in% priors$label)) cli::cli_alert_danger("Incomplete prior distribution!")
stopifnot(label %in% priors$label)
prior = prior %>% dplyr::filter(label == !!label) %>% dplyr::pull(p)
}
prior
is.numeric(prior)
class(prior)
is.numeric(1)
is.data.frame(prior)
is.da
devtools::install_github('caravagnalab/INCOMMON')
devtools::document()
pkgdown::build_site()
dplyr::tibble()
x = init(mutations = example_data$data,
sample = example_data$sample,
purity = example_data$purity,
tumor_type = example_data$tumor_type)
x = classify(
x = x,
priors = pcawg_priors,
entropy_cutoff = 0.2,
rho = 0.01,
karyotypes = c("1:0","1:1","2:0","2:1","2:2")
)
library(dplyr)
x = init(mutations = example_data$data,
sample = example_data$sample,
purity = example_data$purity,
tumor_type = example_data$tumor_type)
x = classify(
x = x,
priors = pcawg_priors,
entropy_cutoff = 0.2,
rho = 0.01,
karyotypes = c("1:0","1:1","2:0","2:1","2:2")
)
x
x$fit
parameters(x)
devtools::install_github('caravagnalab/INCOMMON')
devtools::document()
pkgdown::build_site()
