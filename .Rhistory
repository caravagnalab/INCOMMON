x = x %>% filter(sample == unique(x$sample)[1:2])
x = list(data = x, purity = x %>%
group_by(sample) %>%
summarise(purity = mean(purity)))
out = run_classifier(x = x, alpha_level = 0.01, model = "beta-binomial", rho = 0.01)
out = run_classifier(x = out, alpha_level = 0.01, model = "binomial", rho = 0.01)
out = run_classifier(x = out, alpha_level = 0.01, model = "terzile", rho = 0.01)
x = estimate_purity(x = out,model = "beta-binomial",eps = 0.01)
x = estimate_purity(x = x,model = "binomial",eps = 0.01)
x$purity_estimate$bbinomial$purity
x$purity_estimate$bbinomial$reliability
for(s in names(x$classifier)){
cli::cli_rule(
paste(
crayon::bgMagenta(crayon::black("[ TAPACLOTH ] ")),
'Purity estimate using ',
crayon::bgYellow(crayon::black("[ BMix ] ")),
'with ',
ifelse(s == 'bbinomial', "Beta-Binomial", "Binomial"),
'model'
)
)
print(full_join(x$purity_estimate[[s]]$purity, x$purity_estimate[[s]]$purity, by = "sample") %>% as_tibble())
}
for(s in names(x$classifier)){
cli::cli_rule(
paste(
crayon::bgMagenta(crayon::black("[ TAPACLOTH ] ")),
'Purity estimate using ',
crayon::bgYellow(crayon::black("[ BMix ] ")),
'with ',
ifelse(s == 'bbinomial', "Beta-Binomial", "Binomial"),
'model'
)
)
print(full_join(x$purity_estimate[[s]]$purity, x$purity_estimate[[s]]$reliability, by = "sample") %>% as_tibble())
}
for(s in names(x$purity_estimate)){
cli::cli_rule(
paste(
crayon::bgMagenta(crayon::black("[ TAPACLOTH ] ")),
'Purity estimate using ',
crayon::bgYellow(crayon::black("[ BMix ] ")),
'with ',
ifelse(s == 'bbinomial', "Beta-Binomial", "Binomial"),
'model'
)
)
print(full_join(x$purity_estimate[[s]]$purity, x$purity_estimate[[s]]$reliability, by = "sample") %>% as_tibble())
}
devtools::load_all()
x
inherits(x, "TAPACLOTH")
x$classifier$bbinomial$data
x$data$data
devtools::load_all()
x$data
x$data$data
x$classifier$bbinomial$data
cbind(x$data$data,x$classifier$bbinomial$data)
# Select sample
x$data = x$data$data %>%
dplyr::filter(sample == sample_name) %>%
cbind(x$data$data,x$classifier$bbinomial$data)
sample_name = x$data$data$sample[1]
target_gene = x$data$data$gene[1]
# Select sample
x$data = x$data$data %>%
dplyr::filter(sample == sample_name) %>%
cbind(x$data$data,x$classifier$bbinomial$data)
x$data
x$data$data %>%
dplyr::filter(sample == sample_name) %>%
cbind(x$classifier$bbinomial$data)
# Select sample
data = x$data$data %>%
dplyr::filter(sample == sample_name) %>%
cbind(x$classifier$bbinomial$data)
# Select sample
data = x$data$data %>%
dplyr::filter(sample == sample_name) %>%
cbind(x$classifier$bbinomial$data %>%
dplyr::filter(sample == sample_name))
x$data$data
x$data$data %>%
dplyr::filter(sample == sample_name)
x$classifier$bbinomial$data
x$data$data %>% cbind(x$classifier$bbinomial$data
)
x$data$data %>%
cbind(x$classifier$bbinomial$data %>%
dplyr::filter(sample == sample_name)
x$data$data %>%
cbind(x$classifier$bbinomial$data) %>%
dplyr::filter(sample == sample_name)
target_gene
sample_name
model
model = "binomial"
x$data$data %>%
cbind(x$classifier[[model]]$data) %>%
dplyr::filter(sample == sample_name)
# Select sample
data = x$data$data %>%
cbind(x$classifier[[model]]$data) %>%
dplyr::filter(sample == sample_name)
data
data %>%
dplyr::filter(gene == target_gene) %>%
dplyr::mutate(class = paste0(class, ' (', nv, '/', dp, ')')) %>%
dplyr::pull(class) %>%
paste(collapse = ', ')
data %>%
dplyr::filter(gene == target_gene) %>%
dplyr::pull(VAF)
data %>%
ggplot2::ggplot() +
CNAqc:::my_ggplot_theme() +
ggplot2::geom_histogram(binwidth = 0.01, aes(VAF, fill = class)) +
ggplot2::scale_fill_manual(values = colormap)
# Fit plot
colormap = ggsci::pal_jama("default")(7)[1:3]
names(colormap) = c("Clonal", "Clonal LOH", "Subclonal")
data %>%
ggplot2::ggplot() +
CNAqc:::my_ggplot_theme() +
ggplot2::geom_histogram(binwidth = 0.01, aes(VAF, fill = class)) +
ggplot2::scale_fill_manual(values = colormap)
data %>%
ggplot2::ggplot() +
CNAqc:::my_ggplot_theme() +
ggplot2::geom_histogram(binwidth = 0.01, aes(VAF, fill = class)) +
ggplot2::scale_fill_manual(values = colormap)+
# ggsci::scale_fill_jama() +
xlim(0, 1) +
ggplot2::labs(
title = sample_name,
subtitle = paste0("Purity: ", x$data$purity[1], " - ", target_gene, ": ", gene_status)
)
# Get class of mutations on target gene
gene_status = data %>%
dplyr::filter(gene == target_gene) %>%
dplyr::mutate(class = paste0(class, ' (', nv, '/', dp, ')')) %>%
dplyr::pull(class) %>%
paste(collapse = ', ')
gene_status
gene_vafs
# Get VAF of mutations on target gene
gene_vafs = data %>%
dplyr::filter(gene == target_gene) %>%
dplyr::pull(VAF)
fit_plot = x$data %>%
ggplot2::ggplot() +
CNAqc:::my_ggplot_theme() +
ggplot2::geom_histogram(binwidth = 0.01, aes(VAF, fill = class)) +
ggplot2::scale_fill_manual(values = colormap)+
# ggsci::scale_fill_jama() +
xlim(0, 1) +
ggplot2::labs(
title = sample_name,
subtitle = paste0("Purity: ", x$data$purity[1], " - ", target_gene, ": ", gene_status)
)
data %>%
ggplot2::ggplot() +
CNAqc:::my_ggplot_theme() +
ggplot2::geom_histogram(binwidth = 0.01, aes(VAF, fill = class)) +
ggplot2::scale_fill_manual(values = colormap)+
# ggsci::scale_fill_jama() +
xlim(0, 1) +
ggplot2::labs(
title = sample_name,
subtitle = paste0("Purity: ", x$data$purity[1], " - ", target_gene, ": ", gene_status)
)
data %>%
ggplot2::ggplot() +
CNAqc:::my_ggplot_theme() +
ggplot2::geom_histogram(binwidth = 0.01, aes(VAF, fill = class)) +
ggplot2::scale_fill_manual(values = colormap)+
# ggsci::scale_fill_jama() +
xlim(0, 1) +
ggplot2::labs(
title = sample_name,
subtitle = paste0("Purity: ", x$data$purity[1], " - ", target_gene, ": ", gene_status)
) +
ggplot2::guides(fill = guide_legend(''),
color = guide_legend('', override.aes = aes(fill = NA)))
data %>%
ggplot2::ggplot() +
CNAqc:::my_ggplot_theme() +
ggplot2::geom_histogram(binwidth = 0.01, aes(VAF, fill = class)) +
ggplot2::scale_fill_manual(values = colormap)+
# ggsci::scale_fill_jama() +
xlim(0, 1) +
ggplot2::labs(
title = sample_name,
subtitle = paste0("Purity: ", x$data$purity[1], " - ", target_gene, ": ", gene_status)
) +
ggplot2::guides(fill = guide_legend(''),
color = guide_legend('', override.aes = aes(fill = NA)))  +
ggplot2::geom_vline(aes(xintercept = gene_vafs,
color = "Target VAF"),
linetype = 6)
data$purity
x$data$purity
x$data$purity[sample_name]
x$data$purity[sample_name,]
x$data$purity
filter(x$data$purity, sample == sample_name)$purity
x$data %>%
ggplot2::ggplot() +
CNAqc:::my_ggplot_theme() +
ggplot2::geom_histogram(binwidth = 0.01, aes(VAF, fill = class)) +
ggplot2::scale_fill_manual(values = colormap)+
# ggsci::scale_fill_jama() +
xlim(0, 1) +
ggplot2::labs(
title = sample_name,
subtitle = paste0("Purity: ", filter(x$data$purity, sample == sample_name)$purity, " - ", target_gene, ": ", gene_status)
) +
ggplot2::guides(fill = guide_legend(''),
color = guide_legend('', override.aes = aes(fill = NA)))  +
ggplot2::geom_vline(aes(xintercept = gene_vafs,
color = "Target VAF"),
linetype = 6)
data %>%
ggplot2::ggplot() +
CNAqc:::my_ggplot_theme() +
ggplot2::geom_histogram(binwidth = 0.01, aes(VAF, fill = class)) +
ggplot2::scale_fill_manual(values = colormap)+
# ggsci::scale_fill_jama() +
xlim(0, 1) +
ggplot2::labs(
title = sample_name,
subtitle = paste0("Purity: ", filter(x$data$purity, sample == sample_name)$purity, " - ", target_gene, ": ", gene_status)
) +
ggplot2::guides(fill = guide_legend(''),
color = guide_legend('', override.aes = aes(fill = NA)))  +
ggplot2::geom_vline(aes(xintercept = gene_vafs,
color = "Target VAF"),
linetype = 6)
data %>%
ggplot2::ggplot() +
CNAqc:::my_ggplot_theme() +
ggplot2::geom_histogram(binwidth = 0.01, aes(VAF, fill = class)) +
ggplot2::scale_fill_manual(values = colormap)+
# ggsci::scale_fill_jama() +
xlim(0, 1) +
ggplot2::labs(
title = sample_name,
subtitle = paste0("Purity: ", filter(x$data$purity, sample == sample_name)$purity, " - ", target_gene, ": ", gene_status)
) +
ggplot2::guides(fill = guide_legend(''),
color = guide_legend('', override.aes = aes(fill = NA)))  +
ggplot2::geom_vline(aes(xintercept = gene_vafs,
color = "Target VAF"),
linetype = 6) +
ggplot2::geom_vline(
aes(xintercept = filter(x$data$purity, sample == sample_name)$purity,
color = "Purity"),
linetype = 'dashed',
size = .6
) +
ggplot2::geom_vline(aes(xintercept = x$data$purity[1] / 2,
color = "Clonal peak"),
linetype = 'dashed') +
ggplot2::scale_color_manual(
name = "",
values = c(
`Target VAF` = "indianred3",
`Purity` = "black",
`Clonal Peak` = "gray"
)
)
filter(x$data$purity, sample == sample_name)$purity / 2
fit_plot = data %>%
ggplot2::ggplot() +
CNAqc:::my_ggplot_theme() +
ggplot2::geom_histogram(binwidth = 0.01, aes(VAF, fill = class)) +
ggplot2::scale_fill_manual(values = colormap)+
# ggsci::scale_fill_jama() +
xlim(0, 1) +
ggplot2::labs(
title = sample_name,
subtitle = paste0("Purity: ", filter(x$data$purity, sample == sample_name)$purity, " - ", target_gene, ": ", gene_status)
) +
ggplot2::guides(fill = guide_legend(''),
color = guide_legend('', override.aes = aes(fill = NA)))  +
ggplot2::geom_vline(aes(xintercept = gene_vafs,
color = "Target VAF"),
linetype = 6) +
ggplot2::geom_vline(
aes(xintercept = filter(x$data$purity, sample == sample_name)$purity,
color = "Purity"),
linetype = 'dashed',
size = .6
) +
ggplot2::geom_vline(aes(xintercept = filter(x$data$purity, sample == sample_name)$purity / 2,
color = "Clonal peak"),
linetype = 'dashed') +
ggplot2::scale_color_manual(
name = "",
values = c(
`Target VAF` = "indianred3",
`Purity` = "black",
`Clonal Peak` = "gray"
)
)
fit_plot
devtools::load_all()
plot_fit(x)
target_gene <- readline(prompt="Target gene: ")
target_gene
target_gene <- readline(prompt="Target gene: ")
target_gene
plot_fit(x)
target_gene <- readline(prompt="Target gene: ")
sample_name <- readline(prompt="Sample: ")
model <- readline(prompt = "Model: ")
# Select sample
data = x$data$data %>%
cbind(x$classifier[[model]]$data) %>%
dplyr::filter(sample == sample_name)
data
# Get class of mutations on target gene
gene_status = data %>%
dplyr::filter(gene == target_gene) %>%
dplyr::mutate(class = paste0(class, ' (', nv, '/', dp, ')')) %>%
dplyr::pull(class) %>%
paste(collapse = ', ')
# Get VAF of mutations on target gene
gene_vafs = data %>%
dplyr::filter(gene == target_gene) %>%
dplyr::pull(VAF)
# Fit plot
colormap = ggsci::pal_jama("default")(7)[1:3]
names(colormap) = c("Clonal", "Clonal LOH", "Subclonal")
fit_plot = data %>%
ggplot2::ggplot() +
CNAqc:::my_ggplot_theme() +
ggplot2::geom_histogram(binwidth = 0.01, aes(VAF, fill = class)) +
ggplot2::scale_fill_manual(values = colormap)+
# ggsci::scale_fill_jama() +
xlim(0, 1) +
ggplot2::labs(
title = sample_name,
subtitle = paste0("Purity: ", filter(x$data$purity, sample == sample_name)$purity, " - ", target_gene, ": ", gene_status)
) +
ggplot2::guides(fill = guide_legend(''),
color = guide_legend('', override.aes = aes(fill = NA)))  +
ggplot2::geom_vline(aes(xintercept = gene_vafs,
color = "Target VAF"),
linetype = 6) +
ggplot2::geom_vline(
aes(xintercept = filter(x$data$purity, sample == sample_name)$purity,
color = "Purity"),
linetype = 'dashed',
size = .6
) +
ggplot2::geom_vline(aes(xintercept = filter(x$data$purity, sample == sample_name)$purity / 2,
color = "Clonal peak"),
linetype = 'dashed') +
ggplot2::scale_color_manual(
name = "",
values = c(
`Target VAF` = "indianred3",
`Purity` = "black",
`Clonal Peak` = "gray"
)
)
fit_plot
data %>%
ggplot2::ggplot() +
CNAqc:::my_ggplot_theme() +
ggplot2::geom_histogram(binwidth = 0.01, aes(VAF, fill = class)) +
ggplot2::scale_fill_manual(values = colormap)+
# ggsci::scale_fill_jama() +
xlim(0, 1)
data %>%
ggplot2::ggplot() +
CNAqc:::my_ggplot_theme() +
ggplot2::geom_histogram(binwidth = 0.01, aes(VAF, fill = class)) +
ggplot2::scale_fill_manual(values = colormap)+
# ggsci::scale_fill_jama() +
xlim(0, 1) +
ggplot2::labs(
title = sample_name,
subtitle = paste0("Purity: ", filter(x$data$purity, sample == sample_name)$purity, " - ", target_gene, ": ", gene_status)
) +
ggplot2::guides(fill = guide_legend(''),
color = guide_legend('', override.aes = aes(fill = NA)))  +
ggplot2::geom_vline(aes(xintercept = gene_vafs,
color = "Target VAF"),
linetype = 6) +
ggplot2::geom_vline(
aes(xintercept = filter(x$data$purity, sample == sample_name)$purity,
color = "Purity"),
linetype = 'dashed',
size = .6
)
data %>%
ggplot2::ggplot() +
CNAqc:::my_ggplot_theme() +
ggplot2::geom_histogram(binwidth = 0.01, aes(VAF, fill = class)) +
ggplot2::scale_fill_manual(values = colormap)+
# ggsci::scale_fill_jama() +
xlim(0, 1) +
ggplot2::labs(
title = sample_name,
subtitle = paste0("Purity: ", filter(x$data$purity, sample == sample_name)$purity, " - ", target_gene, ": ", gene_status)
)
source("~/Documents/GitHub/TAPACLOTH/R/plot_fit.R", echo=TRUE)
data %>%
ggplot2::ggplot() +
CNAqc:::my_ggplot_theme() +
ggplot2::geom_histogram(binwidth = 0.01, aes(VAF, fill = class)) +
ggplot2::scale_fill_manual(values = colormap)+
# ggsci::scale_fill_jama() +
xlim(0, 1) +
ggplot2::labs(
title = sample_name,
subtitle = paste0("Purity: ", filter(x$data$purity, sample == sample_name)$purity, " - ", target_gene, ": ", gene_status)
) +
ggplot2::guides(fill = guide_legend(''),
color = guide_legend('', override.aes = aes(fill = NA)))  +
ggplot2::geom_vline(aes(xintercept = gene_vafs,
color = "Target VAF"),
linetype = 6)
data %>%
ggplot2::ggplot() +
CNAqc:::my_ggplot_theme() +
ggplot2::geom_histogram(binwidth = 0.01, aes(VAF, fill = class)) +
ggplot2::scale_fill_manual(values = colormap)+
# ggsci::scale_fill_jama() +
xlim(0, 1) +
ggplot2::labs(
title = sample_name,
subtitle = paste0("Purity: ", filter(x$data$purity, sample == sample_name)$purity, " - ", target_gene, ": ", gene_status)
) +
ggplot2::guides(fill = guide_legend(''),
color = guide_legend('', override.aes = aes(fill = NA)))
data %>%
ggplot2::ggplot() +
CNAqc:::my_ggplot_theme() +
ggplot2::geom_histogram(binwidth = 0.01, aes(VAF, fill = class)) +
ggplot2::scale_fill_manual(values = colormap)+
# ggsci::scale_fill_jama() +
xlim(0, 1) +
ggplot2::labs(
title = sample_name,
subtitle = paste0("Purity: ", filter(x$data$purity, sample == sample_name)$purity, " - ", target_gene, ": ", gene_status)
) +
ggplot2::guides(fill = guide_legend(''),
color = guide_legend('', override.aes = aes(fill = NA)))  +
ggplot2::geom_vline(aes(xintercept = gene_vafs,
color = "Target VAF"),
linetype = 6)
gene_vafs
data %>%
dplyr::filter(gene == target_gene)
data
gene_vafs
devtools::load_all()
devtools::document
devtools::document(0)
devtools::document()
devtools::load_all()
devtools::install()
## set your user name and email:
usethis::use_git_config(user.name = "nicola-calonaci", user.email = "nicola.calonaci@gmail.com")
## set personal access token:
credentials::set_github_pat("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")
devtools::install()
x
print(x)
target_gene
sample_name
x$data$data
x$data$data %>%
cbind(x$classifier[[model]]$data) %>%
dplyr::filter(sample == sample_name)
devtools::load_all()
devtools::install()
devtools::document()
devtools::load_all()
x$data$data
x = read_tsv("~/Documents/GitHub/keap1_classifier/msk_met_tropism_keap1_samples_maf.tsv") %>%
rename(sample = "Tumor_Sample_Barcode", gene = "Hugo_Symbol", nr = t_ref_count, nv = t_alt_count) %>%
mutate(dp = nv+nr, purity = Purity/100) %>%
select(sample, gene, nv, dp, VAF, purity)
x = x %>% filter(sample == unique(x$sample)[1:2])
x = list(data = x, purity = x %>%
group_by(sample) %>%
summarise(purity = mean(purity)))
out = run_classifier(x = x, alpha_level = 0.01, model = "beta-binomial", rho = 0.01)
out = run_classifier(x = out, alpha_level = 0.01, model = "binomial", rho = 0.01)
out = run_classifier(x = out, alpha_level = 0.01, model = "terzile", rho = 0.01)
x = estimate_purity(x = out,model = "beta-binomial",eps = 0.01)
x = estimate_purity(x = x,model = "binomial",eps = 0.01)
library(TAPACLOTH)
x = read_tsv("~/Documents/GitHub/keap1_classifier/msk_met_tropism_keap1_samples_maf.tsv") %>%
rename(sample = "Tumor_Sample_Barcode", gene = "Hugo_Symbol", nr = t_ref_count, nv = t_alt_count) %>%
mutate(dp = nv+nr, purity = Purity/100) %>%
select(sample, gene, nv, dp, VAF, purity)
x = x %>% filter(sample == unique(x$sample)[1:2])
x = list(data = x, purity = x %>%
group_by(sample) %>%
summarise(purity = mean(purity)))
out = run_classifier(x = x, alpha_level = 0.01, model = "beta-binomial", rho = 0.01)
out = run_classifier(x = out, alpha_level = 0.01, model = "binomial", rho = 0.01)
out = run_classifier(x = out, alpha_level = 0.01, model = "terzile", rho = 0.01)
x = estimate_purity(x = out,model = "beta-binomial",eps = 0.01)
x = estimate_purity(x = x,model = "binomial",eps = 0.01)
