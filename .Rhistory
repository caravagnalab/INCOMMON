seq(80, 98, 2)
c(seq(5, 14, 1), seq(40,58,2), seq(80, 98, 2))
c(seq(5, 14, 1), seq(40,58,2), seq(80, 98, 2))*2
# Example error with purity = 0.4
data = list(data = dplyr::tibble(sample = "test",
gene = paste0("test gene ", 1:30),
nv =  c(seq(5, 14, 1), seq(40,58,2), seq(80, 98, 2))*2,
dp = 200,
VAF = seq(10, 155, 5)/200),
purity = tibble(sample = "test",
purity = 0.4)
)
# Example error with purity = 0.4
data = list(data = dplyr::tibble(sample = "test",
gene = paste0("test gene ", 1:30),
nv =  c(seq(5, 14, 1), seq(40,58,2), seq(80, 98, 2))*2,
dp = 200,
VAF = c(seq(5, 14, 1), seq(40,58,2), seq(80, 98, 2))*2/200
),
purity = tibble(sample = "test",
purity = 0.4)
)
data = estimate_purity(x = data,
model = "binomial",
eps = 0.01)
data$purity_estimate$binomial$plot_bmix
print(data)
data$purity_estimate$binomial$plot_bmix$test$data
data$purity_estimate$binomial$purity
data$purity_estimate$binomial$reliability
classified_wrong = run_classifier(
x = data,
alpha_level = 1e-3,
model = "Beta-Binomial",
rho = 0.01
)
print(classified_wrong$classifier$bbinomial)
classified_wrong$classifier$bbinomial
classified_wrong$classifier$`beta-binomial`
print(classified_wrong$classifier$`beta-binomial`)
classes(classified_wrong$classifier$`beta-binomial`)
classes(classified_wrong, model = "beta-binomial")
data = estimate_purity(x = data,
model = "Beta-Binomial",
eps = 0.01)
data$data$purity$purity
data$purity_estimate$bbinomial$purity$purity
data$purity_estimate$`beta-binomial`$purity$purity
data$data$purity$purity = data$purity_estimate$`beta-binomial`$purity$purity
print(data)
classified_right = run_classifier(
x = data,
alpha_level = 1e-3,
model = "Beta-Binomial",
rho = 0.01
)
classes(classified_right)
classified_right
classes(classified_right, model = "beta-binomial")
ggpubr::ggarrange(plotlist = list(
plot(
classified_wrong,
target_gene = "test gene 5",
sample_name = "test",
model = "beta-binomial"
),
plot(
classified_right,
target_gene = "test gene 5",
sample_name = "test",
model = "beta-binomial"
)
),
ncol = 2,
nrow = 1)
plot(
classified_wrong,
target_gene = "test gene 5",
sample_name = "test",
model = "beta-binomial"
)
x = classified_wrong
target_gene = "test gene 5"
sample_name = "test"
model = "beta-binomial"
inherits(x, "TAPACLOTH")
plot_fit(x, target_gene, sample_name, model)
x$data$data %>%
cbind(x$classifier[[ifelse((model %>% tolower())=="beta-binomial", "bbinomial", model %>% tolower())]]$data) %>%
dplyr::filter(sample == sample_name)
x$data$data
model
x$data$data %>%
cbind(x$classifier[[model]]$data) %>%
dplyr::filter(sample == sample_name)
devtools::load_all()
plot(
classified_wrong,
target_gene = "test gene 5",
sample_name = "test",
model = "beta-binomial"
)
ggpubr::ggarrange(plotlist = list(
plot(
classified_wrong,
target_gene = "test gene 5",
sample_name = "test",
model = "beta-binomial"
),
plot(
classified_right,
target_gene = "test gene 5",
sample_name = "test",
model = "beta-binomial"
)
),
ncol = 2,
nrow = 1)
ggpubr::ggarrange(plotlist = list(
plot(
classified_wrong,
target_gene = "test gene 15",
sample_name = "test",
model = "beta-binomial"
),
plot(
classified_right,
target_gene = "test gene 15",
sample_name = "test",
model = "beta-binomial"
)
),
ncol = 2,
nrow = 1)
devtools::load_all()
devtools::document()
devtools::load_all()
devtools::install()
.Last.error
devtools::install()
devtools::load_all()
devtools::load_all()
devtools::install()
devtools::install()
devtools::document()
devtools::document()
## set your user name and email:
usethis::use_git_config(user.name = "nicola-calonaci", user.email = "nicola.calonaci@gmail.com")
## set personal access token:
credentials::set_github_pat("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")
devtools::document()
devtools::check()
library(dplyr)
library(TAPACLOTH)
data = list(data = dplyr::tibble(sample = "test",
gene = c(paste("test gene ", 1:9), "target gene"),
nv = c(seq(10,90,10), 120),
dp = c(rep(100, 9), 200),
VAF = c(seq(10,90,10), 120)/c(rep(100, 9), 200)),
purity = tibble(sample = "test",
purity = 1)
)
data = run_classifier(
x = data,
alpha_level = 1e-3,
model = "Binomial"
)
data = run_classifier(
x = data,
alpha_level = 1e-3,
model = "Beta-Binomial",
rho = 0.01
)
print(data)
data = list(data = dplyr::tibble(sample = "test",
gene = "target gene",
nv = seq(10,100,4.6) %>% round(0),
dp = 100,
VAF = (seq(10,100,4.6) %>% round(0))/100),
purity = tibble(sample = "test",
purity = exp(log(10)*seq(-0.4, 0, length.out=20)) %>% round(1))
)
data = run_classifier(
x = data,
model = "terzile"
)
print(data)
#   ),
#   plot(
#     data,
#     target_gene = "target gene",
#     sample_name = "test 8",
#     model = "terzile"
#   )
# ),
# ncol = 1,
# nrow = 2, common.legend = T, legend = "bottom")
plot(
data,
target_gene = "target gene",
sample_name = "test",
model = "terzile"
)
library(dplyr)
library(TAPACLOTH)
print(classified_wrong)
classified_wrong = run_classifier(
x = data,
alpha_level = 1e-3,
model = "Beta-Binomial",
rho = 0.01
)
classified_wrong
plot(
classified_wrong,
target_gene = "test gene 15",
sample_name = "test",
model = "beta-binomial"
)
classified_wrong$classifier$`beta-binomial`
classified_wrong$data$data
data
# Example error with purity = 0.4
data = list(data = dplyr::tibble(sample = "test",
gene = paste0("test gene ", 1:30),
nv =  c(seq(5, 14, 1), seq(40,58,2), seq(80, 98, 2))*2,
dp = 200,
VAF = c(seq(5, 14, 1), seq(40,58,2), seq(80, 98, 2))*2/200
),
purity = tibble(sample = "test",
purity = 0.4)
)
data = estimate_purity(x = data,
model = "binomial",
eps = 0.01)
print(data)
classified_wrong = run_classifier(
x = data,
alpha_level = 1e-3,
model = "Beta-Binomial",
rho = 0.01
)
print(classified_wrong)
data = estimate_purity(x = data,
model = "Beta-Binomial",
eps = 0.01)
data$data$purity$purity = data$purity_estimate$`beta-binomial`$purity$purity
print(data)
print(classified_right)
classified_right = run_classifier(
x = data,
alpha_level = 1e-3,
model = "Beta-Binomial",
rho = 0.01
)
print(classified_right)
ggpubr::ggarrange(plotlist = list(
plot(
classified_wrong,
target_gene = "test gene 15",
sample_name = "test",
model = "beta-binomial"
),
plot(
classified_right,
target_gene = "test gene 15",
sample_name = "test",
model = "beta-binomial"
)
),
ncol = 2,
nrow = 1)
classified_wrong
plot(
classified_wrong,
target_gene = "test gene 15",
sample_name = "test",
model = "beta-binomial"
)
x = classified_wrong
target_gene = "test gene 15"
sample_name = "test"
model = "beta-binomial"
plot_fit(x, target_gene, sample_name, model)
devtools::load_all()
test_setup = function(coverage = 500,
purity = 1.0,
rho = 0.01,
alpha_level = 0.01,
model = 'binomial')
{
# Range of NV values
nvs = 1:coverage
# Compute Binomial or Beta-Binomial probability for NV values in range
log_p = NULL
p = purity/2
if ((model %>% tolower()) == 'binomial')
{
log_p = sapply(nvs, dbinom, size = coverage, prob = p)
}
else
{
log_p = sapply(
nvs,
VGAM::dbetabinom,
size = coverage,
prob = p,
rho = rho
)
}
# Compute P(X > NV) for each NV value
p_x = cumsum(log_p)
# Find l_a such that P(X <= l_a) < alpha
l_a = which(p_x < alpha_level, arr.ind = TRUE) %>% max
# Find r_a such that P(X > r_a) < 1 - alpha
r_a = which(p_x > 1 - alpha_level, arr.ind = TRUE) %>% min
# Adjustments for plots when test fails
if(is.infinite(l_a)) l_a = 1
if(is.infinite(r_a)) r_a = coverage
# Translate NV cutoffs in VAF space
vafs = nvs / coverage
l_v = vafs[l_a]
r_v = vafs[r_a]
inputs = data.frame(nv = nvs,
p = p_x,
VAF = vafs)
# cli::cli_alert_info("Computing p-values.")
return(list(
model = model,
density = inputs,
rho = rho,
coverage = coverage,
purity = purity,
alpha_level = alpha_level,
nv = c(l_a, r_a),
vaf = c(l_v, r_v)
))
}
plot_fit(x, target_gene, sample_name, model)
devtools::load_all()
devtools::load_all()
devtools::load_all()
devtools::document()
pkgdown::build_search()
pkgdown::build_site()
pkgdown::build_site()
devtools::document()
pkgdown::build_site()
devtools::document()
pkgdown::build_site()
devtools::document()
pkgdown::build_site()
devtools::document()
pkgdown::build_site()
devtools::document()
pkgdown::build_site()
devtools::document()
pkgdown::build_site()
data = list(data = dplyr::tibble(sample = "test", gene = paste0("test gene ", 1:30), nv =  c(seq(5, 14, 1), seq(40,58,2), seq(80, 98, 2))*2, dp = 200, VAF = c(seq(5, 14, 1), seq(40,58,2), seq(80, 98, 2))*2/200), purity = dplyr::tibble(sample = "test",  purity = 0.4))
data = estimate_purity(x = data, model = "binomial", eps = 0.01)
print(data)
devtools::document()
devtools::document()
pkgdown::build_site()
data = list(data = dplyr::tibble(sample = "test", gene = paste0("test gene ", 1:30), nv =  c(seq(5, 14, 1), seq(40,58,2), seq(80, 98, 2))*2, dp = 200, VAF = c(seq(5, 14, 1), seq(40,58,2), seq(80, 98, 2))*2/200), purity = dplyr::tibble(sample = "test",  purity = 0.4))
data = estimate_purity(x = data, model = "binomial", eps = 0.01)
print(data)
library(TAPACLOTH)
library(tidyverse)
x = read_tsv("~/Documents/GitHub/keap1_classifier/msk_met_tropism_keap1_samples_maf.tsv") %>%
rename(sample = "Tumor_Sample_Barcode", gene = "Hugo_Symbol", nr = t_ref_count, nv = t_alt_count) %>%
mutate(dp = nv+nr, purity = Purity/100) %>%
select(sample, gene, nv, dp, VAF, purity)
x = x %>% filter(sample == unique(x$sample)[1:2])
x = list(data = x %>% select(-purity),
purity = x %>%
group_by(sample) %>%
summarise(purity = mean(purity)))
out = run_classifier(x = x, alpha_level = 0.01, model = "beta-binomial", rho = 0.01)
out
out$classifier$`beta-binomial`
classes(out)
TAPACLOTH:::classes(out)
TAPACLOTH:::classes(out)
devtools::install_github("caravagnalab/TAPACLOTH")
## set your user name and email:
usethis::use_git_config(user.name = "nicola-calonaci", user.email = "nicola.calonaci@gmail.com")
## set personal access token:
credentials::set_github_pat("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")
devtools::install_github("caravagnalab/TAPACLOTH")
library(TAPACLOTH)
x = read_tsv("~/Documents/GitHub/keap1_classifier/msk_met_tropism_keap1_samples_maf.tsv") %>%
rename(sample = "Tumor_Sample_Barcode", gene = "Hugo_Symbol", nr = t_ref_count, nv = t_alt_count) %>%
mutate(dp = nv+nr, purity = Purity/100) %>%
select(sample, gene, nv, dp, VAF, purity)
x = x %>% filter(sample == unique(x$sample)[1:2])
x = list(data = x %>% select(-purity),
purity = x %>%
group_by(sample) %>%
summarise(purity = mean(purity)))
out = run_classifier(x = x, alpha_level = 0.01, model = "beta-binomial", rho = 0.01)
TAPACLOTH:::classes(out, "beta-binomial")
TAPACLOTH:::classes(out, "beta-binomial") %>% filter(nv == 27)
library(tidyverse)
alpha = c(seq(1,9,0.5) %o% 10^(-5:-2))
rho =c(seq(1,9,0.5) %o% 10^(-3:-1))
grid = expand.grid(alpha,rho)
names(grid) = c("alpha", "rho")
mcc = function(tp,fp,tn,fn){
out = (tp*tn-fp*fn)/sqrt((tp+fp)*(tp+fn)*(tn+fp)*(tn+fn))
return(out)
}
library(TAPACLOTH)
x = readxl::read_xlsx("~/Documents/GitHub/keap1_classifier/nicola/db_mettropism_all_sample_keap1_class.xlsx")
x = x %>% select(Sample.ID, `KEAP1 VAF/PURITY`) %>%
rename(sample = Sample.ID)
data = readr::read_tsv("~/Documents/GitHub/keap1_classifier/nicola/msk_met_tropism_keap1_samples_maf.tsv") %>%
rename(sample = Tumor_Sample_Barcode)
data = readr::read_tsv("~/Documents/GitHub/keap1_classifier/msk_met_tropism_keap1_samples_maf.tsv") %>%
rename(sample = Tumor_Sample_Barcode)
data = data %>% full_join(x, by = "sample") %>%
filter(!is.na(`KEAP1 VAF/PURITY`)) %>%
filter(Hugo_Symbol == "KEAP1") %>%
mutate(nv = t_alt_count, dp = t_alt_count+t_ref_count, purity = Purity/100) %>%
rename(gene = Hugo_Symbol) %>%
select(sample, gene, nv, dp, VAF, purity, `KEAP1 VAF/PURITY`)
input = list(data = data %>% select(-purity),
purity = data %>%
group_by(sample) %>%
summarise(purity = mean(purity))
)
input$data
input$purity
data = input
data
x = 1
alpha_level = grid[x,]$alpha
model = "Beta-Binomial"
rho = grid[x,]$rho
out = TAPACLOTH::run_classifier(data,
alpha_level = grid[x,]$alpha,
model = "Beta-Binomial",
rho = grid[x,]$rho)
out
TAPACLOTH:::classes(out, model = "beta-binomial")
tp = TAPACLOTH:::classes(out, model = "beta-binomial") %>%
filter(`KEAP1 VAF/PURITY` == "KEAP1 C-LOH" & class == "Clonal LOH") %>%
nrow()
tn = TAPACLOTH:::classes(out, model = "beta-binomial") %>%
filter(`KEAP1 VAF/PURITY` == "KEAP1 CD-SC" & class %in% c("Clonal","Subclonal")) %>%
nrow()
fp = TAPACLOTH:::classes(out, model = "beta-binomial") %>%
filter(`KEAP1 VAF/PURITY` == "KEAP1 CD-SC" & class == "Clonal LOH") %>%
nrow()
fn = TAPACLOTH:::classes(out, model = "beta-binomial") %>%
filter(`KEAP1 VAF/PURITY` == "KEAP1 C-LOH" & class%in% c("Clonal","Subclonal")) %>%
nrow()
out = list()
out$alpha = grid[x,]$alpha
out$rho = grid[x,]$rho
out$tp = tp
out$fp = fp
out$tn = tn
out$fn = fn
out = out %>%
as_tibble()
out = out %>%
mutate(mcc = mcc(as.double(tp),as.double(fp),as.double(tn),as.double(fn)))
out
res = easypar::run(FUN = grid_search,
PARAMS = lapply(1:2, list),
export = c("data", "grid", "mcc"),
packages = c("TAPACLOTH"),
filter_errors = FALSE,
progress_bar = TRUE)
grid_search = function(x){
out = TAPACLOTH::run_classifier(data,
alpha_level = grid[x,]$alpha,
model = "Beta-Binomial",
rho = grid[x,]$rho)
tp = TAPACLOTH:::classes(out, model = "beta-binomial") %>%
filter(`KEAP1 VAF/PURITY` == "KEAP1 C-LOH" & class == "Clonal LOH") %>%
nrow()
tn = TAPACLOTH:::classes(out, model = "beta-binomial") %>%
filter(`KEAP1 VAF/PURITY` == "KEAP1 CD-SC" & class %in% c("Clonal","Subclonal")) %>%
nrow()
fp = TAPACLOTH:::classes(out, model = "beta-binomial") %>%
filter(`KEAP1 VAF/PURITY` == "KEAP1 CD-SC" & class == "Clonal LOH") %>%
nrow()
fn = TAPACLOTH:::classes(out, model = "beta-binomial") %>%
filter(`KEAP1 VAF/PURITY` == "KEAP1 C-LOH" & class%in% c("Clonal","Subclonal")) %>%
nrow()
out = list()
out$alpha = grid[x,]$alpha
out$rho = grid[x,]$rho
out$tp = tp
out$fp = fp
out$tn = tn
out$fn = fn
out = out %>%
as_tibble()
out = out %>%
mutate(mcc = mcc(as.double(tp),as.double(fp),as.double(tn),as.double(fn)))
return(out)
}
res = easypar::run(FUN = grid_search,
PARAMS = lapply(1:2, list),
export = c("data", "grid", "mcc"),
packages = c("TAPACLOTH"),
filter_errors = FALSE,
progress_bar = TRUE)
res %>% do.call(rbind, .)
