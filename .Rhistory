}
PARAMS = data.frame(x = 1:4,
y = 1:4,
z = 1:4,
u = 1:4)
setwd("~/cds/easypar/output/")
easypar::run_PBSpro(FUN, PARAMS, modules = 'R')
devtools::load_all("~/Documents/GitHub/easypar/")
PARAMS = data.frame(x = 1:4,
y = 1:4,
z = 1:4,
u = 1:4)
easypar::run_PBSpro(FUN, PARAMS, modules = 'R')
devtools::load_all("~/Documents/GitHub/easypar/")
easypar::run_PBSpro(FUN, PARAMS, modules = 'R')
devtools::load_all("~/Documents/GitHub/easypar/")
devtools::load_all("~/Documents/GitHub/easypar/")
easypar::run_PBSpro(FUN, PARAMS, modules = 'R')
devtools::load_all("~/Documents/GitHub/easypar/")
FUN = function(x, y, z, u){
cat(paste(x,y,z,u,sep = "_"))
cat("\n")
}
easypar::run_PBSpro(FUN, PARAMS, modules = 'R')
devtools::load_all("~/Documents/GitHub/easypar/")
easypar::run_PBSpro(FUN, PARAMS, modules = 'R')
devtools::load_all("~/Documents/GitHub/easypar/")
easypar::run_PBSpro(FUN, PARAMS, modules = 'R')
setwd("~/Documents/GitHub/TAPACLOTH/")
usethis::use_readme_rmd()
build_readme()
devtools::build_readme()
## set your user name and email:
usethis::use_git_config(user.name = "nicola-calonaci", user.email = "nicola.calonaci@gmail.com")
## set personal access token:
credentials::set_github_pat("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")
devtools::build_readme()
load_all()
devtools::load_all()
document()
;ibrary(devtools)
library(devtools)
document()
build_readme()
usethis::use_github_action_check_standard()
build_readme()
document()
check()
document()
build_readme()
build_readme()
usethis::use_vignette("Classify and plot results")
usethis::use_vignette("classify-and-plot")
library(TAPACLOTH)
x = dplyr::tibble(sample = c"test",
dplyr::tibble(sample = c("test", "test", "test"),
gene = c("test gene 1", "test gene 2", "test gene 3"),
nv = c(10, 50, 90),
dp = c(100, 100, 100),
vaf = c(0.1, 0.5, 0.9),
purity = c(1,1,1)
)
dplyr::tibble(sample = c("test", "test", "test"),
gene = c("test gene 1", "test gene 2", "test gene 3"),
nv = c(10, 50, 90),
dp = c(100, 100, 100),
vaf = c(0.1, 0.5, 0.9),
purity = 1
)
load_all()
x = dplyr::tibble(sample = "test",
gene = c("test gene 1", "test gene 2", "test gene 3"),
nv = c(10, 50, 90),
dp = c(100, 100, 100),
vaf = c(0.1, 0.5, 0.9),
purity = 1
)
x
analyse_sample(
data = x,
sample_name = "test",
alpha_level = 1e-3,
model = "BetaBinomial",
rho = 0.01
)
install()
library(TAPACLOTH)
x = dplyr::tibble(sample = "test",
gene = c("test gene 1", "test gene 2", "test gene 3"),
nv = c(10, 50, 90),
dp = c(100, 100, 100),
vaf = c(0.1, 0.5, 0.9),
purity = 1
)
analyse_sample(
data = x,
sample_name = "test",
alpha_level = 1e-3,
model = "BetaBinomial",
rho = 0.01
)
data = dplyr::tibble(sample = "test",
gene = c("test gene 1", "test gene 2", "test gene 3"),
nv = c(10, 50, 90),
dp = c(100, 100, 100),
vaf = c(0.1, 0.5, 0.9),
purity = 1
)
classified_data = analyse_sample(
data = x,
sample_name = "test",
alpha_level = 1e-3,
model = "BetaBinomial",
rho = 0.01
)
classified_data = analyse_sample(
data = data,
sample_name = "test",
alpha_level = 1e-3,
model = "BetaBinomial",
rho = 0.01
)
classified_data
classified_data$fit
plot_tapacloth(fit = classified_data$fit, target_gene = "test gene 2")
classified_data$fit
install()
plot_tapacloth(fit = classified_data$fit, target_gene = "test gene 2")
classified_data$fit
fit = classified_data$fit
target_gene = "test gene 2"
fit_plot = plot_fit(fit = fit$fit, target_gene = target_gene)
library(TAPACLOTH)
fit_plot = plot_fit(fit = fit$fit, target_gene = target_gene)
plot_tapacloth(fit = classified_data$fit, target_gene = "test gene 2")
load_all()
fit_plot = plot_fit(fit = fit$fit, target_gene = target_gene)
fit
fit
target_gene
# Get class of mutations on target gene
gene_status = fit %>%
filter(gene == target_gene) %>%
mutate(class = paste0(class, ' (', nv, '/', dp, ')')) %>%
pull(class) %>%
paste(collapse = ', ')
gene_status
install()
library(TAPACLOTH)
data = dplyr::tibble(sample = "test",
gene = c("test gene 1", "test gene 2", "test gene 3"),
nv = c(10, 50, 90),
dp = c(100, 100, 100),
vaf = c(0.1, 0.5, 0.9),
purity = 1
)
classified_data = analyse_sample(
data = data,
sample_name = "test",
alpha_level = 1e-3,
model = "BetaBinomial",
rho = 0.01
)
classified_data$fit
plot_tapacloth(fit = classified_data$fit, target_gene = "test gene 2")
load_all()
fit = classified_data$fit
target_gene = "test gene 2"
fit_plot = plot_fit(fit = fit$fit, target_gene = target_gene)
# Get class of mutations on target gene
gene_status = fit %>%
dplyr::filter(gene == target_gene) %>%
dplyr::mutate(class = paste0(class, ' (', nv, '/', dp, ')')) %>%
dplyr::pull(class) %>%
paste(collapse = ', ')
# Get VAF of mutations on target gene
gene_vafs = fit %>%
dplyr::filter(gene == target_gene) %>%
dplyr::pull(VAF)
fit
data = dplyr::tibble(sample = "test",
gene = c("test gene 1", "test gene 2", "test gene 3"),
nv = c(10, 50, 90),
dp = c(100, 100, 100),
VAF = c(0.1, 0.5, 0.9),
purity = 1
)
data
classified_data = analyse_sample(
data = data,
sample_name = "test",
alpha_level = 1e-3,
model = "BetaBinomial",
rho = 0.01
)
classified_data
classified_data$fit
plot_tapacloth(fit = classified_data$fit, target_gene = "test gene 2")
fit = classified_data$fit
target_gene = "test gene 2"
fit_plot = plot_fit(fit = fit$fit, target_gene = target_gene)
plot_tapacloth(fit = classified_data, target_gene = "test gene 2")
classified_data
classified_data = analyse_sample(
data = data,
sample_name = "test",
alpha_level = 1e-3,
model = "Beta-Binomial",
rho = 0.01
)
classified_data$fit
plot_tapacloth(fit = classified_data, target_gene = "test gene 2")
12/20
data = dplyr::tibble(sample = "test",
gene = c("test gene 1", "test gene 2", "test gene 3", "target gene"),
nv = c(10, 50, 90, 120),
dp = c(100, 100, 100, 200),
VAF = c(0.1, 0.5, 0.9, 0.6),
purity = 1
)
classified_data = analyse_sample(
data = data,
sample_name = "test",
alpha_level = 1e-3,
model = "Beta-Binomial",
rho = 0.01
)
classified_data$fit
plot_tapacloth(fit = classified_data, target_gene = "target gene")
devtools::build_vignettes()
## set your user name and email:
usethis::use_git_config(user.name = "nicola-calonaci", user.email = "nicola.calonaci@gmail.com")
## set personal access token:
credentials::set_github_pat("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")
devtools::build_vignettes()
## set your user name and email:
usethis::use_git_config(user.name = "nicola-calonaci", user.email = "nicola.calonaci@gmail.com")
## set personal access token:
credentials::set_github_pat("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")
devtools::build_vignettes()
## set your user name and email:
usethis::use_git_config(user.name = "nicola-calonaci", user.email = "nicola.calonaci@gmail.com")
## set personal access token:
credentials::set_github_pat("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")
devtools::build_vignettes()
pkgdown::build_site()
usethis::use_pkgdown_github_pages()
usethis::use_pkgdown_github_pages()
pkgdown::build_site()
usethis::use_pkgdown_github_pages()
usethis::use_github_action("pkgdown")
devtools::build_readme()
devtools::build_rmd()
usethis::use_readme_rmd()
devtools::build_readme()
devtools::build_readme()
pkgdown::build_site()
pkgdown::build_site()
usethis::use_vignette("Purity estimates")
usethis::use_vignette("purity-estimates")
library(TAPACLOTH)
paste0("test gene", 1:10)
paste0("test gene ", 1:10)
dbinom(10:100, size = 100, prob = 1/2)
data = dplyr::tibble(sample = "test",
gene = paste0("test gene ", 1:10),
nv = c(10, 12, 20, 50, 45, 54, 61, 75, 80, 90),
dp = 100,
VAF = c(10, 12, 20, 50, 45, 54, 61, 75, 80, 90)/100,
purity = 1
data
data
data = dplyr::tibble(sample = "test",
gene = paste0("test gene ", 1:10),
nv = c(10, 12, 20, 50, 45, 54, 61, 75, 80, 90),
dp = 100,
VAF = c(10, 12, 20, 50, 45, 54, 61, 75, 80, 90)/100,
purity = 1
)
data
estimate_purity(data = data,
sample_name = "test",
model = "Beta-Binomial",
purity = data$purity[1],
eps = 0.01)
install()
devtools::install()
estimate_purity(data = data,
sample_name = "test",
model = "Beta-Binomial",
purity = data$purity[1],
eps = 0.01)
20*5
5*45
54*5
75*5
5*80
5*90
data = dplyr::tibble(sample = "test",
gene = paste0("test gene ", 1:10),
nv = c(50, 60, 100, 250, 225, 270, 35, 375, 400, 450),
dp = 500,
VAF = c(10, 12, 20, 50, 45, 54, 61, 75, 80, 90)/100,
purity = 1
)
data
data = dplyr::tibble(sample = "test",
gene = paste0("test gene ", 1:10),
nv = c(50, 60, 100, 250, 225, 270, 35, 375, 400, 450),
dp = 500,
VAF = c(10, 12, 20, 50, 45, 54, 61, 75, 80, 90)/100,
purity = 0.4
)
data
estimate_purity(data = data,
sample_name = "test",
model = "Beta-Binomial",
purity = data$purity[1],
eps = 0.01)
estimate_purity(data = data,
sample_name = "test",
model = "Binomial",
purity = data$purity[1],
eps = 0.01)
purity_bmix
purity_bmix = estimate_purity(data = data,
sample_name = "test",
model = "Binomial",
purity = data$purity[1],
eps = 0.01)
data$purity = purity_bmix$purity
data
classified_data = analyse_sample(
data = data,
sample_name = "test",
alpha_level = 1e-3,
model = "Beta-Binomial",
rho = 0.01
)
classified_data
classified_data$fit
classified_data$fit %>% filter(gene=="test gene 10")
library(TAPACLOTH)
classified_data = analyse_sample(
data = data,
sample_name = "test",
alpha_level = 1e-3,
model = "Beta-Binomial",
rho = 0.01
)
classified_data$fit %>% filter(gene=="test gene 10")
classified_data$fit
pkgdown::build_site()
1.0/0.1
0.1/10
1.0/0.01
purity_bmix
sqrt((0.1-0.9)**2)
purity_bmix$fit
purity_bmix$fit$BIC
purity_bmix$fit$score
purity_bmix$fit$B.params
NLL = .Machine$integer.max
NLL
stats4::logLik(object = purity_bmix$fit)
sqrt((1-0.1)**2)
sqrt((1-0.1)**2)/0.1
(sqrt((0.1-1)**2)/1)*100
1-(sqrt((0.1-1)**2)/1)
install()
devtools::install()
library(TAPACLOTH)
data = dplyr::tibble(sample = "test",
gene = paste0("test gene ", 1:10),
nv = c(50, 60, 100, 250, 225, 270, 35, 375, 400, 450),
dp = 500,
VAF = c(10, 12, 20, 50, 45, 54, 61, 75, 80, 90)/100,
purity = 0.4
)
data
purity_bmix = estimate_purity(data = data,
sample_name = "test",
model = "Binomial",
purity = data$purity[1],
eps = 0.01)
purity_bmix
purity_bmix
purity_bmix$data
load_all()
devtools::load_all()
purity_bmix = estimate_purity(data = data,
sample_name = "test",
model = "Binomial",
purity = data$purity[1],
eps = 0.01)
devtools::load_all()
purity_bmix = estimate_purity(data = data,
sample_name = "test",
model = "Binomial",
purity = data$purity[1],
eps = 0.01)
purity_bmix$data
0.4+0.6*0.4
0.4+0.6*0.993
0.4+0.597*0.993
0.4/0.597
0.4+0.4/0.597
sqrt((0.5-0.4)**2)/0.4
devtools::load_all()
purity_bmix = estimate_purity(data = data,
sample_name = "test",
model = "Binomial",
purity = data$purity[1],
eps = 0.01)
purity_bmix$data
0.4+0.6*0.4
0.4+(0.6*0.4)
devtools::load_all()
purity_bmix = estimate_purity(data = data,
sample_name = "test",
model = "Binomial",
purity = data$purity[1],
eps = 0.01)
purity_bmix
purity_bmix$data
data = dplyr::tibble(sample = "test",
gene = paste0("test gene ", 1:10),
nv = c(50, 60, 100, 250, 225, 270, 35, 375, 400, 450),
dp = 500,
VAF = c(10, 12, 20, 50, 45, 54, 61, 75, 80, 90)/100,
purity = 0.4
)
purity_bmix = estimate_purity(data = data,
sample_name = "test",
model = "Binomial",
purity = data$purity[1],
eps = 0.01)
purity_bmix$data
devtools::load_all()
purity_bmix = estimate_purity(data = data,
sample_name = "test",
model = "Binomial",
purity = data$purity[1],
eps = 0.01)
purity_bmix$data
0.993*0.00667
devtools::load_all()
devtools::load_all()
purity_bmix = estimate_purity(data = data,
sample_name = "test",
model = "Binomial",
purity = data$purity[1],
eps = 0.01)
purity_bmix$data
devtools::load_all()
purity_bmix = estimate_purity(data = data,
sample_name = "test",
model = "Binomial",
purity = data$purity[1],
eps = 0.01)
purity_bmix$data
devtools::load_all()
purity_bmix = estimate_purity(data = data,
sample_name = "test",
model = "Binomial",
purity = data$purity[1],
eps = 0.01)
purity_bmix$data
0.4+0.597
0.4+0.597*0.993
0.4/(1-0.597)
purity_bmix
purity_bmix$data
dplyr::mutate(purity_bmix$data, purity = purity_bmix)
data = dplyr::mutate(purity_bmix$data, purity = purity_bmix)
data
classified_data = analyse_sample(
data = data,
sample_name = "test",
alpha_level = 1e-3,
model = "Beta-Binomial",
rho = 0.01
)
classified_data$fit
library(TAPACLOTH)
data = dplyr::tibble(sample = "test",
gene = paste0("test gene ", 1:10),
nv = c(50, 60, 100, 250, 225, 270, 35, 375, 400, 450),
dp = 500,
VAF = c(10, 12, 20, 50, 45, 54, 61, 75, 80, 90)/100,
purity = 0.4
)
purity_bmix = estimate_purity(data = data,
sample_name = "test",
model = "Binomial",
purity = data$purity[1],
eps = 0.01)
data = dplyr::rename(purity_bmix$data,
input_purity = purity,
purity = purity_bmix)
data
classified_data = analyse_sample(
data = data,
sample_name = "test",
alpha_level = 1e-3,
model = "Beta-Binomial",
rho = 0.01
)
classified_data$fit
devtools::load_all()
devtools::install()
pkgdown::build_site()
