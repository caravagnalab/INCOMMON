# pval = T,
# pval.size = 3,
risk.table.y.text = FALSE,
# palette = palette
)
p1 = survminer::ggsurvplot(
fit = km_fit,
censor = F,
conf.int = F,
data = data,
ylab = "Overall Survival",
xlab = "Time (months)",
fontsize = 4,
risk.table = TRUE,
risk.table.col = "strata",
risk.table.fontsize = 3,
ggtheme = my_ggplot_theme(cex = .8),
tables.theme = my_ggplot_theme(cex = .8),
# surv.median.line = 'hv',
# pval = T,
# pval.size = 3,
risk.table.y.text = FALSE,
# palette = palette
)
survminer::ggsurvplot(
fit = km_fit,
censor = F,
conf.int = F,
data = data,
ylab = "Overall Survival",
xlab = "Time (months)",
fontsize = 4,
risk.table = TRUE,
risk.table.col = "strata",
risk.table.fontsize = 3,
ggtheme = my_ggplot_theme(cex = .8),
tables.theme = my_ggplot_theme(cex = .8),
# surv.median.line = 'hv',
# pval = T,
# pval.size = 3,
risk.table.y.text = FALSE,
# palette = palette
)
cox_fit = survival::coxph(
formula = cox_formula,
data = data
)
c = summary(cox_fit)$concordance
out = tibble(
target_gene,
tumor_type,
method = 'adjusted VAF',
model_type = 'univariate',
c = c['C'] %>% unname()
)
# Multivariate
cox_formula = 'survival::Surv(OS_MONTHS,OS_STATUS) ~ class + age + TMB + type + FGA'
if(!((grepl('BRCA', tumor_type) | grepl('UCEC', tumor_type) |  grepl('UCS', tumor_type) | grepl('PRAD', tumor_type) | grepl('OV', tumor_type)))) cox_formula = paste0(cox_formula, ' + sex')
cox_formula = cox_formula %>% stats::as.formula()
cox_fit = survival::coxph(
formula = cox_formula,
data = data
)
c = summary(cox_fit)$concordance
out = out %>% rbind(
tibble(
target_gene,
tumor_type,
method = 'adjusted VAF',
model_type = 'multivariate',
c = c['C'] %>% unname()
)
)
# Gene dosage
data = data %>%
dplyr::mutate(class = dplyr::case_when(
group == paste0('Mutant ', target_gene) & target_gene_role == 'TSG' & FAM <= .25 ~ 'Low Dosage',
group == paste0('Mutant ', target_gene) & target_gene_role == 'oncogene' & FAM <= .33 ~ 'Low Dosage',
group == paste0('Mutant ', target_gene) & target_gene_role == 'TSG' & FAM > .25 & FAM < .75 ~ 'Balanced Dosage',
group == paste0('Mutant ', target_gene) & target_gene_role == 'oncogene' & FAM > .33 & FAM < .66 ~ 'Balanced Dosage',
group == paste0('Mutant ', target_gene) & target_gene_role == 'TSG' & FAM >= .75 ~ 'High Dosage',
group == paste0('Mutant ', target_gene) & target_gene_role == 'oncogene' & FAM >= .66 ~ 'High Dosage',
TRUE ~ 'WT'
))
data$class = factor(data$class)
data$class = relevel(data$class, ref = 'WT')
cox_formula = 'survival::Surv(OS_MONTHS,OS_STATUS) ~ class'
cox_formula = cox_formula %>% stats::as.formula()
km_fit = survival::survfit(
formula = cox_formula,
data = data %>% as.data.frame())
km_fit$call$formula = cox_formula
survminer::ggsurvplot(
fit = km_fit,
censor = F,
conf.int = F,
data = data,
ylab = "Overall Survival",
xlab = "Time (months)",
fontsize = 4,
risk.table = TRUE,
risk.table.col = "strata",
risk.table.fontsize = 3,
ggtheme = my_ggplot_theme(cex = .8),
tables.theme = my_ggplot_theme(cex = .8),
# surv.median.line = 'hv',
# pval = T,
# pval.size = 3,
risk.table.y.text = FALSE,
# palette = palette
)
p2 = survminer::ggsurvplot(
fit = km_fit,
censor = F,
conf.int = F,
data = data,
ylab = "Overall Survival",
xlab = "Time (months)",
fontsize = 4,
risk.table = TRUE,
risk.table.col = "strata",
risk.table.fontsize = 3,
ggtheme = my_ggplot_theme(cex = .8),
tables.theme = my_ggplot_theme(cex = .8),
# surv.median.line = 'hv',
# pval = T,
# pval.size = 3,
risk.table.y.text = FALSE,
# palette = palette
)
p1+p2
library(patchwork)
p1+p2
wrap_plots(p1$plot,p2$plot)
wrap_plots(p1$plot,p2$plot, p1$table, p2$table, design = 'AB\nAB\nAB\nCD')
plot_f
plot_f = res %>%
filter(!is.na(gene_role)) %>%
mutate(cuts = round(cuts, 2)) %>%
group_by(gene_role, cuts) %>%
reframe(sd = sd(stats), stats = mean(stats)) %>%
unique() %>%
mutate(gene_role = factor(gene_role, levels = c('TSG', 'oncogene'))) %>%
ggplot(aes(x = cuts, y = stats))+
geom_point()+
# geom_vline(data = tibble(gene_role = factor(c('TSG', 'oncogene')), low = c(1.35,1.32)), aes(xintercept = low), linetype = 'longdash')+
# geom_vline(data = tibble(gene_role = factor(c('TSG', 'oncogene')), high = c(1.25,2.66)), aes(xintercept = high), linetype = 'longdash')+
geom_smooth()+
facet_wrap(~gene_role)+
CNAqc:::my_ggplot_theme()+
labs(y = 'Log-Rank Statistics (Mean)', x = 'Adjusted VAF cut-off')
library(tidyverse)
library(survminer)
library(survival)
x = readRDS('./results/msk_met_classified_expectation.rds')
prepare_data = function(x){
x = x %>% dplyr::rename(
type = SAMPLE_TYPE,
sex = SEX,
TMB = TMB_NONSYNONYMOUS,
age = AGE_AT_SEQUENCING)
x
}
x = prepare_data(x)
x = x %>% mutate(OS_STATUS=ifelse(grepl('1', OS_STATUS), 1, 0))
relevant = x %>%
group_by(gene, tumor_type) %>%
reframe(N = length(unique(sample))) %>%
filter(N >= 100) %>%
mutate(id = paste(gene, tumor_type, sep = ':'))
x = x %>%
mutate(adjusted_VAF = VAF/purity)
cutoffs_vaf_purity = lapply(1:nrow(relevant), function(i){
print(i)
gene = relevant[i,]$gene
tumor_type = relevant[i,]$tumor_type
data = x %>%
mutate(
`FGA >= 0.2` = (FGA >= 0.2),
`TMB >= 10` = (TMB >= 0.2),
typeMetastasis = (type == 'Metastasis'),
sexMale = (sex == 'Male')) %>%
filter(gene == !!gene, tumor_type == !!tumor_type)
low = data %>% filter(adjusted_VAF < median(x$adjusted_VAF))
high = data %>% filter(adjusted_VAF > median(x$adjusted_VAF))
#
what_low = surv_cutpoint(
minprop = .2,
data = low,
time = "OS_MONTHS",
event = "OS_STATUS",
variables =  c('adjusted_VAF', 'sexMale', 'age', 'TMB >= 10', 'FGA >= 0.2', 'typeMetastasis')
)
what_high = surv_cutpoint(
minprop = .2,
data = high,
time = "OS_MONTHS",
event = "OS_STATUS",
variables =  c('adjusted_VAF', 'sexMale', 'age', 'TMB >= 10', 'FGA >= 0.2', 'typeMetastasis')
)
tibble(
gene,
tumor_type,
what_high = list(what_high),
what_low = list(what_low)
)
}) %>% do.call(rbind, .)
cutoffs_vaf_purity[1,]$what_high
cutoffs_vaf_purity[1,]$what_low
res = lapply(1:nrow(cutoffs_vaf_purity), function(i){
p_low = tryCatch({plot(cutoffs_vaf_purity[i,]$what_low[[1]])}, error = function(e){return(NULL)})
p_high = tryCatch({plot(cutoffs_vaf_purity[i,]$what_high[[1]])}, error = function(e){return(NULL)})
if(!is.null(p_low)){
out_low = p_low$adjusted_VAF$maxstat$data %>% cbind(cutoffs_vaf_purity[i,] %>% select(gene, tumor_type)) %>% as_tibble() %>% mutate(which = 'low')
} else {
out_low = tibble(NULL)
}
if(!is.null(p_high)){
out_high = p_high$adjusted_VAF$maxstat$data %>% cbind(cutoffs_vaf_purity[i,] %>% select(gene, tumor_type)) %>% as_tibble() %>% mutate(which = 'high')
} else {
out_high = tibble(NULL)
}
rbind(out_low, out_high)
})
res = res %>% do.call(rbind, .) %>% left_join(INCOMMON::cancer_gene_census)
res %>%
filter(!is.na(gene_role)) %>%
mutate(cuts = round(cuts, 2)) %>%
group_by(gene_role, cuts) %>%
reframe(stats = mean(stats)) %>%
unique() %>%
group_by(gene_role) %>%
arrange(desc(stats), .by_group = T) %>%
slice_head(n=1)
plot_f = res %>%
filter(!is.na(gene_role)) %>%
mutate(cuts = round(cuts, 2)) %>%
group_by(gene_role, cuts) %>%
reframe(sd = sd(stats), stats = mean(stats)) %>%
unique() %>%
mutate(gene_role = factor(gene_role, levels = c('TSG', 'oncogene'))) %>%
ggplot(aes(x = cuts, y = stats))+
geom_point()+
# geom_vline(data = tibble(gene_role = factor(c('TSG', 'oncogene')), low = c(1.35,1.32)), aes(xintercept = low), linetype = 'longdash')+
# geom_vline(data = tibble(gene_role = factor(c('TSG', 'oncogene')), high = c(1.25,2.66)), aes(xintercept = high), linetype = 'longdash')+
geom_smooth()+
facet_wrap(~gene_role)+
CNAqc:::my_ggplot_theme()+
labs(y = 'Log-Rank Statistics (Mean)', x = 'Adjusted VAF cut-off')
plot_f
ggdat = ggplot_build(plot_f)$data[[2]]  # [[2]] is the smooth layer
ggdat = ggdat %>%
as_tibble() %>%
group_by(PANEL) %>%
reframe(
xx = x[which.max(y)],   # x-value at maximum y
yy = max(y)             # corresponding y-value
) %>%
mutate(gene_role = ifelse(PANEL==1, 'TSG', 'oncogene')) %>% mutate(gene_role = factor(gene_role, levels = c('TSG', 'oncogene')))
plot_f = plot_f+geom_vline(data = ggdat, aes(xintercept = xx), linetype = 'longdash')
plot_f
target_gene = relevant[i,]$gene #'KRAS'
target_gene_role = INCOMMON::cancer_gene_census %>% filter(gene == target_gene) %>% pull(gene_role)
tumor_type = relevant[i,]$tumor_type #'PAAD'
data = rbind(
x %>% filter(tumor_type == !!tumor_type, gene == target_gene) %>% mutate(group = paste0('Mutant ', target_gene)),
x %>% filter(tumor_type == !!tumor_type, !grepl(target_gene, genotype)) %>% group_by(sample) %>% slice_head(n=1) %>% mutate(group = paste0('WT ', target_gene))
)
# VAF/purity
data = data %>% mutate(
class = case_when(
group == paste0('Mutant ', target_gene) & adjusted_VAF <= ggdat[ggdat$gene_role==target_gene_role,]$xx ~ 'Low Adjusted VAF',
group == paste0('Mutant ', target_gene) & adjusted_VAF > ggdat[ggdat$gene_role==target_gene_role,]$xx ~ 'High Adjusted VAF',
TRUE ~ 'WT'
)
)
data$class = factor(data$class)
data$class = relevel(data$class, ref = 'WT')
x = x %>% group_by(sample) %>% reframe(genotype = paste(gene, collapse = ','), across(everything()))
target_gene = relevant[i,]$gene #'KRAS'
target_gene_role = INCOMMON::cancer_gene_census %>% filter(gene == target_gene) %>% pull(gene_role)
tumor_type = relevant[i,]$tumor_type #'PAAD'
data = rbind(
x %>% filter(tumor_type == !!tumor_type, gene == target_gene) %>% mutate(group = paste0('Mutant ', target_gene)),
x %>% filter(tumor_type == !!tumor_type, !grepl(target_gene, genotype)) %>% group_by(sample) %>% slice_head(n=1) %>% mutate(group = paste0('WT ', target_gene))
)
# VAF/purity
data = data %>% mutate(
class = case_when(
group == paste0('Mutant ', target_gene) & adjusted_VAF <= ggdat[ggdat$gene_role==target_gene_role,]$xx ~ 'Low Adjusted VAF',
group == paste0('Mutant ', target_gene) & adjusted_VAF > ggdat[ggdat$gene_role==target_gene_role,]$xx ~ 'High Adjusted VAF',
TRUE ~ 'WT'
)
)
data$class = factor(data$class)
data$class = relevel(data$class, ref = 'WT')
# Univariate
cox_formula = 'survival::Surv(OS_MONTHS,OS_STATUS) ~ class'
cox_formula = cox_formula %>% stats::as.formula()
km_fit = survival::survfit(
formula = cox_formula,
data = data %>% as.data.frame())
km_fit$call$formula = cox_formula
survminer::ggsurvplot(
fit = km_fit,
censor = F,
conf.int = F,
data = data,
ylab = "Overall Survival",
xlab = "Time (months)",
fontsize = 4,
risk.table = TRUE,
risk.table.col = "strata",
risk.table.fontsize = 3,
ggtheme = my_ggplot_theme(cex = .8),
tables.theme = my_ggplot_theme(cex = .8),
# surv.median.line = 'hv',
# pval = T,
# pval.size = 3,
risk.table.y.text = FALSE,
# palette = palette
)
cox_fit = survival::coxph(
formula = cox_formula,
data = data
)
c = summary(cox_fit)$concordance
out = tibble(
target_gene,
tumor_type,
method = 'adjusted VAF',
model_type = 'univariate',
c = c['C'] %>% unname()
)
# Multivariate
cox_formula = 'survival::Surv(OS_MONTHS,OS_STATUS) ~ class + age + TMB + type + FGA'
if(!((grepl('BRCA', tumor_type) | grepl('UCEC', tumor_type) |  grepl('UCS', tumor_type) | grepl('PRAD', tumor_type) | grepl('OV', tumor_type)))) cox_formula = paste0(cox_formula, ' + sex')
cox_formula = cox_formula %>% stats::as.formula()
cox_fit = survival::coxph(
formula = cox_formula,
data = data
)
c = summary(cox_fit)$concordance
out = out %>% rbind(
tibble(
target_gene,
tumor_type,
method = 'adjusted VAF',
model_type = 'multivariate',
c = c['C'] %>% unname()
)
)
# Gene dosage
data = data %>%
dplyr::mutate(class = dplyr::case_when(
group == paste0('Mutant ', target_gene) & target_gene_role == 'TSG' & FAM <= .25 ~ 'Low Dosage',
group == paste0('Mutant ', target_gene) & target_gene_role == 'oncogene' & FAM <= .33 ~ 'Low Dosage',
group == paste0('Mutant ', target_gene) & target_gene_role == 'TSG' & FAM > .25 & FAM < .75 ~ 'Balanced Dosage',
group == paste0('Mutant ', target_gene) & target_gene_role == 'oncogene' & FAM > .33 & FAM < .66 ~ 'Balanced Dosage',
group == paste0('Mutant ', target_gene) & target_gene_role == 'TSG' & FAM >= .75 ~ 'High Dosage',
group == paste0('Mutant ', target_gene) & target_gene_role == 'oncogene' & FAM >= .66 ~ 'High Dosage',
TRUE ~ 'WT'
))
data$class = factor(data$class)
data$class = relevel(data$class, ref = 'WT')
cox_formula = 'survival::Surv(OS_MONTHS,OS_STATUS) ~ map_m/map_k'
cox_formula = cox_formula %>% stats::as.formula()
km_fit = survival::survfit(
formula = cox_formula,
data = data %>% as.data.frame())
data = data %>% mutate(
class = case_when(
group == paste0('Mutant ', target_gene) ~ paste(map_m, map_k, sep = ":"),
TRUE ~ 'WT'
)
)
data$class = factor(data$class)
data$class = relevel(data$class, ref = 'WT')
cox_formula = 'survival::Surv(OS_MONTHS,OS_STATUS) ~ class'
cox_formula = cox_formula %>% stats::as.formula()
km_fit = survival::survfit(
formula = cox_formula,
data = data %>% as.data.frame())
km_fit$call$formula = cox_formula
survminer::ggsurvplot(
fit = km_fit,
censor = F,
conf.int = F,
data = data,
ylab = "Overall Survival",
xlab = "Time (months)",
fontsize = 4,
risk.table = TRUE,
risk.table.col = "strata",
risk.table.fontsize = 3,
ggtheme = my_ggplot_theme(cex = .8),
tables.theme = my_ggplot_theme(cex = .8),
# surv.median.line = 'hv',
# pval = T,
# pval.size = 3,
risk.table.y.text = FALSE,
# palette = palette
)
data = data %>% mutate(
class = case_when(
group == paste0('Mutant ', target_gene) ~ paste(map_m, map_k, sep = ":"),
TRUE ~ 'WT'
)
)
data %>% group_by(class) %>% reframe(n = length(unique(sample)), across(everything())) %>%
filter(n >= 100)
data = data %>% group_by(class) %>% reframe(n = length(unique(sample)), across(everything())) %>%
filter(n >= 100)
data$class = factor(data$class)
data$class = relevel(data$class, ref = 'WT')
cox_formula = 'survival::Surv(OS_MONTHS,OS_STATUS) ~ class'
cox_formula = cox_formula %>% stats::as.formula()
km_fit = survival::survfit(
formula = cox_formula,
data = data %>% as.data.frame())
km_fit$call$formula = cox_formula
survminer::ggsurvplot(
fit = km_fit,
censor = F,
conf.int = F,
data = data,
ylab = "Overall Survival",
xlab = "Time (months)",
fontsize = 4,
risk.table = TRUE,
risk.table.col = "strata",
risk.table.fontsize = 3,
ggtheme = my_ggplot_theme(cex = .8),
tables.theme = my_ggplot_theme(cex = .8),
# surv.median.line = 'hv',
# pval = T,
# pval.size = 3,
risk.table.y.text = FALSE,
# palette = palette
)
data = rbind(
x %>% filter(tumor_type == !!tumor_type, gene == target_gene) %>% mutate(group = paste0('Mutant ', target_gene)),
x %>% filter(tumor_type == !!tumor_type, !grepl(target_gene, genotype)) %>% group_by(sample) %>% slice_head(n=1) %>% mutate(group = paste0('WT ', target_gene))
)
data = data %>% group_by(class) %>% reframe(n = length(unique(sample)), across(everything())) %>%
filter(n >= 50)
data = data %>% mutate(
class = case_when(
group == paste0('Mutant ', target_gene) ~ paste(map_m, map_k, sep = ":"),
TRUE ~ 'WT'
)
)
data = data %>% group_by(class) %>% reframe(n = length(unique(sample)), across(everything())) %>%
filter(n >= 50)
data$class = factor(data$class)
data$class = relevel(data$class, ref = 'WT')
cox_formula = 'survival::Surv(OS_MONTHS,OS_STATUS) ~ class'
cox_formula = cox_formula %>% stats::as.formula()
km_fit = survival::survfit(
formula = cox_formula,
data = data %>% as.data.frame())
km_fit$call$formula = cox_formula
survminer::ggsurvplot(
fit = km_fit,
censor = F,
conf.int = F,
data = data,
ylab = "Overall Survival",
xlab = "Time (months)",
fontsize = 4,
risk.table = TRUE,
risk.table.col = "strata",
risk.table.fontsize = 3,
ggtheme = my_ggplot_theme(cex = .8),
tables.theme = my_ggplot_theme(cex = .8),
# surv.median.line = 'hv',
# pval = T,
# pval.size = 3,
risk.table.y.text = FALSE,
# palette = palette
)
survminer::ggsurvplot(
fit = km_fit,
censor = F,
conf.int = F,
data = data,
ylab = "Overall Survival",
xlab = "Time (months)",
fontsize = 4,
risk.table = TRUE,
risk.table.col = "strata",
risk.table.fontsize = 3,
ggtheme = my_ggplot_theme(cex = .8),
tables.theme = my_ggplot_theme(cex = .8),
# surv.median.line = 'hv',
# pval = T,
# pval.size = 3,
risk.table.y.text = FALSE,
palette = c("#e41a1c", "#377eb8", "#4daf4a", "#984ea3",
"#ff7f00", "#ffff33", "#a65628", "#f781bf", "#999999")
)
devtools::load_all('~/Documents/GitHub/INCOMMON/')
library(tidyverse)
data_patients = read_tsv('./data/msk_met_2021/data_clinical_patient.txt', skip = 4)
data_samples = read_tsv('./data/msk_met_2021//data_clinical_sample.txt', skip = 4)
data_mutations = read_tsv('./data/msk_met_2021//data_mutations.txt')
data_mutations$gene %>% unique() %>% length()
data_mutations = read_tsv('./data/msk_met_2021//data_mutations.txt')
Sys.setenv('R_MAX_VSIZE'=32000000000)
data_mutations = read_tsv('./data/msk_met_2021//data_mutations.txt')
library(usethis)
usethis::edit_r_environ()
