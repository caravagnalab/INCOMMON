c(x$n)
}) %>% do.call(rbind, .)
return(out)
}
priors_k_m_sample = get_stan_input_priors(x = x, N_mutations = M, priors = priors_k_m, k_max = k_max)
get_sample_priors(x = x, priors = priors)
priors_k_m
library(tidyverse)
devtools::load_all('~/Documents/GitHub/INCOMMON/')
sample = samples[2]
samples = classification(msk) %>% filter(gene == 'TP53', map_k == 'k=8') %>% pull(sample) %>% unique()
library(tidyverse)
devtools::load_all('~/Documents/GitHub/INCOMMON/')
msk = readRDS('./results/msk_classified_new_model.rds')
sample = samples[2]
x = subset_sample(x = msk, sample_list = sample)
# priors_k_m = readRDS('./results/pcawg_ploidy_multiplicity_categorical_priors_from_drivers_only.rds')
priors_k_m = readRDS('./results/dirichlet_prior_parameters.rds')
input = INCOMMON::init(
genomic_data = x$genomic_data %>%
select(-gene_role),
clinical_data = x$clinical_data
)
priors_x = readRDS('./results/msk_overall_x_prior.rds')
x = subset_sample(x = msk, sample_list = sample)
msk
sample
sample = samples[2]
x = subset_sample(x = msk, sample_list = sample)
sample
sample = samples[2]
samples = classification(msk) %>% filter(gene == 'TP53', map_k == 'k=8') %>% pull(sample) %>% unique()
sample = samples[2]
x = subset_sample(x = msk, sample_list = sample)
input = INCOMMON::init(
genomic_data = x$genomic_data %>%
select(-gene_role),
clinical_data = x$clinical_data
)
# priors_k_m = readRDS('./results/pcawg_ploidy_multiplicity_categorical_priors_from_drivers_only.rds')
priors_k_m = readRDS('./results/dirichlet_prior_parameters.rds')
priors_x = readRDS('./results/msk_overall_x_prior.rds')
out = classify(
x = input,
k_max = 8,
priors_k_m = priors_k_m,
priors_x = priors_x,
purity_error = 0.05,
num_cores = 8,
iter_warmup = 1000,
iter_sampling = 4000,
# dump = TRUE,
# dump_file = dump_path
)
rlang::last_trace()
devtools::load_all('~/Documents/GitHub/INCOMMON/')
out = classify(
x = input,
k_max = 8,
priors_k_m = priors_k_m,
priors_x = priors_x,
purity_error = 0.05,
num_cores = 8,
iter_warmup = 1000,
iter_sampling = 4000,
# dump = TRUE,
# dump_file = dump_path
)
plot_prior_k_m(x = out, gene = 'TP53', tumor_type = 'LUAD')
x = out
gene = 'TP53'
tumor_type = 'LUAD'
x
x = out
x
priors = x$classification$priors_k_m
k_max = x$classification$parameters$k_max
what = get_sample_priors(x = x, priors = priors, k_max = k_max)
what
# what = priors_k_m %>% dplyr::filter(gene == !!gene, tumor_type == !!tumor_type)
# title = paste0(gene, ' (', tumor_type, ')')
# if(nrow(what)==0) {
#   tumor_type = 'P'
#   what = priors_k_m %>% dplyr::filter(gene == !!gene, tumor_type == !!tumor_type)
#
#   gene_role = cancer_gene_census %>% dplyr::filter(gene == !!gene) %>% dplyr::pull(gene_role)
#   what = priors_k_m %>% dplyr::filter(gene == 'other', gene_role == !!gene_role, tumor_type == !!tumor_type)
#   title = paste0(gene_role, ' (', tumor_type, ')')
# }
ggplot2::ggplot(what, ggplot2::aes(x = factor(k), y = factor(m), fill = round(f,2))) +
ggplot2::geom_tile() +
ggplot2::geom_text(ggplot2::aes(label = round(n,1)), color = "black") +
ggplot2::scale_fill_gradient(low = "gainsboro", high = "blue", limits = c(min(what$f), max(what$f))) +
ggplot2::labs(
title = title,
x = "Total CN (k)",
y = "Multiplicity (m)",
fill = "Prior Probability"
) +
ggplot2::guides(fill = ggplot2::guide_colorbar(barwidth = unit(2.5, 'cm')))+
my_ggplot_theme()
what
ggplot2::ggplot(what, ggplot2::aes(x = factor(k), y = factor(m), fill = round(f,2))) +
ggplot2::geom_tile()
ggplot2::ggplot(what, ggplot2::aes(x = factor(k), y = factor(m), fill = round(f,2))) +
ggplot2::geom_tile() +
ggplot2::geom_text(ggplot2::aes(label = round(n,1)), color = "black")
what
# what = priors_k_m %>% dplyr::filter(gene == !!gene, tumor_type == !!tumor_type)
# title = paste0(gene, ' (', tumor_type, ')')
# if(nrow(what)==0) {
#   tumor_type = 'P'
#   what = priors_k_m %>% dplyr::filter(gene == !!gene, tumor_type == !!tumor_type)
#
#   gene_role = cancer_gene_census %>% dplyr::filter(gene == !!gene) %>% dplyr::pull(gene_role)
#   what = priors_k_m %>% dplyr::filter(gene == 'other', gene_role == !!gene_role, tumor_type == !!tumor_type)
#   title = paste0(gene_role, ' (', tumor_type, ')')
# }
ggplot2::ggplot(what, ggplot2::aes(x = factor(k), y = factor(m), fill = round(f,2))) +
ggplot2::geom_tile() +
ggplot2::geom_text(ggplot2::aes(label = round(n,1)), color = "black") +
ggplot2::scale_fill_gradient(low = "gainsboro", high = "blue", limits = c(min(what$f), max(what$f))) +
ggplot2::labs(
title = title,
x = "Total CN (k)",
y = "Multiplicity (m)",
fill = "Prior Probability"
) +
ggplot2::guides(fill = ggplot2::guide_colorbar(barwidth = unit(2.5, 'cm')))+
my_ggplot_theme()+
facet_wrap(~id)
what
ggplot2::ggplot(what, ggplot2::aes(x = factor(k), y = factor(m), fill = round(f,2))) +
ggplot2::geom_tile() +
ggplot2::geom_text(ggplot2::aes(label = round(n,1)), color = "black") +
ggplot2::scale_fill_gradient(low = "gainsboro", high = "blue", limits = c(min(what$f), max(what$f))) +
ggplot2::labs(
title = title,
x = "Total CN (k)",
y = "Multiplicity (m)",
fill = "Prior Probability"
) +
ggplot2::guides(fill = ggplot2::guide_colorbar(barwidth = unit(2.5, 'cm')))+
my_ggplot_theme()+
facet_wrap(~id)
ggplot2::ggplot(what, ggplot2::aes(x = factor(k), y = factor(m), fill = round(f,2))) +
ggplot2::geom_tile() +
ggplot2::geom_text(ggplot2::aes(label = round(n,1)), color = "black") +
ggplot2::scale_fill_gradient(low = "gainsboro", high = "blue", limits = c(min(what$f), max(what$f)))
ggplot2::ggplot(what, ggplot2::aes(x = factor(k), y = factor(m), fill = round(f,2))) +
ggplot2::geom_tile() +
ggplot2::geom_text(ggplot2::aes(label = round(n,1)), color = "black") +
ggplot2::scale_fill_gradient(low = "gainsboro", high = "blue", limits = c(min(what$f), max(what$f))) +
ggplot2::labs(
title = title,
x = "Total CN (k)",
y = "Multiplicity (m)",
fill = "Prior Probability"
)
title
# what = priors_k_m %>% dplyr::filter(gene == !!gene, tumor_type == !!tumor_type)
# title = paste0(gene, ' (', tumor_type, ')')
# if(nrow(what)==0) {
#   tumor_type = 'P'
#   what = priors_k_m %>% dplyr::filter(gene == !!gene, tumor_type == !!tumor_type)
#
#   gene_role = cancer_gene_census %>% dplyr::filter(gene == !!gene) %>% dplyr::pull(gene_role)
#   what = priors_k_m %>% dplyr::filter(gene == 'other', gene_role == !!gene_role, tumor_type == !!tumor_type)
#   title = paste0(gene_role, ' (', tumor_type, ')')
# }
ggplot2::ggplot(what, ggplot2::aes(x = factor(k), y = factor(m), fill = round(f,2))) +
ggplot2::geom_tile() +
ggplot2::geom_text(ggplot2::aes(label = round(n,1)), color = "black") +
ggplot2::scale_fill_gradient(low = "gainsboro", high = "blue", limits = c(min(what$f), max(what$f))) +
ggplot2::labs(
# title = paste0(gene, ' (', tumor_type, ')'),
x = "Total CN (k)",
y = "Multiplicity (m)",
fill = "Prior Probability"
) +
ggplot2::guides(fill = ggplot2::guide_colorbar(barwidth = unit(2.5, 'cm')))+
my_ggplot_theme()+
facet_wrap(~id)
devtools::load_all('~/Documents/GitHub/INCOMMON/')
plot_prior_k_m(x = out)
devtools::load_all('~/Documents/GitHub/INCOMMON/')
sample
plot_prior_k_m(
x = out,
priors = out$classification$priors_k_m,
k_max = out$classification$priors_k_m,
sample = sample
)
x = out
priors = out$classification$priors_k_m
k_max = out$classification$priors_k_m
x = subset_sample(x = x, sample_list = sample)
stopifnot(inherits(x, 'INCOMMON'))
samples = unique(x$input$sample)
samples
stopifnot(length(intersect(samples(x), sample_list))>0)
sample_list = samples
stopifnot(length(intersect(samples(x), sample_list))>0)
gd = genomic_data(x, PASS = FALSE) %>% dplyr::filter(sample %in% sample_list)
cd = clinical_data(x, PASS = FALSE) %>% dplyr::filter(sample %in% sample_list)
ip = x$input %>% dplyr::filter(sample %in% sample_list)
gd
cd
ip
out = list(genomic_data = gd,
clinical_data = cd,
input = ip)
class(out) = 'INCOMMON'
'classification' %in% names(x)
length(intersect(classification(x)$sample, sample_list))>0
stopifnot(inherits(x, "INCOMMON"))
stopifnot("classification" %in% names(x))
stopifnot("fit" %in% names(x$classification))
x$classification$fit
devtools::load_all('~/Documents/GitHub/INCOMMON/')
plot_prior_k_m(
x = out,
priors = out$classification$priors_k_m,
k_max = out$classification$priors_k_m,
sample = sample
)
x = out
priors = out$classification$priors_k_m
k_max = out$classification$priors_k_m
sample
subset_sample(x = x, sample_list = sample)
x = subset_sample(x = x, sample_list = sample)
what = get_sample_priors(x = x, priors = priors, k_max = k_max)
x = out
out = classify(
x = input,
k_max = 8,
priors_k_m = priors_k_m,
priors_x = priors_x,
purity_error = 0.05,
num_cores = 8,
iter_warmup = 1000,
iter_sampling = 4000,
# dump = TRUE,
# dump_file = dump_path
)
plot_prior_k_m(
x = out,
priors = out$classification$priors_k_m,
k_max = out$classification$priors_k_m,
sample = sample
)
x = out
priors = out$classification$priors_k_m
k_max = out$classification$priors_k_m
sample
x = out
subset_sample(x = x, sample_list = sample)
x = subset_sample(x = x, sample_list = sample)
what = get_sample_priors(x = x, priors = priors, k_max = k_max)
priors
k_max
input(x)
out = lapply(1:nrow(input(x)), function(i){
gene = input(x)[i,]$gene
gene_role = input(x)[i,]$gene_role
tumor_type = input(x)[i,]$tumor_type
what = priors %>% filter(gene == !!gene, tumor_type == !!tumor_type)
if(nrow(what) == 0){
what = priors %>% filter(gene == !!gene, tumor_type == 'PANCA')
if(nrow(what) == 0){
if(!is.na(gene_role)){
what = priors %>% filter(gene == 'other', gene_role == !!gene_role, tumor_type == 'PANCA')
} else {
what = priors %>% filter(gene == 'other', tumor_type == 'PANCA') %>%
group_by(gene, tumor_type, k, m) %>%
reframe(N = sum(N), n = sum(n), id = paste(NA, tumor_type), gene_role = NA) %>%
unique()
}
}
}
what = what %>% filter(k <= k_max)
what$N = sum(what$n)
what$f = what$n/what$N
what = what %>% dplyr::arrange(k)
return(what)
}) %>% do.call(rbind, .)
i=1
gene = input(x)[i,]$gene
gene_role = input(x)[i,]$gene_role
tumor_type = input(x)[i,]$tumor_type
gene
gene_role
tumor_type
what = priors %>% filter(gene == !!gene, tumor_type == !!tumor_type)
what
nrow(what) == 0
what = priors %>% filter(gene == !!gene, tumor_type == 'PANCA')
what
what %>% filter(k <= k_max)
k_max
k_max
plot_prior_k_m(
x = out,
priors = out$classification$priors_k_m,
k_max = out$classification$parameters$k_max,
sample = sample
)
x$classification$fit
sample
what = x$classification$fit %>% dplyr::filter(sample == !!sample)
what
what = x$classification$fit %>%
dplyr::filter(
sample == !!sample,
grepl('psi', variable)
)
what
k_max = x$classification$parameters$k_max
posterior_table = lapply(1:k_max, function(k){
lapply(1:k, function(m){
tibble(k = k,m = m)
}) %>% do.call(rbind, .)
}) %>% do.call(rbind, .)
posterior_table = lapply(1:k_max, function(k){
lapply(1:k, function(m){
dplyr::tibble(k = k,m = m)
}) %>% do.call(rbind, .)
}) %>% do.call(rbind, .)
posterior_table
what
x = subset_sample(x = x, sample_list = sample)
1:nrow(input(x)
)
posterior_table
posterior_table$psi = mixing_p
mixing_p = mixing_p_all[grepl(paste0('psi\\[',i,','), mixing_p_all$variable),][,'mean']$mean
posterior_table$psi = mixing_p
mixing_p = mixing_p_all[grepl(paste0('psi\\[',i,','), mixing_p_all$variable),][,'mean']$mean
what
what
i
what
what[grepl(paste0('psi\\[',i,','), what$variable),][,'mean']$mean
y = posterior_table
y$f = what[grepl(paste0('psi\\[',i,','), what$variable),][,'mean']$mean
y
y = posterior_table
y$p = what[grepl(paste0('psi\\[',i,','), what$variable),][,'mean']$mean
input(x)[i,]
y %>% dplyr::bind_cols(input(x)[i,] %>% dplyr::select(gene, tumor_type))
priors_k_m
y %>% dplyr::bind_cols(input(x)[i,] %>% dplyr::select(gene, gene_role, tumor_type))
lapply(1:nrow(input(x))){
lapply(1:nrow(input(x)){
1:nrow(input(x)
lapply(1:nrow(input(x)), function(i){
y = posterior_table
y$p = what[grepl(paste0('psi\\[',i,','), what$variable),][,'mean']$mean
y %>% dplyr::bind_cols(input(x)[i,] %>% dplyr::select(gene, gene_role, tumor_type))
})
lapply(1:nrow(input(x)), function(i){
y = posterior_table
y$p = what[grepl(paste0('psi\\[',i,','), what$variable),][,'mean']$mean
y %>% dplyr::bind_cols(input(x)[i,] %>% dplyr::select(gene, gene_role, tumor_type))
}) %>% do.call(rbind, .)
lapply(1:nrow(input(x)), function(i){
y = posterior_table
y$p = what[grepl(paste0('psi\\[',i,','), what$variable),][,'mean']$mean
y %>% dplyr::bind_cols(input(x)[i,] %>% dplyr::select(sample, gene, gene_role, tumor_type))
}) %>% do.call(rbind, .)
get_post_mixing_p = function(x, sample){
x = subset_sample(x = x, sample_list = sample)
k_max = x$classification$parameters$k_max
posterior_table = lapply(1:k_max, function(k){
lapply(1:k, function(m){
dplyr::tibble(k = k,m = m)
}) %>% do.call(rbind, .)
}) %>% do.call(rbind, .)
what = x$classification$fit %>%
dplyr::filter(
sample == !!sample,
grepl('psi', variable)
)
lapply(1:nrow(input(x)), function(i){
y = posterior_table
y$p = what[grepl(paste0('psi\\[',i,','), what$variable),][,'mean']$mean
y %>% dplyr::bind_cols(input(x)[i,] %>% dplyr::select(sample, gene, gene_role, tumor_type))
}) %>% do.call(rbind, .)
}
post = get_post_mixing_p(x = x, sample = sample)
post
post = get_post_mixing_p(x = x, sample = sample) %>% dplyr::mutate(id = paste(gene, tumor_type, sep = ':'))
ggplot2::ggplot(post, ggplot2::aes(x = factor(k), y = factor(m), fill = round(f,2))) +
ggplot2::geom_tile() +
ggplot2::geom_text(ggplot2::aes(label = round(n,1)), color = "black") +
ggplot2::scale_fill_gradient(low = "gainsboro", high = "blue", limits = c(min(what$f), max(what$f))) +
ggplot2::labs(
# title = paste0(gene, ' (', tumor_type, ')'),
x = "Total CN (k)",
y = "Multiplicity (m)",
fill = "Prior Probability"
) +
ggplot2::guides(fill = ggplot2::guide_colorbar(barwidth = unit(2.5, 'cm')))+
my_ggplot_theme()+
facet_wrap(~id)
ggplot2::ggplot(post, ggplot2::aes(x = factor(k), y = factor(m), fill = round(f,2))) +
ggplot2::geom_tile()
post
ggplot2::ggplot(post, ggplot2::aes(x = factor(k), y = factor(m), fill = round(p,2))) +
ggplot2::geom_tile() +
ggplot2::geom_text(ggplot2::aes(label = round(n,1)), color = "black") +
ggplot2::scale_fill_gradient(low = "gainsboro", high = "blue", limits = c(min(post$p), max(post$p))) +
ggplot2::labs(
# title = paste0(gene, ' (', tumor_type, ')'),
x = "Total CN (k)",
y = "Multiplicity (m)",
fill = "Prior Probability"
) +
ggplot2::guides(fill = ggplot2::guide_colorbar(barwidth = unit(2.5, 'cm')))+
my_ggplot_theme()+
facet_wrap(~id)
post
ggplot2::ggplot(post, ggplot2::aes(x = factor(k), y = factor(m), fill = round(p,2))) +
ggplot2::geom_tile()
ggplot2::ggplot(post, ggplot2::aes(x = factor(k), y = factor(m), fill = round(p,2))) +
ggplot2::geom_tile() +
ggplot2::geom_text(ggplot2::aes(label = round(n,1)), color = "black")
ggplot2::ggplot(post, ggplot2::aes(x = factor(k), y = factor(m), fill = round(p,2))) +
ggplot2::geom_tile() +
# ggplot2::geom_text(ggplot2::aes(label = round(n,1)), color = "black") +
ggplot2::scale_fill_gradient(low = "gainsboro", high = "blue", limits = c(min(post$p), max(post$p))) +
ggplot2::labs(
# title = paste0(gene, ' (', tumor_type, ')'),
x = "Total CN (k)",
y = "Multiplicity (m)",
fill = "Prior Probability"
) +
ggplot2::guides(fill = ggplot2::guide_colorbar(barwidth = unit(2.5, 'cm')))+
my_ggplot_theme()+
facet_wrap(~id)
x = out
priors = out$classification$priors_k_m
k_max = out$classification$parameters$k_max
sample = sample
x = subset_sample(x = x, sample_list = sample)
what = get_sample_priors(x = x, priors = priors, k_max = k_max)
what
what %>% select(gene, tumor_type) %>% unique()
p_prior = plot_prior_k_m(
x = out,
priors = out$classification$priors_k_m,
k_max = out$classification$parameters$k_max,
sample = sample
)
plot_posterior = function(x, sample){
post = get_post_mixing_p(x = x, sample = sample) %>% dplyr::mutate(id = paste(gene, tumor_type, sep = ':'))
ggplot2::ggplot(post, ggplot2::aes(x = factor(k), y = factor(m), fill = round(p,2))) +
ggplot2::geom_tile() +
# ggplot2::geom_text(ggplot2::aes(label = round(n,1)), color = "black") +
ggplot2::scale_fill_gradient(low = "gainsboro", high = "blue", limits = c(min(post$p), max(post$p))) +
ggplot2::labs(
# title = paste0(gene, ' (', tumor_type, ')'),
x = "Total CN (k)",
y = "Multiplicity (m)",
fill = "Prior Probability"
) +
ggplot2::guides(fill = ggplot2::guide_colorbar(barwidth = unit(2.5, 'cm')))+
my_ggplot_theme()+
facet_wrap(~id)
}
get_post_mixing_p = function(x, sample){
x = subset_sample(x = x, sample_list = sample)
k_max = x$classification$parameters$k_max
posterior_table = lapply(1:k_max, function(k){
lapply(1:k, function(m){
dplyr::tibble(k = k,m = m)
}) %>% do.call(rbind, .)
}) %>% do.call(rbind, .)
what = x$classification$fit %>%
dplyr::filter(
sample == !!sample,
grepl('psi', variable)
)
lapply(1:nrow(input(x)), function(i){
y = posterior_table
y$p = what[grepl(paste0('psi\\[',i,','), what$variable),][,'mean']$mean
y %>% dplyr::bind_cols(input(x)[i,] %>% dplyr::select(sample, gene, gene_role, tumor_type))
}) %>% do.call(rbind, .)
}
plot_posterior = function(x, sample){
post = get_post_mixing_p(x = x, sample = sample) %>% dplyr::mutate(id = paste(gene, tumor_type, sep = ':'))
ggplot2::ggplot(post, ggplot2::aes(x = factor(k), y = factor(m), fill = round(p,2))) +
ggplot2::geom_tile() +
# ggplot2::geom_text(ggplot2::aes(label = round(n,1)), color = "black") +
ggplot2::scale_fill_gradient(low = "gainsboro", high = "blue", limits = c(min(post$p), max(post$p))) +
ggplot2::labs(
# title = paste0(gene, ' (', tumor_type, ')'),
x = "Total CN (k)",
y = "Multiplicity (m)",
fill = "Prior Probability"
) +
ggplot2::guides(fill = ggplot2::guide_colorbar(barwidth = unit(2.5, 'cm')))+
my_ggplot_theme()+
facet_wrap(~id)
}
p_posterior = plot_posterior(x = x, sample = sample)
p_posterior
library(patchwork)
p_prior/p_posterior
setwd('~/Documents/GitHub/INCOMMON/')
15*100/60
