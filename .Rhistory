source("~/dati/R_scripts/function_to_add_annotations.R")
annotated = add_annotations(joint_table, annotation_files, files_type = "tsv", one_pass = F)
annotated = add_annotations(joint_table, annotation_files, files_type = "tsv")
annotated
saveRDS(annotated, "~/dati/aml/brma/BRMA_joint_calls_annotated.rds")
annotate %>% filter(PASS,EXONIC)
annotate %>% filter(PASS)
annotated %>% filter(PASS)
annotated %>% filter(PASS,EXONIC)
annotated %>% filter(PASS,type=="SNV")
data = readRDS("/mnt/storage/encrypted-area/MFAG/AML/BRMA/calls/RDS/BRMA_joint_calls_annotated.rds")
data
x = data
x
cn = colnames(x)
cn = cn[grepl("VAF", cn)]
cn
samples =  sapply(strsplit(cn, "\\."), function(x){
x[2]
})
samples
sample
sample = "BRMA_1"
sample %in% samples
!(sample %in% samples)
sample = "BRMA_12"
!(sample %in% samples)
!(sample %in% samples)
a = function(x, sample, trim_names = TRUE){
cn = colnames(x)
cn = cn[grepl("VAF", cn)]
samples =  sapply(strsplit(cn, "\\."), function(x){
x[2]
})
if (!(sample %in% samples))
raise LessThanZeroException('Specified sample {sample} not found in samples {samples}')
x
}
sample
print("a:{sample}")
print("a:.{sample}")
print("a:.{.sample}")
print("a:.{sample}")
print('Specified sample %s not found in samples', sample)
a = function(x, sample, trim_names = TRUE){
cn = colnames(x)
cn = cn[grepl("VAF", cn)]
samples =  sapply(strsplit(cn, "\\."), function(x){
x[2]
})
if (!(sample %in% samples))
stop('Specified sample not found')
x
}
a(data,"BRMA_1")
a(data,"BRMA_15")
x %>% select(id,chr,from,to,ref,alt,ends_with(sample),everything())
x %>% select(id,chr,from,to,ref,alt,ends_with(sample))
x %>% select(id,chr,from,to,ref,alt,ends_with(sample))
sample
a(data,"BRMA_1",T)
a = function(x, sample, trim_names = TRUE){
cn = colnames(x)
cn = cn[grepl("VAF", cn)]
samples =  sapply(strsplit(cn, "\\."), function(x){
x[2]
})
if (!(sample %in% samples))
stop('Specified sample not found')
x %>% select(id,chr,from,to,ref,alt,ends_with(sample))
}
a(data,"BRMA_1",T)
a = function(x, sample, trim_names = TRUE){
cn = colnames(x)
cn = cn[grepl("VAF", cn)]
samples =  sapply(strsplit(cn, "\\."), function(x){
x[2]
})
if (!(sample %in% samples))
stop('Specified sample not found')
x %>% select(id,chr,from,to,ref,alt,ends_with(sample), everything())
}
a(data,"BRMA_1",T)
samples
sample
sample = "BRMA_1"
samples-sample
samples[samples!=sample]
a = function(x, sample, trim_names = TRUE){
cn = colnames(x)
cn = cn[grepl("VAF", cn)]
samples =  sapply(strsplit(cn, "\\."), function(x){
x[2]
})
if (!(sample %in% samples))
stop('Specified sample not found')
excluded = samples[samples!=sample]
x %>% select(!(starts_with(excluded)))
}
a(data,"BRMA_1",T)
x
cn = colnames(x)
cn = cn[grepl("VAF", cn)]
samples =  sapply(strsplit(cn, "\\."), function(x){
x[2]
})
x
sample
excluded = samples[samples!=sample]
excluded
!(starts_with(excluded))
x %>% select(!(starts_with(excluded)))
x %>% select(!(ends_with(excluded)))
x = x %>% select(!(ends_with(excluded)))
x = colnames(x)
x = data
cn = colnames(x)
cn = cn[grepl("VAF", cn)]
samples =  sapply(strsplit(cn, "\\."), function(x){
x[2]
})
excluded = samples[samples!=sample]
x = x %>% select(!(ends_with(excluded)))
x
colnames(x)
grepl(sample,colnames(x))
x[grepl(sample,colnames(x))]
x[grepl(sample,colnames(x))] %>% colnames()
olnames(x[grepl(sample,colnames(x))])
colnames(x[grepl(sample,colnames(x))])
sub(".", "", colnames(x[grepl(sample,colnames(x))]))
sub(".$", "", colnames(x[grepl(sample,colnames(x))]))
sub("\\.$", "", colnames(x[grepl(sample,colnames(x))]))
sub("\\..*", "", colnames(x[grepl(sample,colnames(x))]))
a = function(x, sample, trim_names = TRUE){
cn = colnames(x)
cn = cn[grepl("VAF", cn)]
samples =  sapply(strsplit(cn, "\\."), function(x){
x[2]
})
if (!(sample %in% samples))
stop('Specified sample not found')
excluded = samples[samples!=sample]
x = x %>% select(!(ends_with(excluded)))
if(trim_names)
colnames(x[grepl(sample,colnames(x))]) = sub("\\..*", "", colnames(x[grepl(sample,colnames(x))]))
}
a(data,"BRMA_1",T)
a = function(x, sample, trim_names = TRUE){
cn = colnames(x)
cn = cn[grepl("VAF", cn)]
samples =  sapply(strsplit(cn, "\\."), function(x){
x[2]
})
if (!(sample %in% samples))
stop('Specified sample not found')
excluded = samples[samples!=sample]
x = x %>% select(!(ends_with(excluded)))
if(trim_names)
colnames(x[grepl(sample,colnames(x))]) = sub("\\..*", "", colnames(x[grepl(sample,colnames(x))]))
x
}
a(data,"BRMA_1",T)
x
x = data
cn = colnames(x)
cn = cn[grepl("VAF", cn)]
samples =  sapply(strsplit(cn, "\\."), function(x){
x[2]
})
excluded = samples[samples!=sample]
x = x %>% select(!(ends_with(excluded)))
x
trim_names
colnames(x[grepl(sample,colnames(x))]) = sub("\\..*", "", colnames(x[grepl(sample,colnames(x))]))
x
sub("\\..*", "", colnames(x[grepl(sample,colnames(x))]))
colnames(x[grepl(sample,colnames(x))])
cn = x[grepl(sample,colnames(x))]
cn
cn = x[grepl(sample,colnames(x))] %>% colnames()
cn
x[grepl(sample,colnames(x))] %>% colnames()
colnames(x)
colnames(x)==x[grepl(sample,colnames(x))] %>% colnames()
which(colnames(x)==x[grepl(sample,colnames(x))] %>% colnames())
cn = which(colnames(x)==x[grepl(sample,colnames(x))] %>% colnames())
cn
colnames(x)[cn]
colnames(x)[cn] = sub("\\..*", "", colnames(x[grepl(sample,colnames(x))]))
x
extract_sample = function(x, sample, trim_names = TRUE){
cn = colnames(x)
cn = cn[grepl("VAF", cn)]
samples =  sapply(strsplit(cn, "\\."), function(x){
x[2]
})
if (!(sample %in% samples))
stop('Specified sample not found')
excluded = samples[samples!=sample]
x = x %>% select(!(ends_with(excluded)))
if(trim_names){
cn = which(colnames(x)==x[grepl(sample,colnames(x))] %>% colnames())
colnames(x)[cn] = sub("\\..*", "", colnames(x[grepl(sample,colnames(x))]))
}
x
}
data1 = extract_sample(data,"BRMA_1",trim_names = TRUE)
data1
data1 = extract_sample(data,"BRMA_2",trim_names = TRUE)
data1
data1 = extract_sample(data,"BRMA_2",trim_names = FALSE)
data1
library(CDSLabData)
CDSLabData::available_samples()
CDSLabData::available_samples() %>% View
library(dplyr)
CDSLabData::available_samples() %>% View
mydata = CDSLabData::load_dataset(type = "WGS", sample = "0e7ac212-0469-4f17-9432-205ab1831257", cohort = 'PCAWG')
mydata
CNAqc:::chr_coordinates_hg19
CNAqc:::chr_coordinates_hg19
CNAqc::chr_coordinates_hg19
CNAqc:::absolute_to_relative_coordinates(list(ref = "hg19"), CNAqc::chr_coordinates_hg19)
list(ref = "hg19")
CNAqc:::absolute_to_relative_coordinates(list(reference_genome = "hg19"), CNAqc::chr_coordinates_hg19)
library(package)
.libPaths()
CDSLabData::load_dataset(type = "WGS")
samples = c("91f458e6-64b7-454d-a542-b0aa23638fd8", "abd2d959-d5ed-4eb3-9759-67eb1aa23325", "804ffa2e-158b-447d-945c-707684134c87")
samples = c("91f458e6-64b7-454d-a542-b0aa23638fd8", "abd2d959-d5ed-4eb3-9759-67eb1aa23325", "804ffa2e-158b-447d-945c-707684134c87")
x = readRDS(paste0("/mnt/storage/dati_smilite/hmobster/PCAWG/", samples[1], "/evoverse_dataqc.rds"))
x
require(evoverse)
plot(x)
x$cnaqc
x$cnaqc %>% plot()
x$cnaqc %>% evoverse::plot()
x$cnaqc %>% evoverse:::plot()
ggsave(filename = "./dati/test_bladder_cnaqc_report.pdf", plot = plot(x), width = 18, height = 18)
x = readRDS(paste0("/mnt/storage/dati_smilite/hmobster/PCAWG/", samples[2], "/evoverse_dataqc.rds"))
ggsave(filename = "./dati/test_bladder_cnaqc_report.pdf", plot = plot(x), width = 18, height = 18)
x = readRDS(paste0("/mnt/storage/dati_smilite/hmobster/PCAWG/", samples[3], "/evoverse_dataqc.rds"))
ggsave(filename = "./dati/test_bladder_cnaqc_report.pdf", plot = plot(x), width = 18, height = 18)
x = readRDS(paste0("/mnt/storage/dati_smilite/hmobster/PCAWG/", "4d11d7da-1204-437e-87b1-e8337a67c9a8", "/evoverse_dataqc.rds"))
ggsave(filename = "./dati/test_bladder_cnaqc_report_4.pdf", plot = plot(x), width = 18, height = 18)
x
x$cnaqc$snvs %>% colnames()
x$cnaqc$snvs %>% select(is_driver, driver_label)
x$cnaqc$snvs %>% select(is_driver, driver_label) %>% filter(is_driver)
statz = readRDS("~/dati/cll/pcawg_cll_mobster_fits.rds")
toplot = lapply(statz %>% names(), function(n){
if(!is.na(statz[[n]]$shape)){
k = statz[[n]]$Kbeta
s = n
data = tibble(s, k, .name_repair = ~c("sample", "clusters"))
} else {data = NULL}
return(data)
}) %>%
do.call(what = rbind,args = .)
statz = readRDS("~/dati/cll/pcawg_cll_mobster_fits.rds")
statz
toplot = lapply(statz %>% names(), function(n){
if(!is.na(statz[[n]]$shape)){
k = statz[[n]]$Kbeta
s = n
data = tibble(s, k, .name_repair = ~c("sample", "clusters"))
} else {data = NULL}
return(data)
}) %>%
do.call(what = rbind,args = .)
toplot
tibble(c("RM238","CT48"), c(2,2), .name_repair = ~c("sample", "clusters"))
tibble(c(paste0("RM238", c("Dm","Dp","Rm","Rp")),"CT48"), c(2,2,2,2,2), .name_repair = ~c("sample", "clusters"))
c(c(2,2,2,2),
c(2,2,2,2),
c(2,2,2,2),
c(2,2,2,2),
c(2,2,2,2),
c(2,2,2,2))
toplot
toplot %>%
bind_rows(
tibble(c(paste0("RM238", c("Dm","Dp","Rm","Rp")),
paste0("CT48", c("Dm","Dp","Rm","Rp")),
paste0("UD4", c("Dm","Dp","Rm","Rp")),
paste0("CT58", c("Dm","Dp","Rm","Rp")),
paste0("CT265", c("Dm","Dp","Rm","Rp")),
paste0("UD18", c("Dm","Dp","Rm","Rp"))),
c(c(1,1,2,1),
c(2,1,3,2),
c(3,2,1,1),
c(1,1,1,1),
c(1,1,1,3),
c(2,1,2,1)), .name_repair = ~c("sample", "clusters"))
)
toplot = toplot %>%
bind_rows(
tibble(c(paste0("RM238", c("Dm","Dp","Rm","Rp")),
paste0("CT48", c("Dm","Dp","Rm","Rp")),
paste0("UD4", c("Dm","Dp","Rm","Rp")),
paste0("CT58", c("Dm","Dp","Rm","Rp")),
paste0("CT265", c("Dm","Dp","Rm","Rp")),
paste0("UD18", c("Dm","Dp","Rm","Rp"))),
c(c(1,1,2,1),
c(2,1,3,2),
c(3,2,1,1),
c(1,1,1,1),
c(1,1,1,3),
c(2,1,2,1)), .name_repair = ~c("sample", "clusters"))
)
toplot$K = as.character(toplot$clusters)
toplot$cohort = "PCAWG"
toplot[(nrow(toplot)-24):nrow(toplot)]$cohort = "CRO"
(nrow(toplot)-24)
toplot[(nrow(toplot)-24):nrow(toplot),]$cohort = "CRO"
(toplot)+
geom_histogram(aes(x=clusters, fill = cohort), binwidth = 0.5)+coord_flip()+
CNAqc:::my_ggplot_theme()
ggplot(toplot)+
geom_histogram(aes(x=clusters, fill = cohort), binwidth = 0.5)+coord_flip()+
CNAqc:::my_ggplot_theme()
library(dplyr)
devtools::install_github("caravagnalab/mobster")
library(mobster)
samples = CDSLabData::all_cohorts %>%
filter(type=="WGS", cohort=="PCAWG") %>%
pull(sample)
cll = readRDS("~/dati/cll/pcawg_cll_samples_list.rds")
statz = readRDS("~/dati/cll/pcawg_cll_mobster_fits.rds")
toplot = lapply(statz %>% names(), function(n){
if(!is.na(statz[[n]]$shape)){
k = statz[[n]]$Kbeta
s = n
data = tibble(s, k, .name_repair = ~c("sample", "clusters"))
} else {data = NULL}
return(data)
}) %>%
do.call(what = rbind,args = .)
toplot$K = as.character(toplot$clusters)
plt = ggplot(toplot)+
geom_histogram(aes(x=clusters), binwidth = 0.5)+coord_flip()+
CNAqc:::my_ggplot_theme()
plt
plt = ggplot(toplot)+
geom_histogram(aes(x=clusters), binwidth = 0.5)+coord_flip()+
CNAqc:::my_ggplot_theme()+scale_color_brewer()
plt = ggplot(toplot)+
geom_histogram(aes(x=clusters), binwidth = 0.5)+coord_flip()+
CNAqc:::my_ggplot_theme()+scale_color_brewer(1)
plt = ggplot(toplot)+
geom_histogram(aes(x=clusters), binwidth = 0.5)+coord_flip()+
CNAqc:::my_ggplot_theme()+scale_color_brewer(1)[2]
plt = ggplot(toplot)+
geom_histogram(aes(x=clusters), binwidth = 0.5)+coord_flip()+
CNAqc:::my_ggplot_theme()+scale_color_brewer(palette = "futurama")
plt = ggplot(toplot)+
geom_histogram(aes(x=clusters), binwidth = 0.5)+coord_flip()+
CNAqc:::my_ggplot_theme()+scale_color_brewer(palette = 1)
plt = ggplot(toplot)+
geom_histogram(aes(x=clusters), binwidth = 0.5)+coord_flip()+
CNAqc:::my_ggplot_theme()+scale_color_brewer(palette = 2)
plt
ggplot(toplot)+
geom_histogram(aes(x=clusters), binwidth = 0.5)+coord_flip()+
CNAqc:::my_ggplot_theme()+scale_color_brewer(palette = 2)
ggplot(toplot)+
geom_histogram(aes(x=clusters), binwidth = 0.5)+coord_flip()+
CNAqc:::my_ggplot_theme()+scale_color_brewer(palette = 'Set11')
ggplot(toplot)+
geom_histogram(aes(x=clusters), binwidth = 0.5)+coord_flip()+
CNAqc:::my_ggplot_theme()+scale_color_brewer(palette = 'Set1')
plt = ggplot(toplot)+
geom_histogram(aes(x=clusters), binwidth = 0.5, fill="red")+coord_flip()+
CNAqc:::my_ggplot_theme()+scale_color_brewer(palette = 2)
plt
scale_color_brewer(palette = 'Set1')
ggsci::pal_jco(1)
ggsci::pal_jco(1)[1]
plt = ggplot(toplot)+
geom_histogram(aes(x=clusters), binwidth = 0.5, fill="red")+coord_flip()+
CNAqc:::my_ggplot_theme()+scale_color_brewer(palette = 'Set1')+
ggsci::pal_jco(1)[1]
plt = ggplot(toplot)+
geom_histogram(aes(x=clusters), binwidth = 0.5, fill=ggsci::pal_jco(1)[1])+coord_flip()+
CNAqc:::my_ggplot_theme()
ggsci::pal_jco(1)
ggsci::pal_jco()
ggsci::pal_jco(2)[1]
ggsci::pal_jco(palette = "default")
plt = ggplot(toplot)+
geom_histogram(aes(x=clusters), binwidth = 0.5, fill=ggsci::pal_jco()(1)[1])+coord_flip()+
CNAqc:::my_ggplot_theme()
plt
plt = ggplot(toplot)+
geom_histogram(aes(x=clusters), binwidth = 0.5, fill=ggsci::pal_jco()(1)[2])+coord_flip()+
CNAqc:::my_ggplot_theme()
plt
ggplot(toplot)+
geom_histogram(aes(x=clusters), binwidth = 0.5, fill=ggsci::pal_jco()(6)[2])+coord_flip()+
CNAqc:::my_ggplot_theme()
ggplot(toplot)+
geom_histogram(aes(x=clusters), binwidth = 0.5, fill=ggsci::pal_jco()(6)[3])+coord_flip()+
CNAqc:::my_ggplot_theme()
ggplot(toplot)+
geom_histogram(aes(x=clusters), binwidth = 0.5, fill=ggsci::pal_jco()(6)[4])+coord_flip()+
CNAqc:::my_ggplot_theme()
ggsave("~/dati/cll/pcawg_cll_clusters.png", plot = plt, device = "png", dpi = "print")
plt
ggplot(toplot)+
geom_histogram(aes(x=clusters), binwidth = 0.5, fill=ggsci::pal_jco()(6)[4])+coord_flip()+
CNAqc:::my_ggplot_theme()
plt = ggplot(toplot)+
geom_histogram(aes(x=clusters), binwidth = 0.5, fill=ggsci::pal_jco()(6)[4])+coord_flip()+
CNAqc:::my_ggplot_theme()
ggsave("~/dati/cll/pcawg_cll_clusters.png", plot = plt, device = "png", dpi = "print")
plt = ggplot(toplot)+
geom_histogram(aes(x=clusters), binwidth = 0.5, fill=ggsci::pal_jco()(6)[4])+
CNAqc:::my_ggplot_theme()
plt
ggsave("~/dati/cll/pcawg_cll_clusters.png", plot = plt, device = "png", dpi = "print")
library(dplyr)
# devtools::install_github("caravagnalab/mobster")
library(mobster)
samples = CDSLabData::all_cohorts %>%
filter(type=="WGS", cohort=="PCAWG") %>%
pull(sample)
cll = readRDS("~/dati/cll/pcawg_cll_samples_list.rds")
samples
s = "5f13e9b8-6c8e-4fd7-aef1-da4e5d5e2a5e"
x = CDSLabData::load_dataset(type = "WGS",
sample = s,
cohort = "PCAWG")
x
x$mutations$seq_coverage
x$mutations$DP
x$mutations$DP %>% mean()
na.rm
x$mutations$DP %>% mean(na.rm=T)
x$metadata$purity
statz = lapply(cll, function(s){
statz = lapply(cll, function(s){
x = CDSLabData::load_dataset(type = "WGS",
sample = s,
cohort = "PCAWG")
meandp = x$mutations$DP %>% mean(na.rm=T)
purity = x$metadata$purity
return(c(meandp, purity))
})
statz
statz %>% unlist()
seq(2, length(10), by=2)
seq(2, 10, by=2)
statz = statz %>% unlist
statz
statz[seq(2, length(statz), by=2)]
statz[seq(2, length(statz), by=2)] %>% mean()
statz[seq(1, length(statz), by=2)] %>% mean()
0.3*0.7
setwd("~/dati/TAPACLOTH/fit_msk_met/P-0010950-T01-IM5_0.95.rds")
setwd("~/dati/TAPACLOTH/")
x = readRDS("./fit_msk_met/P-0010950-T01-IM5_0.95.rds")
x
TAPACLOTH::plot_test(x,x$classifier$`beta-binomial`$data$id[1],"beta-binomial")
x = readRDS("./fit_msk_met/P-0028912-T01-IM6_0.95.rds")
TAPACLOTH::plot_test(x,x$classifier$`beta-binomial`$data$id[1],"beta-binomial")
x = readRDS("./fit_msk_met/P-0001665-T01-IM3_0.9.rds")
x = readRDS("./fit_msk_met/P-0008954-T01-IM5_0.95.rds")
TAPACLOTH::plot_test(x,x$classifier$`beta-binomial`$data$id[1],"beta-binomial")
x$classifier$`beta-binomial`$data$id
x = readRDS("./fit_msk_met/P-0000555-T01-IM3_0.9.rds")
TAPACLOTH::plot_test(x,x$classifier$`beta-binomial`$data$id[1],"beta-binomial")
x = readRDS("./fit_msk_met/P-0007160-T01-IM5_0.9.rds")
TAPACLOTH::plot_test(x,x$classifier$`beta-binomial`$data$id[1],"beta-binomial")
x$classifier$`beta-binomial`$data$id
TAPACLOTH::plot_test(x,x$classifier$`beta-binomial`$data$id[2],"beta-binomial")
x = readRDS("./fit_msk_met/P-0007400-T01-IM5_0.9.rds")
TAPACLOTH::plot_test(x,x$classifier$`beta-binomial`$data$id[2],"beta-binomial")
TAPACLOTH::plot_test(x,x$classifier$`beta-binomial`$data$id[1],"beta-binomial")
setwd("~/Documents/GitHub/TAPACLOTH/")
devtools::load_all()
x = init(example_data$data, example_data$sample, example_data$purity)
x
stopifnot(inherits(x, "TAPACLOTH"))
# Prepare data for BMix
input = data.frame(successes = get_data(x) %>% pull(NV),
trials = get_data(x) %>% pull(DP))
fit = BMix::bmixfit(input, K.Binomials = 1:3, K.BetaBinomials = 0)
fit
n_binomials = fit$K["B"]
peaks = sort(fit$B.params)
purity_bmix = purity_from_fit(
n_binomials = n_binomials,
peaks = peaks,
purity = get_purity(x),
eps = eps
)
eps=0.01
purity_bmix = purity_from_fit(
n_binomials = n_binomials,
peaks = peaks,
purity = get_purity(x),
eps = eps
)
purity_bmix
n_binomials
fit = BMix::bmixfit(input, K.Binomials = 1, K.BetaBinomials = 0)
n_binomials = fit$K["B"]
n_binomials
peaks = sort(fit$B.params)
peaks
peaks[1]
