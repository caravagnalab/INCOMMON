})
x_map = median(x_rep)
purity_map = median(purity_rep)
bayes_p_x = bayesian_p_value(posterior_rep = x_rep, prior_rep = x_prior_rep, prior_type = 'gamma')
bayes_p_purity = bayesian_p_value(posterior_rep = purity_rep, prior_rep = purity_prior_rep, prior_type = 'beta')
post_pred_DP = posterior_predictive_p_value(x = x, posterior_rep = N_rep, observed_quantity = 'DP')
post_pred_NV = posterior_predictive_p_value(x = x, posterior_rep = n_rep, observed_quantity = 'NV')
ppois = plot_poisson_model(x = x, sample = sample, N_rep = N_rep, km_rep = km_rep, km_map = km_map, purity_map = purity_map, x_map = x_map,  post_pred_DP = post_pred_DP, k_max = k_max)
px = plot_x_check(posterior_rep = x_rep, prior_rep = x_prior_rep, bayes_p = bayes_p_x)
ppi = plot_purity_check(posterior_rep = purity_rep, prior_rep = purity_prior_rep, bayes_p = bayes_p_purity)
p_x_pi = patchwork::wrap_plots(px, ppi, design = 'A\nB', guides = 'collect')&
ggplot2::theme(legend.position = 'bottom')
pbin = plot_binomial_model(x = x, n_rep = n_rep, km_rep = km_rep, post_pred_NV = post_pred_NV)
pkmprior = plot_prior_k_m(priors_k_m = priors_k_m, x = x, k_max = k_max)
pkmpost = plot_posterior_k_m(x = x, M = , z_km = z_km)
ppois
px = plot_x_check(posterior_rep = x_rep, prior_rep = x_prior_rep, bayes_p = bayes_p_x)
px
ppi
p_x_pi
pbin = plot_binomial_model(x = x, n_rep = n_rep, km_rep = km_rep, post_pred_NV = post_pred_NV)
post_pred_NV
M
what = input(x)
what
what = lapply(1:nrow(what), function(i){
dplyr::tibble(
N_rep = n_rep[,i],
gene = what[i,]$gene,
id = paste(what[i,]$gene, what[i,]$NV, what[i,]$DP, sep = ':'),
NV =  what[i,]$NV,
DP =  what[i,]$DP,
k = km_rep[[i]]$k,
m = km_rep[[i]]$m
)
}) %>% do.call(rbind, .)
input(x)
test = what %>%
dplyr::select(id, NV) %>%
unique()
test
test$p.value = post_pred_NV
test_set = readRDS('./results/pcawg_hmf_test_set.rds')
test_set
x = subset_sample(x = input, sample_list = samples[1])
x
x = subset_sample(x = input, sample_list = samples[2])
x
sample = samples(x)
sample
M = input(x) %>% nrow()
N = input(x)$DP
n = input(x)$NV
purity_mean = purity(x = x, sample = sample)
tumor_type = input(x) %>% dplyr::pull(tumor_type) %>% unique()
priors_k_m_sample = get_stan_input_priors(x = x, N_mutations = M, priors = priors_k_m, k_max = k_max)
priors_x_sample = priors_x %>% filter(tumor_type == !!tumor_type)
if(nrow(priors_x_sample)==0){
priors_x_sample = priors_x %>% filter(tumor_type == 'PANCA')
}
data = list(
M = M,
N = N,
n = n,
k_max = k_max,
purity_mean = purity_mean,
purity_error = purity_error,
alpha_x = priors_x_sample$alpha_x,
beta_x = priors_x_sample$beta_x,
alpha_k_m = priors_k_m_sample
)
model = get_stan_model()
fit = model$sample(
data = data,
seed = 1992,
iter_warmup = iter_warmup,
iter_sampling = iter_sampling,
chains = num_chains,
parallel_chains = num_cores,
)
k_m_table = expand.grid(k = 1:k_max, m = 1:k_max) %>%
dplyr::as_tibble() %>%
dplyr::filter(m <= k) %>% dplyr::arrange(k, m)
N_rep = fit$draws(variables = 'N_rep') %>% array(dim = c(num_chains * iter_sampling, M))
n_rep = fit$draws(variables = 'n_rep') %>% array(dim = c(num_chains * iter_sampling, M))
x_rep = fit$draws(variables = 'x') %>% array()
x_prior_rep = fit$draws(variables = 'x_rep') %>% array()
purity_rep = fit$draws(variables = 'purity') %>% array()
purity_prior_rep = fit$draws(variables = 'purity_rep') %>% array()
km_idx = fit$draws(variables = 'km_idx') %>% array(dim = c(num_chains * iter_sampling, M))
km_rep = lapply(1:M, function(i){
lapply(1:length(km_idx[,i]), function(j){
k_m_table[km_idx[j,i],]
}) %>% do.call(rbind, .)
})
z_km = fit$summary(variables = 'z_km')
z_km = lapply(1:M, function(i){
z_km %>%
dplyr::filter(grepl(paste0('z_km\\[',i,','), variable)) %>%
dplyr::bind_cols(k_m_table) %>%
dplyr::select(k, m, median) %>%
dplyr::rename(z_km = median)
})
km_map = lapply(km_rep, function(x){
what = x %>% table() %>% dplyr::as_tibble() %>% dplyr::mutate(k = as.integer(k), m = as.integer(m))
dplyr::arrange(what, dplyr::desc(n)) %>% dplyr::slice_head(n=1) %>% dplyr::select(-n)
})
x_map = median(x_rep)
purity_map = median(purity_rep)
bayes_p_x = bayesian_p_value(posterior_rep = x_rep, prior_rep = x_prior_rep, prior_type = 'gamma')
bayes_p_purity = bayesian_p_value(posterior_rep = purity_rep, prior_rep = purity_prior_rep, prior_type = 'beta')
post_pred_DP = posterior_predictive_p_value(x = x, posterior_rep = N_rep, observed_quantity = 'DP')
post_pred_NV = posterior_predictive_p_value(x = x, posterior_rep = n_rep, observed_quantity = 'NV')
ppois = plot_poisson_model(x = x, sample = sample, N_rep = N_rep, km_rep = km_rep, km_map = km_map, purity_map = purity_map, x_map = x_map,  post_pred_DP = post_pred_DP, k_max = k_max)
ppois
px = plot_x_check(posterior_rep = x_rep, prior_rep = x_prior_rep, bayes_p = bayes_p_x)
ppi = plot_purity_check(posterior_rep = purity_rep, prior_rep = purity_prior_rep, bayes_p = bayes_p_purity)
p_x_pi = patchwork::wrap_plots(px, ppi, design = 'A\nB', guides = 'collect')&
ggplot2::theme(legend.position = 'bottom')
pbin = plot_binomial_model(x = x, n_rep = n_rep, km_rep = km_rep, post_pred_NV = post_pred_NV)
what = input(x)
what = lapply(1:nrow(what), function(i){
dplyr::tibble(
N_rep = n_rep[,i],
gene = what[i,]$gene,
id = paste(what[i,]$gene, what[i,]$NV, what[i,]$DP, sep = ':'),
NV =  what[i,]$NV,
DP =  what[i,]$DP,
k = km_rep[[i]]$k,
m = km_rep[[i]]$m
)
}) %>% do.call(rbind, .)
what %>%
dplyr::select(id, NV)
input(x) %>%
dplyr::select(id, NV)
input(x) %>%
dplyr::mutate(id = paste(what[i,]$gene, what[i,]$NV, what[i,]$DP, sep = ':')) %>%
dplyr::select(id, NV)
test = input(x) %>%
dplyr::mutate(id = paste(gene, NV, DP, sep = ':')) %>%
dplyr::select(id, NV) %>%
unique()
test
test = input(x) %>%
dplyr::mutate(id = paste(gene, NV, DP, sep = ':')) %>%
dplyr::select(id, NV)
test
test$p.value = post_pred_NV
test = test %>% dplyr::mutate(test = ifelse(p.value > .05, 'PASS', 'FAIL'))
what %>%
ggplot2::ggplot()+
ggplot2::geom_histogram(
ggplot2::aes(
x = N_rep,
),
fill = 'steelblue',
alpha = 0.8,
binwidth = 1
) +
ggplot2::geom_vline(
# data = what %>%
#   dplyr::select(id, NV, DP) %>%
#   unique() %>%
#   tidyr::pivot_longer(
#     cols = c('NV', 'DP'),
#     names_to = 'variable',
#     values_to = 'value'
#     ),
data = test,
ggplot2::aes(xintercept = NV, color = test, group = id))+
ggplot2::scale_color_manual(values = c('PASS' = 'forestgreen', 'FAIL' = 'firebrick'))+
my_ggplot_theme()+
ggplot2::theme(
panel.grid = ggplot2::element_blank(),
axis.text.y = ggplot2::element_blank(),
axis.ticks.y.left = ggplot2::element_blank(),
strip.text.y.left = ggplot2::element_text(angle = 0)
)+
ggplot2::labs(
y = '',
x = 'NV (draws)',
fill = 'k:m',
color = 'Posterior Predictive test'
)+
ggplot2::facet_wrap(~id, ncol = 1, strip.position = 'left')
devtools::load_all('~/Documents/GitHub/INCOMMON/')
input(x)
ppois = plot_poisson_model(x = x, sample = sample, N_rep = N_rep, km_rep = km_rep, km_map = km_map, purity_map = purity_map, x_map = x_map,  post_pred_DP = post_pred_DP, k_max = k_max)
px = plot_x_check(posterior_rep = x_rep, prior_rep = x_prior_rep, bayes_p = bayes_p_x)
ppi = plot_purity_check(posterior_rep = purity_rep, prior_rep = purity_prior_rep, bayes_p = bayes_p_purity)
p_x_pi = patchwork::wrap_plots(px, ppi, design = 'A\nB', guides = 'collect')&
ggplot2::theme(legend.position = 'bottom')
pbin = plot_binomial_model(x = x, n_rep = n_rep, km_rep = km_rep, post_pred_NV = post_pred_NV)
pkmprior = plot_prior_k_m(priors_k_m = priors_k_m, x = x, k_max = k_max)
pkmpost = plot_posterior_k_m(x = x, M = , z_km = z_km)
plot_report = patchwork::wrap_plots(
ppois, p_x_pi, pkmprior, pkmpost, pbin,
design = 'AAABBB\nCCDDEE\nCCDDEE'
) +
patchwork::plot_annotation(
title = paste0(sample),
subtitle = paste0(tumor_type, '; M = ', M, ' mutations'))
reports_dir
sample
ggplot2::ggsave(
plot = plot_report,
filename = paste0(reports_dir,'/', sample, '.pdf'),
width = 10,
height = 12
)
M
(M/12)*12
(12/10)*M
ggplot2::ggsave(
plot = plot_report,
filename = paste0(reports_dir,'/', sample, '.pdf'),
width = 10,
height = (12/10)*M
)
ggplot2::ggsave(
plot = plot_report,
filename = paste0(reports_dir,'/', sample, '.pdf'),
width = 10,
height = (12/10)*M, limitsize = FALSE
)
ggplot2::ggsave(
plot = plot_report,
filename = paste0(reports_dir,'/', sample, '.pdf'),
width = 10*M,
height = (12/10)*M, limitsize = FALSE
)
12/10
(12/10)*M
10*M
ggplot2::ggsave(
plot = plot_report,
filename = paste0(reports_dir,'/', sample, '.pdf'),
width = M,
height = (12/10)*M, limitsize = FALSE
)
ggplot2::ggsave(
plot = plot_report,
filename = paste0(reports_dir,'/', sample, '.pdf'),
width = M,
height = (12/10)*M
)
12/10
ggplot2::ggsave(
plot = plot_report,
filename = paste0(reports_dir,'/', sample, '.pdf'),
width = 10,
height = Mmax(24, min(8, (12/10)*M))
)
ggplot2::ggsave(
plot = plot_report,
filename = paste0(reports_dir,'/', sample, '.pdf'),
width = 10,
height = max(24, min(8, (12/10)*M))
)
ggplot2::ggsave(
plot = plot_report,
filename = paste0(reports_dir,'/', sample, '.pdf'),
width = 10,
height = max(36, min(8, (12/10)*M))
)
paste0('AAABBB',rep('\nCCDDEE', 2*(M/8))
paste0('AAABBB',rep('\nCCDDEE', 2*(M/8)))
rep('\nCCDDEE', 2*(M/8))
paste0(rep('\nCCDDEE', 2*(M/8)), collapse = '')
paste0('AAABBB',paste0(rep('\nCCDDEE', 2*(M/8)), collapse = ''))
plot_report = patchwork::wrap_plots(
ppois, p_x_pi, pkmprior, pkmpost, pbin,
design = paste0('AAABBB',paste0(rep('\nCCDDEE', 2*(M/8)), collapse = ''))
) +
patchwork::plot_annotation(
title = paste0(sample),
subtitle = paste0(tumor_type, '; M = ', M, ' mutations'))
ggplot2::ggsave(
plot = plot_report,
filename = paste0(reports_dir,'/', sample, '.pdf'),
width = 10,
height = max(36, min(8, (12/10)*M))
)
ggplot2::ggsave(
plot = plot_report,
filename = paste0(reports_dir,'/', sample, '.pdf'),
width = 10,
height = min(8, (12/10)*M), limitsize = T
)
(12/10)*M)
(12/10)*M
ggplot2::ggsave(
plot = plot_report,
filename = paste0(reports_dir,'/', sample, '.pdf'),
width = 10,
height = max(50, min(8, (12/10)*M))
)
max(50, min(8, (12/10)*M))
ggplot2::ggsave(
plot = plot_report,
filename = paste0(reports_dir,'/', sample, '.pdf'),
width = 10,
height = max(50, min(8, (12/10)*M)), limitsize = T
)
ggplot2::ggsave(
plot = plot_report,
filename = paste0(reports_dir,'/', sample, '.pdf'),
width = 10,
height = max(50, min(8, (12/10)*M)), limitsize = F
)
library(tidyverse)
test_set = readRDS('./results/pcawg_hmf_test_set.rds')
genomic_data = test_set %>%
# filter(sample %in% unique(test_set$sample)) %>%
filter(!is.na(multiplicity), !is.na(ploidy)) %>%
select(sample, chr, from, to, ref, alt, NV, DP, VAF, gene, multiplicity, ploidy) %>%
mutate(
NV = as.integer(NV),
DP = as.integer(DP)
)
ok_samples = genomic_data %>%
group_by(sample) %>%
reframe(n=n()) %>%
filter(n > 2) %>%
pull(sample) %>% unique()
clinical_data = test_set %>%
filter(sample %in% ok_samples) %>%
mutate(
purity = case_when(
purity >= 1 ~ 1-1e-2,
purity <= 0 ~ 1e-2,
TRUE ~ purity
)) %>%
select(sample, purity, tumor_type) %>%
# select(
#   -c(colnames(genomic_data), IMPACT, id, type),
#   sample
# ) %>%
unique() %>%
# rename(tumor_type = ICGC_sample) %>%
# convert_pcawg_tumor_types() %>%
mutate(purity = ifelse(purity == 1, 1-1e-3, purity)) %>%
filter(!is.na(tumor_type))
devtools::load_all('~/Documents/GitHub/INCOMMON/')
priors_x = readRDS('./results/training_set_overall_x_prior.rds')
input = init(
genomic_data = genomic_data,
clinical_data = clinical_data,
gene_roles = cancer_gene_census
)
samples = setdiff(
samples(input),
list.files('./results/INCOMMON_fits/test_set/') %>% gsub('.rds', '', .)
)
samples
x = subset_sample(x = input, sample_list = samples[2])
priors_k_m = readRDS('./results/dirichlet_prior_parameters.rds') %>%
rename(k = ploidy, m = multiplicity) %>%
mutate(k = as.integer(k), m = as.integer(m)) %>%
filter(which_count == 'pseudo_count') %>% select(-c(which_count,pseudo_N,p))
priors_k_m$n = priors_k_m$n*10
out = classify(
x = x,
k_max = 8,
priors_k_m = priors_k_m,
priors_x = priors_x,
purity_error = 0.05,
num_cores = 4,
iter_warmup = 1000,
iter_sampling = 2000,
num_chains = 4,
results_dir = '~/Dropbox/2023.TAPACLOTH/Revisions/clean/results/INCOMMON_fits/test_set',
generate_report_plot = TRUE,
reports_dir = '~/Dropbox/2023.TAPACLOTH/Revisions/clean/figures/Other/fit_reports/test_set',
stan_fit_dump = TRUE,
stan_fit_dir = '~/Dropbox/2023.TAPACLOTH/Revisions/clean/results/stan_fits'
)
library(tidyverse)
test_set = readRDS('./results/pcawg_hmf_test_set.rds')
genomic_data = test_set %>%
# filter(sample %in% unique(test_set$sample)) %>%
filter(!is.na(multiplicity), !is.na(ploidy)) %>%
select(sample, chr, from, to, ref, alt, NV, DP, VAF, gene, multiplicity, ploidy) %>%
mutate(
NV = as.integer(NV),
DP = as.integer(DP)
)
ok_samples = genomic_data %>%
group_by(sample) %>%
reframe(n=n()) %>%
filter(n > 2) %>%
pull(sample) %>% unique()
clinical_data = test_set %>%
filter(sample %in% ok_samples) %>%
mutate(
purity = case_when(
purity >= 1 ~ 1-1e-2,
purity <= 0 ~ 1e-2,
TRUE ~ purity
)) %>%
select(sample, purity, tumor_type) %>%
# select(
#   -c(colnames(genomic_data), IMPACT, id, type),
#   sample
# ) %>%
unique() %>%
# rename(tumor_type = ICGC_sample) %>%
# convert_pcawg_tumor_types() %>%
mutate(purity = ifelse(purity == 1, 1-1e-3, purity)) %>%
filter(!is.na(tumor_type))
devtools::load_all('~/Documents/GitHub/INCOMMON/')
priors_x = readRDS('./results/training_set_overall_x_prior.rds')
input = init(
genomic_data = genomic_data,
clinical_data = clinical_data,
gene_roles = cancer_gene_census
)
samples = setdiff(
samples(input),
list.files('./results/INCOMMON_fits/test_set/') %>% gsub('.rds', '', .)
)
x = subset_sample(x = input, sample_list = samples)
x
priors_k_m = readRDS('./results/dirichlet_prior_parameters.rds') %>%
rename(k = ploidy, m = multiplicity) %>%
mutate(k = as.integer(k), m = as.integer(m)) %>%
filter(which_count == 'pseudo_count') %>% select(-c(which_count,pseudo_N,p))
priors_k_m$n = priors_k_m$n*10
out = classify(
x = x,
k_max = 8,
priors_k_m = priors_k_m,
priors_x = priors_x,
purity_error = 0.05,
num_cores = 4,
iter_warmup = 1000,
iter_sampling = 2000,
num_chains = 4,
results_dir = '~/Dropbox/2023.TAPACLOTH/Revisions/clean/results/INCOMMON_fits/test_set',
generate_report_plot = TRUE,
reports_dir = '~/Dropbox/2023.TAPACLOTH/Revisions/clean/figures/Other/fit_reports/test_set',
stan_fit_dump = TRUE,
stan_fit_dir = '~/Dropbox/2023.TAPACLOTH/Revisions/clean/results/stan_fits'
)
devtools::load_all('~/Documents/GitHub/INCOMMON/')
library(tidyverse)
test_set = readRDS('./results/pcawg_hmf_test_set.rds')
genomic_data = test_set %>%
# filter(sample %in% unique(test_set$sample)) %>%
filter(!is.na(multiplicity), !is.na(ploidy)) %>%
select(sample, chr, from, to, ref, alt, NV, DP, VAF, gene, multiplicity, ploidy) %>%
mutate(
NV = as.integer(NV),
DP = as.integer(DP)
)
ok_samples = genomic_data %>%
group_by(sample) %>%
reframe(n=n()) %>%
filter(n > 2) %>%
pull(sample) %>% unique()
clinical_data = test_set %>%
filter(sample %in% ok_samples) %>%
mutate(
purity = case_when(
purity >= 1 ~ 1-1e-2,
purity <= 0 ~ 1e-2,
TRUE ~ purity
)) %>%
select(sample, purity, tumor_type) %>%
# select(
#   -c(colnames(genomic_data), IMPACT, id, type),
#   sample
# ) %>%
unique() %>%
# rename(tumor_type = ICGC_sample) %>%
# convert_pcawg_tumor_types() %>%
mutate(purity = ifelse(purity == 1, 1-1e-3, purity)) %>%
filter(!is.na(tumor_type))
devtools::load_all('~/Documents/GitHub/INCOMMON/')
priors_x = readRDS('./results/training_set_overall_x_prior.rds')
input = init(
genomic_data = genomic_data,
clinical_data = clinical_data,
gene_roles = cancer_gene_census
)
samples = setdiff(
samples(input),
list.files('./results/INCOMMON_fits/test_set/') %>% gsub('.rds', '', .)
)
x = subset_sample(x = input, sample_list = samples)
priors_k_m = readRDS('./results/dirichlet_prior_parameters.rds') %>%
rename(k = ploidy, m = multiplicity) %>%
mutate(k = as.integer(k), m = as.integer(m)) %>%
filter(which_count == 'pseudo_count') %>% select(-c(which_count,pseudo_N,p))
priors_k_m$n = priors_k_m$n*10
out = classify(
x = x,
k_max = 8,
priors_k_m = priors_k_m,
priors_x = priors_x,
purity_error = 0.05,
num_cores = 4,
iter_warmup = 1000,
iter_sampling = 2000,
num_chains = 4,
results_dir = '~/Dropbox/2023.TAPACLOTH/Revisions/clean/results/INCOMMON_fits/test_set',
generate_report_plot = TRUE,
reports_dir = '~/Dropbox/2023.TAPACLOTH/Revisions/clean/figures/Other/fit_reports/test_set',
stan_fit_dump = TRUE,
stan_fit_dir = '~/Dropbox/2023.TAPACLOTH/Revisions/clean/results/stan_fits'
)
