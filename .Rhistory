plot_test(x, model)[[3]]
gene_role_specific
model = "beta-binomial"
x = run_classifier(
x = input,
cutoff = cutoff,
model = "beta-binomial",
rho = 0.01,
karyotypes = c("1:0", "1:1", "2:0", "2:1", "2:2"),
gene_role_specific = gene_role_specific,
assign_extremes = TRUE
)
plot_test(x, model)[[3]]
gene_role_specific
gene_role_specific = FALSE
model = "beta-binomial"
x = run_classifier(
x = input,
cutoff = cutoff,
model = "beta-binomial",
rho = 0.01,
karyotypes = c("1:0", "1:1", "2:0", "2:1", "2:2"),
gene_role_specific = gene_role_specific,
assign_extremes = TRUE
)
plot_test(x, model)[[3]]
s = "P-0001782-T01-IM3"
sample_metadata = passed %>% filter(sample == s)
library(tidyverse)
devtools::load_all("~/Documents/GitHub/TAPACLOTH/")
meta_data = readr::read_tsv("./data/msk_met_2021_clinical_data_ALL_SAMPLE.tsv")
# meta_data %>% colnames() %>% sort()
# meta_data %>% pull(`Cancer Type`) %>% table()
data = readRDS("./data/msk_met_data.rds")
# saveRDS(passed, file = "./data/high_purity_metadata.rds")
passed = readRDS(file = "./data/high_purity_metadata.rds")
gene_role_specific = TRUE
cutoff = 0.3
data %>%
filter(sample == s) %>%
select(-sample)
input = init(
mutations = data %>%
filter(sample == s) %>%
select(-sample) %>%
# filter(gene %in% principal_genes$Gene) %>%
unique(),
sample = s,
purity = sample_metadata$purity
)
sample_metadata = passed %>% filter(sample == s)
sample_metadata
input = init(
mutations = data %>%
filter(sample == s) %>%
select(-sample) %>%
# filter(gene %in% principal_genes$Gene) %>%
unique(),
sample = s,
purity = sample_metadata$purity
)
input$data = input$data %>%
mutate(gene_role = ifelse(grepl("TSG",gene_role), "TSG", "oncogene"))
model = "beta-binomial"
x = run_classifier(
x = input,
cutoff = cutoff,
model = "beta-binomial",
rho = 0.01,
karyotypes = c("1:0", "1:1", "2:0", "2:1", "2:2"),
gene_role_specific = gene_role_specific,
assign_extremes = TRUE
)
x
input
x = input
model = model %>% tolower()
stopifnot(model%in% c("binomial", "beta-binomial"))
# Output
test = x
if (!("classifier" %in% names(test)))
test$classifier = list()
cli::cli_h1(
"TAPACLOTH {.field {model}} clonality/Zygosity testing for sample {.field {x$sample}}"
)
cat("\n")
cli::cli_alert_info("Computing null model distributions and p-values.")
x = idify(x)
tests = lapply(x$data$id, function(id) {
print(id)
# If classifying with a bias towards gene role, adapt karyotypes list accordingly.
k_reduced = karyotypes
if(gene_role_specific){
if(x %>% get_gene_role(id) == "TSG") k_reduced = c("1:0","1:1","2:0")
if(x %>% get_gene_role(id) == "oncogene") k_reduced = c("1:1","2:1","2:2")
}
# Compute likelihoods
binomial_test(
test = get_NV(x, id),
DP = get_DP(x, id),
purity = get_purity(x),
cutoff = cutoff,
model = model,
rho = rho,
karyotypes = k_reduced,
assign_extremes
)
}) %>%
do.call(rbind, .)
id = "chr1:27097680:27097680:G:T"
karyotypes
karyotypes = c("1:0", "1:1", "2:0", "2:1", "2:2")
# If classifying with a bias towards gene role, adapt karyotypes list accordingly.
k_reduced = karyotypes
gene_role_specific
x %>% get_gene_role(id)
x %>% get_gene_role(id) == "TSG"
x %>% get_gene_role(id) == "oncogene"
if(gene_role_specific){
if(x %>% get_gene_role(id) == "TSG") k_reduced = c("1:0","1:1","2:0")
if(x %>% get_gene_role(id) == "oncogene") k_reduced = c("1:1","2:1","2:2")
}
k_reduced
x[x$id==id,
]
x[x$id==id,]
x$data[x$data$id==id,]
# Compute likelihoods
binomial_test(
test = get_NV(x, id),
DP = get_DP(x, id),
purity = get_purity(x),
cutoff = cutoff,
model = model,
rho = rho,
karyotypes = k_reduced,
assign_extremes
)
tests = lapply(x$data$id, function(id) {
print(id)
# If classifying with a bias towards gene role, adapt karyotypes list accordingly.
k_reduced = karyotypes
if(gene_role_specific){
if(x %>% get_gene_role(id) == "TSG") k_reduced = c("1:0","1:1","2:0")
if(x %>% get_gene_role(id) == "oncogene") k_reduced = c("1:1","2:1","2:2")
}
# Compute likelihoods
binomial_test(
test = get_NV(x, id),
DP = get_DP(x, id),
purity = get_purity(x),
cutoff = cutoff,
model = model,
rho = rho,
karyotypes = k_reduced,
assign_extremes
)
}) %>%
do.call(rbind, .)
rho = 0.01
tests = lapply(x$data$id, function(id) {
print(id)
# If classifying with a bias towards gene role, adapt karyotypes list accordingly.
k_reduced = karyotypes
if(gene_role_specific){
if(x %>% get_gene_role(id) == "TSG") k_reduced = c("1:0","1:1","2:0")
if(x %>% get_gene_role(id) == "oncogene") k_reduced = c("1:1","2:1","2:2")
}
# Compute likelihoods
binomial_test(
test = get_NV(x, id),
DP = get_DP(x, id),
purity = get_purity(x),
cutoff = cutoff,
model = model,
rho = rho,
karyotypes = k_reduced,
assign_extremes
)
}) %>%
do.call(rbind, .)
assign_extremes  =TRUE
tests = lapply(x$data$id, function(id) {
print(id)
# If classifying with a bias towards gene role, adapt karyotypes list accordingly.
k_reduced = karyotypes
if(gene_role_specific){
if(x %>% get_gene_role(id) == "TSG") k_reduced = c("1:0","1:1","2:0")
if(x %>% get_gene_role(id) == "oncogene") k_reduced = c("1:1","2:1","2:2")
}
# Compute likelihoods
binomial_test(
test = get_NV(x, id),
DP = get_DP(x, id),
purity = get_purity(x),
cutoff = cutoff,
model = model,
rho = rho,
karyotypes = k_reduced,
assign_extremes
)
}) %>%
do.call(rbind, .)
id = "chr9:21970913:21970913:G:T"
# If classifying with a bias towards gene role, adapt karyotypes list accordingly.
k_reduced = karyotypes
gene_role_specific
x %>% get_gene_role(id)
x$data[x$data$id==id,]
x %>%
dplyr::filter(id==!!id)
x$data %>%
dplyr::filter(id==!!id)
x$data %>%
dplyr::filter(id==!!id) %>% nrow() >1
cli_alert_warning(text = "More than one mutation mapped to same position: {.field {x$data %>%
dplyr::filter(id==!!id) }}")
if(x$data %>%
dplyr::filter(id==!!id) %>%
nrow() > 1){
cli_alert_warning(text = "More than one mutation mapped to same position")
x$data %>%
dplyr::filter(id==!!id)
}
cli_alert_warning(text = "More than one mutation mapped to same position" )
x$data %>%
dplyr::filter(id==!!id)
if(x$data %>%
dplyr::filter(id==!!id) %>%
nrow() > 1){
cli_alert_warning(text = "More than one mutation mapped to same position: ")
x$data %>%
dplyr::filter(id==!!id)
}
cli_alert_warning(text = "Keeping first one (consider going back to input data)")
x$data
which(x$data$id==!!id)
which(x$data$id==id)
which(x$data$id==id)[1]
w = which(x$data$id==id)
w
x$data[w,]
x$data[w,] = x$data[w[1],]
x$data[w,]
x$data[w[1],]
cli_alert_warning(text = "More than one mutation mapped at: {.field{id}}")
cli_alert_warning(text = "More than one mutation mapped at: {.field{id}}")
cli_alert_warning(text = "More than one mutation mapped at: {.field {id}}")
x %>% get_gene_role(id)
w = which(x$data$id==id)
w
which(x$data$id==id)
w[2:]
w[1:]
w[2:length(w)]
x$data[w[2:length(w)]]
x$data[w[2:length(w)],]
w[2:length(w)]
x
x = input
x = idify(x)
x$data[w[2:length(w)],]
x$data[-w[2:length(w)],]
x$data = x$data[-w[2:length(w)],]
x %>% get_gene_role(id) == "TSG"
devtools::load_all("~/Documents/GitHub/TAPACLOTH/")
s = "P-0001782-T01-IM3"
sample_metadata = passed %>% filter(sample == s)
input = init(
mutations = data %>%
filter(sample == s) %>%
select(-sample) %>%
# filter(gene %in% principal_genes$Gene) %>%
unique(),
sample = s,
purity = sample_metadata$purity
)
input$data = input$data %>%
mutate(gene_role = ifelse(grepl("TSG",gene_role), "TSG", "oncogene"))
gene_role_specific = FALSE
model = "beta-binomial"
x = run_classifier(
x = input,
cutoff = cutoff,
model = "beta-binomial",
rho = 0.01,
karyotypes = c("1:0", "1:1", "2:0", "2:1", "2:2"),
gene_role_specific = gene_role_specific,
assign_extremes = TRUE
)
x
cli::cli_alert_info("Computing likelihoods and uncertainties.")
devtools::load_all("~/Documents/GitHub/TAPACLOTH/")
s = "P-0001782-T01-IM3"
sample_metadata = passed %>% filter(sample == s)
input = init(
mutations = data %>%
filter(sample == s) %>%
select(-sample) %>%
# filter(gene %in% principal_genes$Gene) %>%
unique(),
sample = s,
purity = sample_metadata$purity
)
input$data = input$data %>%
mutate(gene_role = ifelse(grepl("TSG",gene_role), "TSG", "oncogene"))
gene_role_specific = FALSE
model = "beta-binomial"
x = run_classifier(
x = input,
cutoff = cutoff,
model = "beta-binomial",
rho = 0.01,
karyotypes = c("1:0", "1:1", "2:0", "2:1", "2:2"),
gene_role_specific = gene_role_specific,
assign_extremes = TRUE
)
plot_test(x, model)[[3]]
plot_test(x, model)[[7]]
meta_data = readr::read_tsv("./data/msk_met_2021_clinical_data_ALL_SAMPLE.tsv")
# meta_data %>% colnames() %>% sort()
# meta_data %>% pull(`Cancer Type`) %>% table()
data = readRDS("./data/msk_met_data.rds")
# saveRDS(passed, file = "./data/high_purity_metadata.rds")
passed = readRDS(file = "./data/high_purity_metadata.rds")
gene_role_specific = TRUE
cutoff = 0.3
x = lapply(passed$sample, function(s){
sample_metadata = passed %>% filter(sample == s)
input = init(
mutations = data %>%
filter(sample == s) %>%
select(-sample) %>%
# filter(gene %in% principal_genes$Gene) %>%
unique(),
sample = s,
purity = sample_metadata$purity
)
input$data = input$data %>%
mutate(gene_role = ifelse(grepl("TSG",gene_role), "TSG", "oncogene"))
model = "beta-binomial"
x = run_classifier(
x = input,
cutoff = cutoff,
model = "beta-binomial",
rho = 0.01,
karyotypes = c("1:0", "1:1", "2:0", "2:1", "2:2"),
gene_role_specific = gene_role_specific,
assign_extremes = TRUE
)
# plot_test(x, model = "beta-binomial") %>%
#   print()
x$classifier[[model]]$data = x$classifier[[model]]$data %>%
# mutate(ttype = ifelse(grepl(sample_metadata$ttype, pattern = "Lung Cancer"), "Lung Cancer", "Colorectal Cancer"))
mutate(ttype = sample_metadata$ttype)
saveRDS(
x,
paste0(
"./fits/fit_msk_met_pancancer/",
s,
"_",
cutoff,
"_",
ifelse(gene_role_specific, "biased", "unbiased"),
".rds"
)
)
x %>% get_classifier() %>% get_data()
}) %>% do.call(rbind,.)
x
x = lapply(passed$sample[1:2], function(s){
sample_metadata = passed %>% filter(sample == s)
input = init(
mutations = data %>%
filter(sample == s) %>%
select(-sample) %>%
# filter(gene %in% principal_genes$Gene) %>%
unique(),
sample = s,
purity = sample_metadata$purity
)
input$data = input$data %>%
mutate(gene_role = ifelse(grepl("TSG",gene_role), "TSG", "oncogene"))
model = "beta-binomial"
x = run_classifier(
x = input,
cutoff = cutoff,
model = "beta-binomial",
rho = 0.01,
karyotypes = c("1:0", "1:1", "2:0", "2:1", "2:2"),
gene_role_specific = gene_role_specific,
assign_extremes = TRUE
)
# plot_test(x, model = "beta-binomial") %>%
#   print()
x$classifier[[model]]$data = x$classifier[[model]]$data %>%
# mutate(ttype = ifelse(grepl(sample_metadata$ttype, pattern = "Lung Cancer"), "Lung Cancer", "Colorectal Cancer"))
mutate(ttype = sample_metadata$ttype)
saveRDS(
x,
paste0(
"./fits/fit_msk_met_pancancer/",
s,
"_",
cutoff,
"_",
ifelse(gene_role_specific, "biased", "unbiased"),
".rds"
)
)
x %>% get_classifier() %>% get_data()
}) %>% do.call(rbind,.)
x
s
s = passed$sample[1]
sample_metadata = passed %>% filter(sample == s)
input = init(
mutations = data %>%
filter(sample == s) %>%
select(-sample) %>%
# filter(gene %in% principal_genes$Gene) %>%
unique(),
sample = s,
purity = sample_metadata$purity
)
input$data = input$data %>%
mutate(gene_role = ifelse(grepl("TSG",gene_role), "TSG", "oncogene"))
model = "beta-binomial"
x = run_classifier(
x = input,
cutoff = cutoff,
model = "beta-binomial",
rho = 0.01,
karyotypes = c("1:0", "1:1", "2:0", "2:1", "2:2"),
gene_role_specific = gene_role_specific,
assign_extremes = TRUE
)
x$classifier[[model]]$data = x$classifier[[model]]$data %>%
# mutate(ttype = ifelse(grepl(sample_metadata$ttype, pattern = "Lung Cancer"), "Lung Cancer", "Colorectal Cancer"))
mutate(ttype = sample_metadata$ttype)
x
x$classifier$`beta-binomial`$data$sample = s
x %>% get_classifier() %>% get_data()
x %>% get_classifier() %>% get_data() %>%
dplyr::select(sample, everything())
library(tidyverse)
devtools::load_all("~/Documents/GitHub/TAPACLOTH/")
meta_data = readr::read_tsv("./data/msk_met_2021_clinical_data_ALL_SAMPLE.tsv")
# meta_data %>% colnames() %>% sort()
# meta_data %>% pull(`Cancer Type`) %>% table()
data = readRDS("./data/msk_met_data.rds")
# saveRDS(passed, file = "./data/high_purity_metadata.rds")
passed = readRDS(file = "./data/high_purity_metadata.rds")
# pdf(
#   paste0(
#     "./fits/fit_msk_met_cr_lung_high_purity/fit_msk_met_cr_lung_high_purity_",
#     cutoff,
#     "_",
#     ifelse(gene_role_specific, "biased", "unbiased"),
#     ".pdf"
#   ))
for(bias in c(TRUE, FALSE)){
gene_role_specific = bias
cutoff = 0.3
x = lapply(passed$sample, function(s){
sample_metadata = passed %>% filter(sample == s)
input = init(
mutations = data %>%
filter(sample == s) %>%
select(-sample) %>%
# filter(gene %in% principal_genes$Gene) %>%
unique(),
sample = s,
purity = sample_metadata$purity
)
input$data = input$data %>%
mutate(gene_role = ifelse(grepl("TSG",gene_role), "TSG", "oncogene"))
model = "beta-binomial"
x = run_classifier(
x = input,
cutoff = cutoff,
model = "beta-binomial",
rho = 0.01,
karyotypes = c("1:0", "1:1", "2:0", "2:1", "2:2"),
gene_role_specific = gene_role_specific,
assign_extremes = TRUE
)
# plot_test(x, model = "beta-binomial") %>%
#   print()
x$classifier[[model]]$data = x$classifier[[model]]$data %>%
# mutate(ttype = ifelse(grepl(sample_metadata$ttype, pattern = "Lung Cancer"), "Lung Cancer", "Colorectal Cancer"))
mutate(ttype = sample_metadata$ttype)
saveRDS(
x,
paste0(
"./fits/fit_msk_met_pancancer/",
s,
"_",
cutoff,
"_",
ifelse(gene_role_specific, "biased", "unbiased"),
".rds"
)
)
x$classifier$`beta-binomial`$data$sample = s
x %>% get_classifier() %>% get_data() %>%
dplyr::select(sample, everything())
}) %>% do.call(rbind,.)
# saveRDS(x, file = "./data/cr_lung_aggregated.rds")
saveRDS(x, file = paste0("./data/pancancer_aggregated_",cutoff,"_",ifelse(gene_role_specific, "biased", "unbiased"),".rds"))
}
setwd("~/Documents/GitHub/TAPACLOTH/")
