peaks = sort(fit$BB.params["mu", ]) %>% as.double()
purity_bmix = purity_from_fit(n_binomials, peaks, sample_purity, eps)
n_binomials
peaks
get_purity(x)
purity_bmix = purity_from_fit(n_binomials = n_binomials,
peaks = peaks,
purity = get_purity(x),
eps = eps)
purity_bmix
get_purity(x)
plot_bmix = BMix::plot.bmix(fit, input)
plot_bmix
fit
# Prepare output
fit$data = input
fit$plot_bmix = BMix::plot.bmix(fit, fit$data)
fit$eps = eps
fit$purity = min(purity_bmix, 1) %>% round(2)
fit$purity
fit$reliability = ifelse(get_purity(x) == 0.0, NA, 1-sqrt(((sample_purity-fit$purity)/fit$purity)**2))
fit$reliability = ifelse(get_purity(x) == 0.0, NA, 1-sqrt(((get_purity(x)-fit$purity)/fit$purity)**2))
fit$reliability
devtools::load_all()
x = readRDS("./testdata.rds")
TAPACLOTH::estimate_purity(x)
x
test = TAPACLOTH::estimate_purity(x)
test$data
test$purity
x
model
model = "beta-binomial"
# Output
test = list()
class(test) = "TAPACLOTH"
stopifnot(model%in% c("binomial", "beta-binomial"))
inherits(x, "TAPACLOTH")
test = x
test
test$classifier = list()
class(test) = "TAPACLOTH"
test
test
x
# Output
test = list()
class(test) = "TAPACLOTH"
inherits(x, "TAPACLOTH")
test = x
test$purity_estimate = list()
class(test) = "TAPACLOTH"
test
test$purity_estimate
if ((model %>% tolower()) %in% c("binomial", "beta-binomial")) {
cli::cli_h1(
"TAPACLOTH {.field {model}} clonality/Zygosity testing for sample {.field {x$sample}}"
)
cat("\n")
cli::cli_alert_info("Computing null model distributions and p-values.")
if ((model %>% tolower()) %in% c("binomial", "beta-binomial")) {
cli::cli_h1(
"TAPACLOTH {.field {model}} clonality/Zygosity testing for sample {.field {x$sample}}"
)
cat("\n")
cli::cli_alert_info("Computing null model distributions and p-values.")
}
model = model %>% tolower()
model
# Output
test = list()
class(test) = "TAPACLOTH"
stopifnot(model %in% c("binomial", "beta-binomial"))
inherits(x, "TAPACLOTH")
test = x
test$purity_estimate = list()
class(test) = "TAPACLOTH"
test
test$purity_estimate
cli::cli_h1("TAPACLOTH purity estimate of sample {.field {get_sample(x)}} using {.field {model}} model")
# Prepare data for BMix
input = data.frame(successes = get_data(x) %>% pull(NV),
trials = get_data(x) %>% pull(DP))
input
fit = BMix::bmixfit(input, K.Binomials = 0, K.BetaBinomials = 1:3)
n_binomials = fit$K["BB"]
peaks = sort(fit$BB.params["mu", ]) %>% as.double()
purity_bmix = purity_from_fit(n_binomials = n_binomials,
peaks = peaks,
purity = get_purity(x),
eps = eps)
plot_bmix = BMix::plot.bmix(fit, input)
eps = 0.01
fit = BMix::bmixfit(input, K.Binomials = 0, K.BetaBinomials = 1:3)
n_binomials = fit$K["BB"]
peaks = sort(fit$BB.params["mu", ]) %>% as.double()
purity_bmix = purity_from_fit(n_binomials = n_binomials,
peaks = peaks,
purity = get_purity(x),
eps = eps)
plot_bmix = BMix::plot.bmix(fit, input)
fit$data = input
fit$plot_bmix = BMix::plot.bmix(fit, fit$data)
fit$eps = eps
fit$purity = min(purity_bmix, 1) %>% round(2)
fit$reliability = ifelse(get_purity(x) == 0.0, NA, 1-sqrt(((get_purity(x)-fit$purity)/fit$purity)**2))
test$purity_estimate = fit
class(test)
test$purity_estimate
test$purity_estimate$data
test$purity_estimate$purity
test$purity
test$purity_estimate$purity
x = test
x
"purity_estimate" %in% names(x)
names(x$purity_estimate)
x = readRDS("./testdata.rds")
model = model %>% tolower()
# Output
test = list()
class(test) = "TAPACLOTH"
stopifnot(model %in% c("binomial", "beta-binomial"))
if (inherits(x, "TAPACLOTH")) {
test = x
if(!("purity_estimate" %in% names(test)))
test$purity_estimate = list()
}
test = x
test$purity_estimate = list()
class(test) = "TAPACLOTH"
cli::cli_h1("TAPACLOTH purity estimate of sample {.field {get_sample(x)}} using {.field {model}} model")
# Prepare data for BMix
input = data.frame(successes = get_data(x) %>% pull(NV),
trials = get_data(x) %>% pull(DP))
# Return NA if NVs are less than 3
if (nrow(input) <= 3) {
cli::cli_alert("There are less than 3 SNVs: purity will not be estimated")
return(test)
}
# Fit data with a mixture of 3 Binomials or BetaBinomials
if (model == 'binomial') {
fit = BMix::bmixfit(input, K.Binomials = 1:3, K.BetaBinomials = 0)
n_binomials = fit$K["B"]
peaks = sort(fit$B.params)
purity_bmix = purity_from_fit(
n_binomials = n_binomials,
peaks = peaks,
purity = get_purity(x),
eps = eps
)
}
fit = BMix::bmixfit(input, K.Binomials = 0, K.BetaBinomials = 1:3)
n_binomials = fit$K["BB"]
peaks = sort(fit$BB.params["mu", ]) %>% as.double()
purity_bmix = purity_from_fit(n_binomials = n_binomials,
peaks = peaks,
purity = get_purity(x),
eps = eps)
plot_bmix = BMix::plot.bmix(fit, input)
test$purity_estimate
x = readRDS("./testdata.rds")
test = TAPACLOTH::estimate_purity(x)
x = readRDS("./testdata.rds")
model = model %>% tolower()
# Output
test = list()
class(test) = "TAPACLOTH"
stopifnot(model %in% c("binomial", "beta-binomial"))
inherits(x, "TAPACLOTH")
test = x
test$purity_estimate = list()
class(test) = "TAPACLOTH"
test
cli::cli_h1("TAPACLOTH purity estimate of sample {.field {get_sample(x)}} using {.field {model}} model")
# Prepare data for BMix
input = data.frame(successes = get_data(x) %>% pull(NV),
trials = get_data(x) %>% pull(DP))
# Return NA if NVs are less than 3
if (nrow(input) <= 3) {
cli::cli_alert("There are less than 3 SNVs: purity will not be estimated")
return(test)
}
# Fit data with a mixture of 3 Binomials or BetaBinomials
if (model == 'binomial') {
fit = BMix::bmixfit(input, K.Binomials = 1:3, K.BetaBinomials = 0)
n_binomials = fit$K["B"]
peaks = sort(fit$B.params)
purity_bmix = purity_from_fit(
n_binomials = n_binomials,
peaks = peaks,
purity = get_purity(x),
eps = eps
)
}
fit = BMix::bmixfit(input, K.Binomials = 0, K.BetaBinomials = 1:3)
n_binomials = fit$K["BB"]
peaks = sort(fit$BB.params["mu", ]) %>% as.double()
purity_bmix = purity_from_fit(n_binomials = n_binomials,
peaks = peaks,
purity = get_purity(x),
eps = eps)
plot_bmix = BMix::plot.bmix(fit, input)
fit$data = input
fit$plot_bmix = BMix::plot.bmix(fit, fit$data)
fit$eps = eps
fit$purity = min(purity_bmix, 1) %>% round(2)
fit$reliability = ifelse(get_purity(x) == 0.0, NA, 1-sqrt(((get_purity(x)-fit$purity)/fit$purity)**2))
test$purity_estimate
test$purity_estimate$`beta-binomial` = fit
test
devtools::load_all()
x = readRDS("./testdata.rds")
test = TAPACLOTH::estimate_purity(x)
x  = test
x
"purity_estimate" %in% names(x)
names(x$purity_estimate)
for(model in names(x$purity_estimate)){
cli::cli_rule(
paste(
crayon::bgMagenta(crayon::black("[ TAPACLOTH ] ")),
'Purity estimate using ',
crayon::bgYellow(crayon::black("[ BMix ] ")),
'with {.field {model}} model'
)
)
purity_per_sample(data)
}
names(x$purity_estimate)
model
cli::cli_rule(
paste(
crayon::bgMagenta(crayon::black("[ TAPACLOTH ] ")),
'Purity estimate using ',
crayon::bgYellow(crayon::black("[ BMix ] ")),
'with {.field {model}} model'
)
)
x$data
x$purity_estimate$binomial$purity
x$purity
get_purity_bmix = function(x){
y = x$purity_estimate$binomial$purity
return(y)
}
get_purity_estimate = function(x){
y = x$purity_estimate
return(y)
}
model
x$purity_estimate[[model]]
get_purity_bmix = function(x){
y = get_purity_estimate(x)
return(y$purity)
}
get_purity_bmix(x)
x
y = get_purity_estimate(x)
y
x$purity_estimate[[model]]
x$purity_estimate[[model]]
x$purity_estimate[[model]] %>% class()
get_purity_estimate = function(x, model){
y = x$purity_estimate[[model]]
return(y)
}
get_purity_estimate(x)
x$purity_estimate[[model]]
model
get_purity_estimate(x, model)
y = get_purity_estimate(x, model)
y$purity
get_purity_estimate = function(x, model){
y = x$purity_estimate[[model]]
return(y)
}
get_purity_bmix = function(x, model){
y = get_purity_estimate(x, model)
return(y$purity)
}
get_purity_bmix(x)
x
get_purity_bmix(x, model))
get_purity_bmix(x, model)
get_reliability = function(x, model){
y = get_purity_estimate(x, model)
return(y$reliability)
}
tibble(purity = get_purity(x),
purity_bmix = get_purity_bmix(x, model),
reliability = get_reliability(x, model))
tibble(
purity = get_purity(x),
reliability = get_reliability(x, model),
purity_bmix = get_purity_bmix(x, model),
)
devtools::load_all()
devtools::load_all()
x = readRDS("./testdata.rds")
test = TAPACLOTH::estimate_purity(x)
test
print(tibble(
purity = get_purity(x),
reliability = get_reliability(x, model),
purity_bmix = get_purity_bmix(x, model),
))
test
devtools::load_all()
x = readRDS("./testdata.rds")
test = TAPACLOTH::estimate_purity(x)
test
test = TAPACLOTH::run_classifier(test, alpha_level = 0.05, rho = 0.01, model = "beta-binomial")
test
test
plot_test(test)
test$classifier
plot_test(test)
test = plot_test
plot_gene(x = test,model = "beta-binomial",gene_name = "SPEN")
test
devtools::load_all()
x = readRDS("./testdata.rds")
test = TAPACLOTH::run_classifier(test, alpha_level = 0.05, rho = 0.01, model = "beta-binomial")
test = TAPACLOTH::run_classifier(x, alpha_level = 0.05, rho = 0.01, model = "beta-binomial")
test
x = plot_test(test)
x
plot_gene(x, model = "beta-binomial", "SPEN")
devtolls::document()
devtools::document()
devtools::check()
devtools::install_github("caravagnalab/TAPACLOTH@copynumber")
## set your user name and email:
usethis::use_git_config(user.name = "nicola-calonaci", user.email = "nicola.calonaci@gmail.com")
## set personal access token:
credentials::set_github_pat("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")
devtools::install_github("caravagnalab/TAPACLOTH@copynumber")
x = readRDS("./testdata.rds")
test = TAPACLOTH::run_classifier(x, alpha_level = 0.05, rho = 0.01, model = "beta-binomial")
x = test
x
get_classifier = function(x, model){
y = x$classifier[[model]]
return(y)
}
get_alpha = function(x, model){
y = get_class(x, model)
y$params$alpha
}
get_alpha(x, model)
get_alpha = function(x, model){
y = get_classifier(x, model)
y$params$alpha
}
get_alpha(x, model)
x
model = "beta-binomial"
get_alpha(x, model)
get_rho = function(x){
y = get_classifier(x, model = "beta-binomial")
y$params$rho
}
get_rho(x)
x = idify(x)
x
x$data
get_classifier(x) %>% names()
## Get NV of mutation under test
get_data(x)
## Get NV of mutation under test
get_data(x) %>% pull(id)
get_data(x) %>% pull(id)
models_avail(x)
models_avail = function(x){
return(names(x$classifier))
}
models_avail(x)
get_data(x) %>% pull(id)
get_classifier(x, model = model)
get_data(x)
get_data(x) %>% filter(id == i)
i = "chr16:749441:749442:A:G"
get_data(x) %>% filter(id == i)
get_NV(x, mutation_id = i)
get_purity(x)
get_classifier(x)
get_classifier(x, model = model)
get_classifier(x, model = model)$data
get_classifier(x, model = model) %>% get_data()
get_classifier(x, model = model) %>% get_data() %>% idify()
get_classifier(x, model = model) %>% idify() %>% get_data()
get_classifier(x, model = model) %>% idify() %>% get_data()
get_classifier(x, model = model) %>%
idify() %>%
get_data() %>%
dplyr::filter(id == i)
mdata = get_classifier(x, model = model) %>%
idify() %>%
get_data() %>%
dplyr::filter(id == i)
1:(mdata %>% nrow()
1:(mdata %>% nrow())
get_ploidy = function(k){
stringr::str_split(k, pattern = ":")[[1]] %>% as.integer() %>% sum()}
get_DP(mdata, i)
mdata
get_classifier(x, model)
get_classifier(x, model) %>% get_data()
get_classifier(x, model) %>% get_data() %>% pull(gene) %>% unique()
plot_test(x)
y = plot_test(x)
y$classifier$`beta-binomial`$plot_test$SPEN
devtools::load_all()
devtools::load_all()
y = plot_test(x)
devtools::load_all()
y = plot_test(x)
y$classifier$`beta-binomial`$plot_test$SPEN
devtools::load_all()
y = plot_test(x)
y$classifier$`beta-binomial`$plot_test$SPEN
et_classifier(x, model) %>%
get_data() %>%
pull(id)
x
model
get_classifier(x, model)
get_classifier(x, model) %>%
get_data()
get_classifier(x, model) %>%
get_data() %>%
idify() %>%
pull(id)
get_classifier(x, model) %>%
get_data()
get_classifier(x, model) %>%
idify()
get_classifier(x, model) %>%
idify() %>%
get_data()
get_classifier(x, model) %>%
idify() %>%
get_data() %>%
pull(id) %>%
unique()
devtools::load_all()
y = plot_test(x)
y$classifier$`beta-binomial`$plot_test$SPEN
y$classifier$`beta-binomial`$plot_test$`chr15:370952:370953:G:T`
plot_gene(x, "beta-binomial", "SPEN")
x
x$classifier[[model]]
x$classifier[[model]]$plot_test
x = plot_test(x)
plot_gene(x, "beta-binomial", "SPEN")
get_id = function(x, gene_name){
x$data %>%
idfy() %>%
dplyr::filter(gene == gene_name) %>%
pull(id)
}
plot_gene = function(x,model,gene_name){
model = model %>% tolower()
x$classifier[[model]]$plot_test[[get_id(x,gene_name)]]
}
plot_gene(x, "beta-binomial", "SPEN")
x$data %>%
idfiy() %>%
dplyr::filter(gene == gene_name) %>%
pull(id)
get_id = function(x, gene_name){
x$data %>%
idify() %>%
dplyr::filter(gene == gene_name) %>%
pull(id)
}
plot_gene(x, "beta-binomial", "SPEN")
x
gene_name
gene_name = "SPEN"
get_id(x,gene_name)
x$data %>%
idify()
x$data
x %>%
idify()
x %>%
idify() %>%
get_data()
x %>%
idify() %>%
get_data() %>%
dplyr::filter(gene == gene_name)
x %>%
idify() %>%
get_data() %>%
dplyr::filter(gene == gene_name) %>%
pull(id)
get_id = function(x, gene_name){
x %>%
idify() %>%
get_data() %>%
dplyr::filter(gene == gene_name) %>%
pull(id)
}
get_id(x,gene_name)
plot_gene = function(x,model,gene_name){
model = model %>% tolower()
x$classifier[[model]]$plot_test[[get_id(x,gene_name)]]
}
plot_gene(x, "beta-binomial", "SPEN")
