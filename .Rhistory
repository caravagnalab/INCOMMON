model = "terzile"
)
print(data)
data = list(data = dplyr::tibble(sample = "test",
gene = "target gene",
nv = seq(10,100,4.6) %>% round(0),
dp = 100,
VAF = (seq(10,100,4.6) %>% round(0))/100),
purity = tibble(sample = paste0("test ", seq(1:20)),
purity = exp(log(10)*seq(-0.9, 0, length.out=20)) %>% round(1))
)
run_classifier(
x = data,
model = "terzile"
)
data
data = list(data = dplyr::tibble(sample = "test",
gene = "target gene",
nv = seq(10,100,4.6) %>% round(0),
dp = 100,
VAF = (seq(10,100,4.6) %>% round(0))/100),
purity = tibble(sample = "test",
purity = exp(log(10)*seq(-0.9, 0, length.out=20)) %>% round(1))
)
data = list(data = dplyr::tibble(sample = "test",
gene = "target gene",
nv = seq(10,100,4.6) %>% round(0),
dp = 100,
VAF = (seq(10,100,4.6) %>% round(0))/100),
purity = tibble(sample = "test",
purity = exp(log(10)*seq(-0.9, 0, length.out=20)) %>% round(1))
)
```{r}
data = run_classifier(
x = data,
model = "terzile"
)
print(data)
print(data)
data$data$purity
paste("gene", 1:20)
data = list(data = dplyr::tibble(sample = "test",
gene = paste("gene", 1:20),
nv = seq(10,100,4.6) %>% round(0),
dp = 100,
VAF = (seq(10,100,4.6) %>% round(0))/100),
purity = tibble(sample = "test",
purity = exp(log(10)*seq(-0.9, 0, length.out=20)) %>% round(1))
)
data = run_classifier(
x = data,
model = "terzile"
)
print(data)
data$data$purity
ggpubr::ggarrange(plotlist = list(
plot(
data,
target_gene = "gene 7",
sample_name = "test",
model = "terzile"
),
plot(
data,
target_gene = "gene 8",
sample_name = "test",
model = "terzile"
)
),
ncol = 1,
nrow = 2, common.legend = T, legend = "bottom")
data_low = list(data = dplyr::tibble(sample = "test",
gene = paste("gene", 1:20),
nv = seq(10,100,4.6) %>% round(0),
dp = 100,
VAF = (seq(10,100,4.6) %>% round(0))/100),
purity = tibble(sample = "test",
purity = 0.4)
)
data_low = run_classifier(
x = data_low,
model = "terzile"
)
data_high = run_classifier(
x = data_high,
model = "terzile"
)
data_high = list(data = dplyr::tibble(sample = "test",
gene = paste("gene", 1:20),
nv = seq(10,100,4.6) %>% round(0),
dp = 100,
VAF = (seq(10,100,4.6) %>% round(0))/100),
purity = tibble(sample = "test",
purity = 0.98)
)
data_high = run_classifier(
x = data_high,
model = "terzile"
)
print(data_high)
print(data_low)
ggpubr::ggarrange(plotlist = list(
plot(
data_low,
target_gene = "gene 5",
sample_name = "test",
model = "terzile"
),
plot(
data_high,
target_gene = "gene 5",
sample_name = "test",
model = "terzile"
)
),
ncol = 1,
nrow = 2, common.legend = T, legend = "bottom")
data_low
data_low$data$data
data_low$data$purity
x = data_low
target_gene
target_gene = "gene 5"
sample_name = "test"
model = "terzile"
fit_plot = plot_fit(x, target_gene, sample_name, model)
fit_plot
x$data$data %>%
cbind(x$classifier[[ifelse((model %>% tolower())=="beta-binomial", "bbinomial", model %>% tolower())]]$data) %>%
dplyr::filter(sample == sample_name)
# Select sample
data = x$data$data %>%
cbind(x$classifier[[ifelse((model %>% tolower())=="beta-binomial", "bbinomial", model %>% tolower())]]$data) %>%
dplyr::filter(sample == sample_name)
data %>%
dplyr::filter(gene == target_gene) %>%
dplyr::mutate(class = paste0(class, ' (', nv, '/', dp, ')')) %>%
dplyr::pull(class) %>%
paste(collapse = ', ')
# Get class of mutations on target gene
gene_status = data %>%
dplyr::filter(gene == target_gene) %>%
dplyr::mutate(class = paste0(class, ' (', nv, '/', dp, ')')) %>%
dplyr::pull(class) %>%
paste(collapse = ', ')
# Get VAF of mutations on target gene
gene_vafs = data %>%
dplyr::filter(gene == target_gene) %>%
dplyr::pull(VAF)
gene_vafs
data %>%
dplyr::filter(gene == target_gene)
# Fit plot
colormap = ggsci::pal_jama("default")(7)[1:3]
names(colormap) = c("Clonal", "Clonal LOH", "Subclonal")
data %>%
ggplot2::ggplot() +
CNAqc:::my_ggplot_theme() +
ggplot2::geom_histogram(binwidth = 0.01, aes(VAF, fill = class)) +
ggplot2::scale_fill_manual(values = colormap)
ggpubr::ggarrange(plotlist = list(
plot(
data_low,
target_gene = "gene 5",
sample_name = "test",
model = "terzile"
),
plot(
data_high,
target_gene = "gene 5",
sample_name = "test",
model = "terzile"
)
),
ncol = 1,
nrow = 2, common.legend = T, legend = "bottom")
ggpubr::ggarrange(plotlist = list(
plot(
data_low,
target_gene = "gene 5",
sample_name = "test",
model = "terzile"
),
plot(
data_high,
target_gene = "gene 5",
sample_name = "test",
model = "terzile"
)
),
ncol = 1,
nrow = 2, common.legend = T, legend = "bottom")
ggpubr::ggarrange(plotlist = list(
plot(
data_low,
target_gene = "gene 5",
sample_name = "test",
model = "terzile"
),
plot(
data_high,
target_gene = "gene 5",
sample_name = "test",
model = "terzile"
)
),
ncol = 1,
nrow = 2, common.legend = T, legend = "bottom")
plot(
data_high,
target_gene = "gene 5",
sample_name = "test",
model = "terzile"
)
x = data_high
# Select sample
data = x$data$data %>%
cbind(x$classifier[[ifelse((model %>% tolower())=="beta-binomial", "bbinomial", model %>% tolower())]]$data) %>%
dplyr::filter(sample == sample_name)
data
0.97/1
x = data_high
data_high = run_classifier(
x = data_high,
model = "terzile"
)
print(data_high)
s = "test"
data %>%
dplyr::filter(sample == s)
x$data %>%
dplyr::filter(sample == s)
data_high = list(data = dplyr::tibble(sample = "test",
gene = paste("gene", 1:20),
nv = seq(10,100,4.6) %>% round(0),
dp = 100,
VAF = (seq(10,100,4.6) %>% round(0))/100),
purity = tibble(sample = "test",
purity = 0.98)
)
x = data_high
model = "terzile"
s
x
sample_data = x$data %>%
dplyr::filter(sample == s)
sample_data
sample_purity = dplyr::filter(x$purity, sample == s)$purity
sample_purity
quantile(sample_data$VAF / sample_purity,
probs = c(0, 1, 0.33))
quantile(sample_data$VAF / sample_purity,
probs = c(0, 1, 0.33)) %>%
round(2) %>% sort()
data_low = list(data = dplyr::tibble(sample = "test",
gene = paste("gene", 1:20),
nv = seq(10,100,4.6) %>% round(0),
dp = 100,
VAF = (seq(10,100,4.6) %>% round(0))/100),
purity = tibble(sample = "test",
purity = 0.4)
)
data_low = run_classifier(
x = data_low,
model = "terzile"
)
data_high = run_classifier(
x = data_high,
model = "terzile"
)
print(data_low)
print(data_high)
0.97/0.75
data_high$data$data$VAF/data_high$data$purity$purity
data_high$data$data$VAF/data_high$data$purity$purity %>% terzile(.,probs = c(0,1,0.33))
data_high$data$data$VAF/data_high$data$purity$purity %>% quantile(.,probs = c(0,1,0.33))
data_high$data$data$VAF/data_high$data$purity$purity %>% quantile(probs = c(0,1,0.33))
vp = data_high$data$data$VAF/data_high$data$purity$purity
quantile(vp, probs = c(0,1,0.33))
quantile(vp, probs = c(0,1,0.33)) %>% sort()
terziles = quantile(vp, probs = c(0,1,0.33)) %>% sort()
terziles[3]
vp
seq(10,100,4.6) %>% round(0)
seq(10,100,4.6) %>% round(0)/100/0.75
data_high$data$purity$purity
data_high = list(data = dplyr::tibble(sample = "test",
gene = paste("gene", 1:20),
nv = seq(10,100,4.6) %>% round(0),
dp = 100,
VAF = (seq(10,100,4.6) %>% round(0))/100),
purity = tibble(sample = "test",
purity = 0.75)
)
data_high$data$purity$purity
data_high$purity
data_high$data
data_high = list(data = dplyr::tibble(sample = "test",
gene = paste("gene", 1:20),
nv = seq(10,100,4.6) %>% round(0),
dp = 100,
VAF = (seq(10,100,4.6) %>% round(0))/100),
purity = tibble(sample = "test",
purity = 0.75)
)
data_high$data
data_high$purity
ggpubr::ggarrange(plotlist = list(
plot(
data_low,
target_gene = "gene 5",
sample_name = "test",
model = "terzile"
),
plot(
data_high,
target_gene = "gene 5",
sample_name = "test",
model = "terzile"
)
),
ncol = 1,
nrow = 2, common.legend = T, legend = "bottom")
data_low = run_classifier(
x = data_low,
model = "terzile"
)
data_high = run_classifier(
x = data_high,
model = "terzile"
)
data_high
ggpubr::ggarrange(plotlist = list(
plot(
data_low,
target_gene = "gene 5",
sample_name = "test",
model = "terzile"
),
plot(
data_high,
target_gene = "gene 5",
sample_name = "test",
model = "terzile"
)
),
ncol = 1,
nrow = 2, common.legend = T, legend = "bottom")
data_low
data_low
data_high
data_low = list(data = dplyr::tibble(sample = "test",
gene = paste("gene", 1:20),
nv = seq(10,100,4.6) %>% round(0),
dp = 100,
VAF = (seq(10,100,4.6) %>% round(0))/100),
purity = tibble(sample = "test",
purity = 0.4)
)
data_high = list(data = dplyr::tibble(sample = "test",
gene = paste("gene", 1:20),
nv = seq(10,100,4.6) %>% round(0),
dp = 100,
VAF = (seq(10,100,4.6) %>% round(0))/100),
purity = tibble(sample = "test",
purity = 0.75)
)
data_high = list(data = dplyr::tibble(sample = "test",
gene = paste("gene", 1:20),
nv = seq(10,100,4.6) %>% round(0),
dp = 100,
VAF = (seq(10,100,4.6) %>% round(0))/100),
purity = tibble(sample = "test",
purity = 0.75)
)
```{r}
data_low = run_classifier(
x = data_low,
model = "terzile"
)
data_high = run_classifier(
x = data_high,
model = "terzile"
)
data_high
data_low
data_low = list(data = dplyr::tibble(sample = "test",
gene = paste("gene", 1:20),
nv = seq(10,100,4.6) %>% round(0),
dp = 100,
VAF = (seq(10,100,4.6) %>% round(0))/100),
purity = tibble(sample = "test",
purity = 0.2)
)
data_low = run_classifier(
x = data_low,
model = "terzile"
)
print(data_low)
print(data_high)
data_low
data_low$data$data$sample/data_low$data$purity
data_low$data$purity
data_low$data$data$sample/data_low$data$purity$purity
data_low$data$data$VAF/data_low$data$purity$purity
data_low = list(data = dplyr::tibble(sample = "test",
gene = paste("gene", 1:20),
nv = seq(10,100,4.6) %>% round(0),
dp = 100,
VAF = (seq(10,100,4.6) %>% round(0))/100),
purity = tibble(sample = "test",
purity = 0.2)
)
data_low$purity
data_low = run_classifier(
x = data_low,
model = "terzile"
)
data_low
data_low$data$purity
data_high
data_low = list(data = dplyr::tibble(sample = "test",
gene = paste("gene", 1:20),
nv = seq(10,100,4.6) %>% round(0),
dp = 100,
VAF = (seq(10,100,4.6) %>% round(0))/100),
purity = tibble(sample = "test",
purity = 0.2)
)
x = data_low
# Output
test = list()
class(test) = "TAPACLOTH"
stopifnot((model %>% tolower()) %in% c("binomial", "beta-binomial"))
model
# Output
test = list()
class(test) = "TAPACLOTH"
stopifnot((model %>% tolower()) %in% c("binomial", "beta-binomial", "terzile"))
inherits(x, "TAPACLOTH")
test$data = x
test$classifier = list()
test$data
test$classifier
s = "test"
sample_data = x$data %>%
dplyr::filter(sample == s)
sample_data
sample_purity = dplyr::filter(x$purity, sample == s)$purity
sample_purity
terziles = quantile(sample_data$VAF / sample_purity,
probs = c(0, 1, 0.33)) %>%
round(2) %>% sort()
terziles
data = list(data = dplyr::tibble(sample = paste0("test ", seq(1:20)),
gene = "target gene",
nv = seq(10,100,4.6) %>% round(0),
dp = 100,
VAF = (seq(10,100,4.6) %>% round(0))/100),
purity = tibble(sample = paste0("test ", seq(1:20)),
purity = exp(log(10)*seq(-0.4, 0, length.out=20)) %>% round(1))
)
data
data$data
data = list(data = dplyr::tibble(sample = "test",
gene = "target gene",
nv = seq(10,100,4.6) %>% round(0),
dp = 100,
VAF = (seq(10,100,4.6) %>% round(0))/100),
purity = tibble(sample = "test",
purity = exp(log(10)*seq(-0.4, 0, length.out=20)) %>% round(1))
)
data
data$data
data$purity
data = run_classifier(
x = data,
model = "terzile"
)
print(data)
data$classifier$terzile
print(data$classifier)
data
ggpubr::ggarrange(plotlist = list(
plot(
data,
target_gene = "target gene",
sample_name = "test",
model = "terzile"
),
plot(
x,
target_gene = "target gene",
sample_name = "test 8",
model = "terzile"
)
),
ncol = 1,
nrow = 2, common.legend = T, legend = "bottom")
plot(
data,
target_gene = "target gene",
sample_name = "test",
model = "terzile"
)
devtools::load_all()
devtools::document()
pkgdown::build_site()
devtools::document()
pkgdown::build_site()
devtools::document()
pkgdown::build_site()
