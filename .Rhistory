)
})
} %>%
do.call(rbind, .)
lapply(unique(data$gene), function(g) {
cli::cli_h1(g)
gene_data = data %>%
dplyr::filter(gene == g)
terziles = quantile(gene_data$VAF / gene_data$purity, probs = c(0, 1, 0.33)) %>%
round(1)
gene_data = gene_data %>%
dplyr::mutate(
class_terzile = case_when(
VAF / purity >= terziles[3] ~ "Clonal LOH",
VAF / purity < terziles[3] ~ "Subclonal/Clonal"
)
)
}) %>%
do.call(rbind, .)
load_all()
devtools::load_all()
document()
devtools::document()
devtools::load_all()
devtools::load_all()
library(TAPACLOTH)
data = dplyr::tibble(sample = "test",
gene = c("test gene 1", "test gene 2", "test gene 3", "target gene"),
nv = c(10, 50, 90, 120),
dp = c(100, 100, 100, 200),
VAF = c(0.1, 0.5, 0.9, 0.6),
purity = 1
)
data
classified_data = run_classifier(
data = data,
alpha_level = 1e-3,
model = "Beta-Binomial",
rho = 0.01
)
classified_data
classified_data = run_classifier(
data = data,
alpha_level = 1e-3,
model = "terzile"
)
classified_data
quantile(c(0.1,0.5,0.9,0.6), probs = seq(0,1,0.33))
terzile = quantile(c(0.1,0.5,0.9,0.6), probs = seq(0,1,0.33))
terzile[3]
data
classified_data = run_classifier(
data = data,
model = "terzile"
)
classified_data
classified_data$fit
unique(data$gene)
data = dplyr::tibble(sample = paste0("test ", seq(1:5)),
gene = "target gene",
nv = c(10, 50, 90, 120),
dp = c(100, 100, 100, 200),
VAF = c(0.1, 0.5, 0.9, 0.6),
purity = 1
)
data = dplyr::tibble(sample = paste0("test ", seq(1:4)),
gene = "target gene",
nv = c(10, 50, 90, 120),
dp = c(100, 100, 100, 200),
VAF = c(0.1, 0.5, 0.9, 0.6),
purity = 1
)
data
classified_data = run_classifier(
data = data,
model = "terzile"
)
classified_data
classified_data$fit
terzile
90/20
seq(10,100,5)
seq(10,100,5) %>% length()
seq(10,100,6)
seq(10,100,4)
seq(10,100,4) %>% length()
seq(10,100,4.5)
seq(10,100,4.5) %>% length()
seq(10,100,4.6) %>% length()
seq(10,100,4.6)
seq(10,100,4.6) %>% round(1)
seq(10,100,4.6) %>% round(0)
data = dplyr::tibble(sample = paste0("test ", seq(1:20)),
gene = "target gene",
nv = seq(10,100,4.6) %>% round(0),
dp = 100,
VAF = (seq(10,100,4.6) %>% round(0))/100,
purity = 1
)
data
classified_data = run_classifier(
data = data,
model = "terzile"
)
classified_data
classified_data$fit
data = dplyr::tibble(sample = paste0("test ", seq(1:20)),
gene = "target gene",
nv = seq(10,100,4.6) %>% round(0),
dp = 100,
VAF = (seq(10,100,4.6) %>% round(0))/100,
purity = 1
)
classified_data = run_classifier(
data = data,
model = "terzile"
)
classified_data
devtools::load_all()
devtools::install()
## set your user name and email:
usethis::use_git_config(user.name = "nicola-calonaci", user.email = "nicola.calonaci@gmail.com")
## set personal access token:
credentials::set_github_pat("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")
devtools::install()
classified_data$model
data
head(data)
data %>% mutate(class = starts_with(purity))
data %>% mutate(class = starts_with("purity"))
classified_data
devtools::install()
devtools::install()
library(TAPACLOTH)
data = dplyr::tibble(sample = "test",
gene = c("test gene 1", "test gene 2", "test gene 3", "target gene"),
nv = c(10, 50, 90, 120),
dp = c(100, 100, 100, 200),
VAF = c(0.1, 0.5, 0.9, 0.6),
purity = 1
)
data = dplyr::tibble(sample = "test",
gene = c("test gene 1", "test gene 2", "test gene 3", "target gene"),
nv = c(10, 50, 90, 120),
dp = c(100, 100, 100, 200),
VAF = c(0.1, 0.5, 0.9, 0.6),
purity = 1
)
```{r}
data
classified_data = run_classifier(
data = data,
alpha_level = 1e-3,
model = "Beta-Binomial",
rho = 0.01
)
classified_data
classified_data$fit
devtools::install()
classified_data$fit
plot_tapacloth(fit = classified_data, target_gene = "target gene")
fit = classified_data
target_gene = "target gene"
classified_data
fit_plot = plot_fit(fit = fit, target_gene = target_gene)
fit$model
if(fit$model == "terzile") {
fit$fit %>% dplyr::mutate(class = class_terzile)
}
else {
fit$fit %>% dplyr::mutate(class = class_binom)
}
if(fit$model == "terzile") {
fit$fit = fit$fit %>%
dplyr::mutate(class = class_terzile)
}
else {
fit$fit = fit$fit %>%
dplyr::mutate(class = class_binom)
}
if(fit$model == "terzile") {
fit$fit = fit$fit %>%
dplyr::mutate(class = class_terzile)
} else {
fit$fit = fit$fit %>%
dplyr::mutate(class = class_binom)
}
fit$fit
devtools::install()
fit$model
fit_plot = plot_fit(fit = fit, target_gene = target_gene)
devtools::load_all()
fit_plot = plot_fit(fit = fit, target_gene = target_gene)
fit_plot
fit
data = dplyr::tibble(sample = "test",
gene = c("test gene 1", "test gene 2", "test gene 3", "target gene"),
nv = c(10, 50, 90, 120),
dp = c(100, 100, 100, 200),
VAF = c(0.1, 0.5, 0.9, 0.6),
purity = 1
)
classified_data = run_classifier(
data = data,
alpha_level = 1e-3,
model = "Beta-Binomial",
rho = 0.01
)
fit = classified_data
target_gene
plot_fit(fit = fit, target_gene = target_gene)
fit$model
if(fit$model == "terzile") {
fit$fit = fit$fit %>%
dplyr::mutate(class = class_terzile)
} else {
fit$fit = fit$fit %>%
dplyr::mutate(class = class_binom)
}
fit$fit
# Get class of mutations on target gene
gene_status = fit$fit %>%
dplyr::filter(gene == target_gene) %>%
dplyr::mutate(class = paste0(class, ' (', nv, '/', dp, ')')) %>%
dplyr::pull(class) %>%
paste(collapse = ', ')
gene_status
# Get VAF of mutations on target gene
gene_vafs = fit$fit %>%
dplyr::filter(gene == target_gene) %>%
dplyr::pull(VAF)
gene_vafs
fit$fit$sample[1]
# Get sample name
sample_name = fit$fit$sample[1]
# Fit plot
colormap = ggsci::pal_jama("default")(7)[1:3]
names(colormap) = c("Clonal", "Clonal LOH", "Subclonal")
fit$fit
fit$fit %>%
ggplot2::ggplot() +
CNAqc:::my_ggplot_theme() +
ggplot2::geom_histogram(binwidth = 0.01, aes(VAF, fill = class)) +
ggsci::scale_fill_jama() +
xlim(0, 1) +
ggplot2::labs(
title = sample_name,
subtitle = paste0("Purity: ", fit$purity[1], " - ", target_gene, ": ", gene_status)
)
fit$fit %>%
ggplot2::ggplot() +
CNAqc:::my_ggplot_theme() +
ggplot2::geom_histogram(binwidth = 0.01, aes(VAF, fill = class)) +
ggsci::scale_fill_jama() +
xlim(0, 1) +
ggplot2::labs(
title = sample_name,
subtitle = paste0("Purity: ", fit$purity[1], " - ", target_gene, ": ", gene_status)
) +
ggplot2::guides(fill = guide_legend(''),
color = guide_legend('', override.aes = aes(fill = NA)))  +
ggplot2::geom_vline(aes(xintercept = gene_vafs,
color = "Target VAF"),
linetype = 6) +
ggplot2::geom_vline(
aes(xintercept = fit$purity[1],
color = "Purity"),
linetype = 'dashed',
size = .6
)
fit$fit %>%
ggplot2::ggplot() +
CNAqc:::my_ggplot_theme() +
ggplot2::geom_histogram(binwidth = 0.01, aes(VAF, fill = class)) +
ggsci::scale_fill_jama() +
xlim(0, 1) +
ggplot2::labs(
title = sample_name,
subtitle = paste0("Purity: ", fit$purity[1], " - ", target_gene, ": ", gene_status)
) +
ggplot2::guides(fill = guide_legend(''),
color = guide_legend('', override.aes = aes(fill = NA)))
fit$fit %>%
ggplot2::ggplot() +
CNAqc:::my_ggplot_theme() +
ggplot2::geom_histogram(binwidth = 0.01, aes(VAF, fill = class)) +
ggsci::scale_fill_jama() +
xlim(0, 1) +
ggplot2::labs(
title = sample_name,
subtitle = paste0("Purity: ", fit$purity[1], " - ", target_gene, ": ", gene_status)
) +
ggplot2::guides(fill = guide_legend(''),
color = guide_legend('', override.aes = aes(fill = NA)))  +
ggplot2::geom_vline(aes(xintercept = gene_vafs,
color = "Target VAF"),
linetype = 6)
fit$fit %>%
ggplot2::ggplot() +
CNAqc:::my_ggplot_theme() +
ggplot2::geom_histogram(binwidth = 0.01, aes(VAF, fill = class)) +
ggsci::scale_fill_jama() +
xlim(0, 1) +
ggplot2::labs(
title = sample_name,
subtitle = paste0("Purity: ", fit$purity[1], " - ", target_gene, ": ", gene_status)
) +
ggplot2::guides(fill = guide_legend(''),
color = guide_legend('', override.aes = aes(fill = NA)))  +
ggplot2::geom_vline(aes(xintercept = gene_vafs,
color = "Target VAF"),
linetype = 6) +
ggplot2::geom_vline(
aes(xintercept = fit$purity[1],
color = "Purity"),
linetype = 'dashed',
size = .6
)
fit$fit$purity
fit$fit %>%
ggplot2::ggplot() +
CNAqc:::my_ggplot_theme() +
ggplot2::geom_histogram(binwidth = 0.01, aes(VAF, fill = class)) +
ggsci::scale_fill_jama() +
xlim(0, 1) +
ggplot2::labs(
title = sample_name,
subtitle = paste0("Purity: ", fit$purity[1], " - ", target_gene, ": ", gene_status)
) +
ggplot2::guides(fill = guide_legend(''),
color = guide_legend('', override.aes = aes(fill = NA)))  +
ggplot2::geom_vline(aes(xintercept = gene_vafs,
color = "Target VAF"),
linetype = 6) +
ggplot2::geom_vline(
aes(xintercept = fit$fit$purity[1],
color = "Purity"),
linetype = 'dashed',
size = .6
) +
ggplot2::geom_vline(aes(xintercept = fit$fit$purity[1] / 2,
color = "Clonal peak"),
linetype = 'dashed') +
ggplot2::scale_color_manual(
name = "",
values = c(
`Target VAF` = "indianred3",
`Purity` = "black",
`Clonal Peak` = "gray"
)
)
data = dplyr::tibble(sample = paste0("test ", seq(1:20)),
gene = "target gene",
nv = seq(10,100,4.6) %>% round(0),
dp = 100,
VAF = (seq(10,100,4.6) %>% round(0))/100,
purity = 1
)
classified_data = run_classifier(
data = data,
model = "terzile"
)
classified_data$fit
fit = classified_data
if(fit$model == "terzile") {
fit$fit = fit$fit %>%
dplyr::mutate(class = class_terzile)
} else {
fit$fit = fit$fit %>%
dplyr::mutate(class = class_binom)
}
fit$fit
# Get class of mutations on target gene
gene_status = fit$fit %>%
dplyr::filter(gene == target_gene) %>%
dplyr::mutate(class = paste0(class, ' (', nv, '/', dp, ')')) %>%
dplyr::pull(class) %>%
paste(collapse = ', ')
gene_status
# Get VAF of mutations on target gene
gene_vafs = fit$fit %>%
dplyr::filter(gene == target_gene) %>%
dplyr::pull(VAF)
gene_vafs
# Get sample name
sample_name = fit$fit$sample[1]
fit$fit$sample
sample = "test 1"
fit$fit
sample_name = "test 1"
fit$fit %>%
dplyr::filter(sample == sample_name)
fit$fit
# Select sample
fit$fit = fit$fit %>%
dplyr::filter(sample == sample_name)
fit$fit
# Get class of mutations on target gene
gene_status = fit$fit %>%
dplyr::filter(gene == target_gene) %>%
dplyr::mutate(class = paste0(class, ' (', nv, '/', dp, ')')) %>%
dplyr::pull(class) %>%
paste(collapse = ', ')
gene_status
# Get VAF of mutations on target gene
gene_vafs = fit$fit %>%
dplyr::filter(gene == target_gene) %>%
dplyr::pull(VAF)
gene_vafs
# Fit plot
colormap = ggsci::pal_jama("default")(7)[1:3]
names(colormap) = c("Clonal", "Clonal LOH", "Subclonal")
fit_plot = fit$fit %>%
ggplot2::ggplot() +
CNAqc:::my_ggplot_theme() +
ggplot2::geom_histogram(binwidth = 0.01, aes(VAF, fill = class)) +
ggsci::scale_fill_jama() +
xlim(0, 1) +
ggplot2::labs(
title = sample_name,
subtitle = paste0("Purity: ", fit$purity[1], " - ", target_gene, ": ", gene_status)
) +
ggplot2::guides(fill = guide_legend(''),
color = guide_legend('', override.aes = aes(fill = NA)))  +
ggplot2::geom_vline(aes(xintercept = gene_vafs,
color = "Target VAF"),
linetype = 6) +
ggplot2::geom_vline(
aes(xintercept = fit$fit$purity[1],
color = "Purity"),
linetype = 'dashed',
size = .6
) +
ggplot2::geom_vline(aes(xintercept = fit$fit$purity[1] / 2,
color = "Clonal peak"),
linetype = 'dashed') +
ggplot2::scale_color_manual(
name = "",
values = c(
`Target VAF` = "indianred3",
`Purity` = "black",
`Clonal Peak` = "gray"
)
)
fit_plot
devtools::install()
library(TAPACLOTH)
data = dplyr::tibble(sample = "test",
gene = c("test gene 1", "test gene 2", "test gene 3", "target gene"),
nv = c(10, 50, 90, 120),
dp = c(100, 100, 100, 200),
VAF = c(0.1, 0.5, 0.9, 0.6),
purity = 1
)
classified_data = run_classifier(
data = data,
alpha_level = 1e-3,
model = "Beta-Binomial",
rho = 0.01
)
classified_data
classified_data$fit
plot_tapacloth(fit = classified_data, target_gene = "target gene", sample_name = "test")
data = dplyr::tibble(sample = paste0("test ", seq(1:20)),
gene = "target gene",
nv = seq(10,100,4.6) %>% round(0),
dp = 100,
VAF = (seq(10,100,4.6) %>% round(0))/100,
purity = 1
)
classified_data = run_classifier(
data = data,
model = "terzile"
)
classified_data$fit
plot_tapacloth(fit = classified_data, target_gene = "target gene", sample_name = "test 1")
check()
devtools::check()
library(TAPACLOTH)
data = dplyr::tibble(sample = "test",
gene = paste0("test gene ", 1:10),
nv = c(50, 60, 100, 250, 225, 270, 35, 375, 400, 450),
dp = 500,
VAF = c(10, 12, 20, 50, 45, 54, 61, 75, 80, 90)/100,
purity = 0.4
)
data
purity_bmix = estimate_purity(data = data,
sample_name = "test",
model = "Binomial",
purity = data$purity[1],
eps = 0.01)
purity_bmix$data
data = dplyr::rename(purity_bmix$data,
input_purity = purity,
purity = purity_bmix)
data
classified_data = run_classifier(
data = data,
alpha_level = 1e-3,
model = "Beta-Binomial",
rho = 0.01
)
classified_data$fit
devtools::build_readme()
devtools::build_readme()
devtools::build_site()
devtools::build_site()
purity_bmix$plot_bmix
devtools::build_site()
devtools::document()
devtools::build_site()
