filter(map_posterior >= th)
conf_matrix = get_conf_matrix(what)
metrics = compute_metrics_from_confusion(conf_matrix)
metrics$threshold = th
metrics$N = rowSums(conf_matrix) %>% sum()
return(metrics)
}) %>% do.call(rbind, .)
getwd()
library(tidyverse)
readRDS('./results/higher_ploidy/pcawg_ploidy_multiplicity_categorical_priors_from_drivers_only.rds')
priors_k_m = readRDS('./results/higher_ploidy/pcawg_ploidy_multiplicity_categorical_priors_from_drivers_only.rds')
priors_k_m
msk = readRDS('../results/msk_classified_with_priors.rds')
getwd()
msk = readRDS('../Zenodo/results/msk_classified_with_priors.rds')
priors = priors_k_m
get_x = function(N, prior, purity, k){
p = prior %>% filter(ploidy == k) %>% pull(p) %>% sum()
N * p / (k * purity + 2 * (1-purity))
}
i = 1
msk$input[i,]$DP
what = msk$input[i,]
what
get_prior(priors = priors_k_m, gene = what$gene, gene_role = what$gene_role, tumor_type = what$tumor_type)
get_prior = function(priors, gene, gene_role, tumor_type){
what = priors %>% filter(gene == !!gene, tumor_type == !!tumor_type)
if(nrow(what) == 0){
what = priors %>% filter(gene == !!gene, tumor_type == 'PANCA')
if(nrow(what) == 0){
if(!is.na(gene_role)){
what = priors %>% filter(gene == 'other genes', gene_role == !!gene_role, tumor_type == 'PANCA')
} else {
what = priors %>% filter(gene == 'other genes', tumor_type == 'PANCA')
}
}
}
what = what %>% filter(ploidy <= k_max)
what$p = what$p/sum(what$p)
what = what %>% dplyr::arrange(ploidy)
return(what)
}
get_prior(priors = priors_k_m, gene = what$gene, gene_role = what$gene_role, tumor_type = what$tumor_type)
get_prior = function(priors, gene, gene_role, tumor_type, k_max){
what = priors %>% filter(gene == !!gene, tumor_type == !!tumor_type)
if(nrow(what) == 0){
what = priors %>% filter(gene == !!gene, tumor_type == 'PANCA')
if(nrow(what) == 0){
if(!is.na(gene_role)){
what = priors %>% filter(gene == 'other genes', gene_role == !!gene_role, tumor_type == 'PANCA')
} else {
what = priors %>% filter(gene == 'other genes', tumor_type == 'PANCA')
}
}
}
what = what %>% filter(ploidy <= k_max)
what$p = what$p/sum(what$p)
what = what %>% dplyr::arrange(ploidy)
return(what)
}
prior = get_prior(priors = priors_k_m, gene = what$gene, gene_role = what$gene_role, tumor_type = what$tumor_type, k_max = 8)
get_prior(priors = priors_k_m, gene = what$gene, gene_role = what$gene_role, tumor_type = what$tumor_type, k_max = 8)
get_prior = function(priors, gene, gene_role, tumor_type, k_max){
what = priors %>% filter(gene == !!gene, tumor_type == !!tumor_type)
if(nrow(what) == 0){
what = priors %>% filter(gene == !!gene, tumor_type == 'PANCA')
if(nrow(what) == 0){
if(!is.na(gene_role)){
what = priors %>% filter(gene == 'other genes', gene_role == !!gene_role, tumor_type == 'PANCA')
} else {
what = priors %>% filter(gene == 'other genes', tumor_type == 'PANCA')
}
}
}
what = what %>% filter(ploidy <= k_max)
what$p = what$p/sum(what$p)
what = what %>% dplyr::arrange(ploidy)
return(what)
}
get_prior(priors = priors_k_m, gene = what$gene, gene_role = what$gene_role, tumor_type = what$tumor_type, k_max = 8)
what$purity
get_x(N = what$DP, prior = prior, purity = what$purity, k = 1)
prior = get_prior(priors = priors_k_m, gene = what$gene, gene_role = what$gene_role, tumor_type = what$tumor_type, k_max = 8)
get_x(N = what$DP, prior = prior, purity = what$purity, k = 1)
k_max = 8
prior = get_prior(priors = priors_k_m, gene = what$gene, gene_role = what$gene_role, tumor_type = what$tumor_type, k_max = k_max)
lapply(1:k_max, function(k){
tibble(
k = k
x = get_x(N = what$DP, prior = prior, purity = what$purity, k = 1)
lapply(1:k_max, function(k){
tibble(
k = k,
x = get_x(N = what$DP, prior = prior, purity = what$purity, k = k)
)
})
lapply(1:k_max, function(k){
tibble(
k = k,
x = get_x(N = what$DP, prior = prior, purity = what$purity, k = k)
)
}) %>% do.call(rbind, .)
sapply(1:k_max, function(k){
get_x(N = what$DP, prior = prior, purity = what$purity, k = k)
})
sapply(1:k_max, function(k){
get_x(N = what$DP, prior = prior, purity = what$purity, k = k)
}) %>% mean()
prior %>% filter(ploidy == k) %>% pull(p) %>% sum()
k=1
prior %>% filter(ploidy == k) %>% pull(p) %>% sum()
k=2
prior %>% filter(ploidy == k) %>% pull(p) %>% sum()
prior
prior %>% filter(ploidy == 1)
prior %>% filter(ploidy == 2)
prior %>% filter(ploidy == 3)
what$DP
what$purity
54*2*0.3+2*0.7*54
sapply(1:k_max, function(k){
get_x(N = what$DP, prior = prior, purity = what$purity, k = k)
}) %>% sum()
438/8
sapply(1:nrow(msk$input), function(i){
what = msk$input[i,]
prior = get_prior(priors = priors_k_m, gene = what$gene, gene_role = what$gene_role, tumor_type = what$tumor_type, k_max = k_max)
sapply(1:k_max, function(k){
get_x(N = what$DP, prior = prior, purity = what$purity, k = k)
}) %>% sum()
})
sapply(1:nrow(msk$input)[1:10], function(i){
what = msk$input[i,]
prior = get_prior(priors = priors_k_m, gene = what$gene, gene_role = what$gene_role, tumor_type = what$tumor_type, k_max = k_max)
sapply(1:k_max, function(k){
get_x(N = what$DP, prior = prior, purity = what$purity, k = k)
}) %>% sum()
})
sapply(1:nrow(msk$input)[1:2], function(i){
what = msk$input[i,]
prior = get_prior(priors = priors_k_m, gene = what$gene, gene_role = what$gene_role, tumor_type = what$tumor_type, k_max = k_max)
sapply(1:k_max, function(k){
get_x(N = what$DP, prior = prior, purity = what$purity, k = k)
}) %>% sum()
})
sapply(1:nrow(msk$input[1:2,]), function(i){
what = msk$input[i,]
prior = get_prior(priors = priors_k_m, gene = what$gene, gene_role = what$gene_role, tumor_type = what$tumor_type, k_max = k_max)
sapply(1:k_max, function(k){
get_x(N = what$DP, prior = prior, purity = what$purity, k = k)
}) %>% sum()
})
sapply(1:nrow(msk$input[1:10,]), function(i){
what = msk$input[i,]
prior = get_prior(priors = priors_k_m, gene = what$gene, gene_role = what$gene_role, tumor_type = what$tumor_type, k_max = k_max)
sapply(1:k_max, function(k){
get_x(N = what$DP, prior = prior, purity = what$purity, k = k)
}) %>% sum()
})
x_values = sapply(1:nrow(msk$input), function(i){
what = msk$input[i,]
prior = get_prior(priors = priors_k_m, gene = what$gene, gene_role = what$gene_role, tumor_type = what$tumor_type, k_max = k_max)
sapply(1:k_max, function(k){
get_x(N = what$DP, prior = prior, purity = what$purity, k = k)
}) %>% sum()
})
nrow(msk$input)
what = msk$input[i,]
prior = get_prior(priors = priors_k_m, gene = what$gene, gene_role = what$gene_role, tumor_type = what$tumor_type, k_max = k_max)
sapply(1:k_max, function(k){
get_x(N = what$DP, prior = prior, purity = what$purity, k = k)
}) %>% sum()
parallel::mcmapply(1:nrow(msk$input[1:10,]), function(i){
what = msk$input[i,]
prior = get_prior(priors = priors_k_m, gene = what$gene, gene_role = what$gene_role, tumor_type = what$tumor_type, k_max = k_max)
sapply(1:k_max, function(k){
get_x(N = what$DP, prior = prior, purity = what$purity, k = k)
}) %>% sum()
}, SIMPLIFY = T, mc.cores = 10)
parallel::mclapply(1:nrow(msk$input[1:10,]), function(i){
what = msk$input[i,]
prior = get_prior(priors = priors_k_m, gene = what$gene, gene_role = what$gene_role, tumor_type = what$tumor_type, k_max = k_max)
sapply(1:k_max, function(k){
get_x(N = what$DP, prior = prior, purity = what$purity, k = k)
}) %>% sum()
}, SIMPLIFY = T, mc.cores = 10)
parallel::mclapply(1:nrow(msk$input[1:10,]), function(i){
what = msk$input[i,]
prior = get_prior(priors = priors_k_m, gene = what$gene, gene_role = what$gene_role, tumor_type = what$tumor_type, k_max = k_max)
sapply(1:k_max, function(k){
get_x(N = what$DP, prior = prior, purity = what$purity, k = k)
}) %>% sum()
}, mc.cores = 10)
parallel::mclapply(1:nrow(msk$input[1:10,]), function(i){
what = msk$input[i,]
prior = get_prior(priors = priors_k_m, gene = what$gene, gene_role = what$gene_role, tumor_type = what$tumor_type, k_max = k_max)
sapply(1:k_max, function(k){
get_x(N = what$DP, prior = prior, purity = what$purity, k = k)
}) %>% sum()
}, mc.cores = 10) %>% unlist()
parallel::mclapply(1:nrow(msk$input[1:100,]), function(i){
what = msk$input[i,]
prior = get_prior(priors = priors_k_m, gene = what$gene, gene_role = what$gene_role, tumor_type = what$tumor_type, k_max = k_max)
sapply(1:k_max, function(k){
get_x(N = what$DP, prior = prior, purity = what$purity, k = k)
}) %>% sum()
}, mc.cores = 10) %>% unlist()
parallel::mclapply(1:nrow(msk$input[1:1000,]), function(i){
what = msk$input[i,]
prior = get_prior(priors = priors_k_m, gene = what$gene, gene_role = what$gene_role, tumor_type = what$tumor_type, k_max = k_max)
sapply(1:k_max, function(k){
get_x(N = what$DP, prior = prior, purity = what$purity, k = k)
}) %>% sum()
}, mc.cores = 10) %>% unlist()
parallel::mclapply(1:nrow(msk$input[1:10000,]), function(i){
what = msk$input[i,]
prior = get_prior(priors = priors_k_m, gene = what$gene, gene_role = what$gene_role, tumor_type = what$tumor_type, k_max = k_max)
sapply(1:k_max, function(k){
get_x(N = what$DP, prior = prior, purity = what$purity, k = k)
}) %>% sum()
}, mc.cores = 10) %>% unlist()
nrow(msk$input)
nrow(msk$input)/10000
17*30
x_values = parallel::mclapply(1:nrow(msk$input), function(i){
what = msk$input[i,]
prior = get_prior(priors = priors_k_m, gene = what$gene, gene_role = what$gene_role, tumor_type = what$tumor_type, k_max = k_max)
sapply(1:k_max, function(k){
get_x(N = what$DP, prior = prior, purity = what$purity, k = k)
}) %>% sum()
}, mc.cores = 10) %>% unlist()
x_values
mean_k = mean(x_values)
mean_x = mean(x_values)
mean_x
var_x = var(x_values)
var_x
alpha_x = (mean_x**2)/var_x
beta_x = mean_x/var_x
alpha_x
beta_x
rgamma(n = 1000, shape = alpha_x, rate = beta_x)
rgamma(n = 1000, shape = alpha_x, rate = beta_x) %>% hist()
tibble(
mean_x,
var_x,
alpha_x,
beta_x
)
saveRDS(
object = tibble(
mean_x,
var_x,
alpha_x,
beta_x
),
file = './results/higher_ploidy/msk_overall_x_prior.rds'
)
samples = msk$input %>%
group_by(sample) %>%
reframe(n=n()) %>%
filter(n>=2) %>%
pull(sample) %>% unique()
samples
msk$genomic_data %>%
filter(!(sample %in% sample))
msk$genomic_data %>%
filter(!(sample %in% samples))
msk$genomic_data
msk$genomic_data
msk$genomic_data %>%
filter(sample %in% samples)
genomic_data = msk$genomic_data %>%
filter(sample %in% samples)
clinical_data = msk$clinical_data %>%
filter(sample %in% samples)
msk$clinical_data
clinical_data
msk = INCOMMON::init(genomic_data = genomic_data, clinical_data = clinical_data, gene_roles = INCOMMON::cancer_gene_census)
msk
INCOMMON::init(genomic_data = genomic_data, clinical_data = clinical_data, gene_roles = INCOMMON::cancer_gene_census)
rlang::last_trace()
genomic_data
genomic_data = msk$genomic_data %>%
filter(sample %in% samples) %>% select(-gene_role)
clinical_data = msk$clinical_data %>%
filter(sample %in% samples)
msk = INCOMMON::init(genomic_data = genomic_data, clinical_data = clinical_data, gene_roles = INCOMMON::cancer_gene_census)
msk
saveRDS(msk, './results/msk_input_M_gt_2_samples.rds')
synth = readRDS('./results/higher_ploidy/pcawg_derived_sim_accuracy_larger.rds')
synth$sample %>% unique() %>% length()
library(tidyverse)
synth = readRDS('./results/higher_ploidy/pcawg_derived_sim_accuracy_larger.rds')
synth$sample %>% unique() %>% length()
get_conf_matrix = function(x){
cm_df = x %>%
group_by(true_class, map_class) %>%
reframe(n = n())
conf_matrix = cm_df %>%
pivot_wider(names_from = map_class, values_from = n, values_fill = 0) %>%
column_to_rownames(var = "true_class")
# Convert to a matrix
conf_matrix = as.matrix(conf_matrix)
return(conf_matrix)
}
# Function to compute Precision, Recall, and F1-Score from a confusion matrix
compute_metrics_from_confusion = function(conf_matrix) {
# Accuracy calculation
accuracy <- sum(diag(conf_matrix)) / sum(conf_matrix)
# Precision, Recall, and F1-Score for each class
precision <- diag(conf_matrix) / colSums(conf_matrix)
recall <- diag(conf_matrix) / rowSums(conf_matrix)
f1_score <- 2 * (precision * recall) / (precision + recall)
# Handling NaN in F1-Score where precision + recall might be zero
f1_score[is.na(f1_score)] <- 0
# Macro-averaged metrics (averaging the metrics across classes)
macro_precision <- mean(precision, na.rm = TRUE)
macro_recall <- mean(recall, na.rm = TRUE)
macro_f1 <- mean(f1_score, na.rm = TRUE)
# Micro-averaged metrics (computing metrics from sums of true/false positives/negatives)
total_tp <- sum(diag(conf_matrix))
total_fp <- sum(colSums(conf_matrix) - diag(conf_matrix))
total_fn <- sum(rowSums(conf_matrix) - diag(conf_matrix))
micro_precision <- total_tp / (total_tp + total_fp)
micro_recall <- total_tp / (total_tp + total_fn)
micro_f1 <- 2 * (micro_precision * micro_recall) / (micro_precision + micro_recall)
# Results
tibble(
class = names(precision),
accuracy,
precision,
recall,
f1_score,
macro_precision,
macro_recall,
macro_f1,
micro_precision,
micro_recall,
micro_f1
)
}
compute_metrics_from_confusion = function(conf_matrix){
# True Positives for each class
true_positives <- diag(conf_matrix)
# False Positives for each class
false_positives <- colSums(conf_matrix) - true_positives
# False Negatives for each class
false_negatives <- rowSums(conf_matrix) - true_positives
# Sum of all True Positives
sum_true_positives <- sum(true_positives)
# Sum of all False Positives
sum_false_positives <- sum(false_positives)
# Sum of all False Negatives
sum_false_negatives <- sum(false_negatives)
# Overall Accuracy
accuracy <- sum_true_positives / sum(conf_matrix)
# Overall Precision
overall_precision <- sum_true_positives / (sum_true_positives + sum_false_positives)
# Overall Recall
overall_recall <- sum_true_positives / (sum_true_positives + sum_false_negatives)
# Overall F1-Score
overall_f1 <- 2 * (overall_precision * overall_recall) / (overall_precision + overall_recall)
tibble(
accuracy = accuracy,
Precision = NA,
Recall = NA,
F1 = NA,
macro_precision = overall_precision,
macro_recall = overall_recall,
macro_f1 = overall_f1
)
}
fit_purity = function(x){
what = x %>%
group_by(sample) %>%
reframe(in_pi = unique(purity), out_pi = unique(purity_pred))
model = lm(out_pi ~ in_pi, data = what)
std_residuals_threshold = 2
cooks_distance_threshold = 4/nrow(what)
what %>%
mutate(
fitted = fitted(model),                            # Fitted values
residuals = resid(model),                          # Residuals
std_residuals = residuals/0.05,                  # Standardized residuals
r2 = summary(model)$r.squared
) %>%
mutate(outlier = (abs(std_residuals) > 1.96))
}
test_purity = function(x){
lapply(seq(0.25, 0, -0.05), function(th){
what = x %>%
filter(1-abs(purity-purity_pred) >= 1-th)
conf_matrix = get_conf_matrix(what)
metrics = compute_metrics_from_confusion(conf_matrix)
metrics$threshold = 1-th
metrics$N = rowSums(conf_matrix) %>% sum()
return(metrics)
}) %>% do.call(rbind, .)
}
test_posterior = function(x, filter_purity = FALSE){
if(filter_purity) {
outlier_samples = fit_purity(x = x) %>% filter(outlier) %>% pull(sample) %>% unique()
x = x %>% filter(!(sample %in% outlier_samples))
}
lapply(seq(min(x$map_posterior), max(x$map_posterior)-0.01, 0.01), function(th){
what = x %>%
filter(map_posterior >= th)
conf_matrix = get_conf_matrix(what)
metrics = compute_metrics_from_confusion(conf_matrix)
metrics$threshold = th
metrics$N = rowSums(conf_matrix) %>% sum()
s
return(metrics)
}) %>% do.call(rbind, .)
}
plot_class_metrics = function(x, xlabel){
x %>%
mutate(class = factor(class, levels = c('m=1', 'm=k', '1<m<k'))) %>%
tidyr::pivot_longer(cols = c('Precision', 'Recall', 'F1'), names_to = 'metric', values_to = 'value') %>%
ggplot(aes(x = threshold, y = value, group = metric, color = metric))+
geom_line()+
geom_point()+
scale_color_manual(values = c('Precision' = 'goldenrod1', 'Recall' = 'darkorange', 'F1' = 'deeppink3')) +
facet_wrap(~class)+
CNAqc:::my_ggplot_theme(cex = .8)+
xlab(xlabel)+ylab('')
}
plot_overall_metrics = function(x, xlabel){
x %>%
# filter(class=='m=1') %>%
select(accuracy, starts_with('macro'), threshold) %>%
rename('Precision' = 'macro_precision', 'Recall' = 'macro_recall', 'F1' = 'macro_f1', 'Accuracy' = 'accuracy') %>%
tidyr::pivot_longer(cols = c('Precision', 'Recall', 'F1', 'Accuracy'), names_to = 'metric', values_to = 'value') %>%
ggplot(aes(x = threshold, y = value, group = metric, color = metric))+
geom_line()+
geom_point()+
scale_color_manual(values = c('Precision' = 'goldenrod1', 'Recall' = 'darkorange', 'F1' = 'deeppink3', 'Accuracy' = 'purple3')) +
CNAqc:::my_ggplot_theme(cex = .8)+
xlab(xlabel)+ylab('')+
ylim(.4,1)
}
plot_N = function(x, xlabel){
x %>%
ggplot(aes(x = threshold, y = N, group = class, color = class))+
geom_line()+
geom_point()+
scale_color_manual(values = c('m=1' = 'forestgreen', 'm=k' = 'steelblue', '1<m<k' = 'indianred2')) +
CNAqc:::my_ggplot_theme(cex = .8)+
xlab(xlabel)+ylab('N mutations')
}
plot_purity = function(x){
# what = x %>%
#   group_by(sample) %>%
#   reframe(in_pi = unique(purity), out_pi = unique(purity_pred))
#
# model = lm(out_pi ~ in_pi, data = what)
# r_squared <- summary(model)$r.squared
what = fit_purity(x)
what %>%
ggplot(aes(x = in_pi, y = out_pi))+
geom_smooth(method = "lm", se = TRUE, col = "blue") +
geom_point(aes(color = outlier), size = 1)+
scale_color_manual(values = c('TRUE' = 'indianred2', 'FALSE' = 'black'))+
geom_text(
data = what %>% slice_head(n = 1),
aes(x = -Inf, y = Inf,
label = paste0('R^2 = ', round(r2,2))),
hjust = -0.1, vjust = 1.5, size = 5, color = "black")+
CNAqc:::my_ggplot_theme(cex = .8)+
xlab('Input purity')+ylab('Predicted purity')+
xlim(0.2,1)+ylim(0.2,1)
}
plot_dp_vs_k = function(x){
x %>%
ggplot(aes(x = factor(ploidy), y = DP))+
geom_boxplot() +
CNAqc:::my_ggplot_theme(cex = .8)+
xlab('Total CN')+ylab('DP')+
ylim(0,400)
}
plot_dp_dist = function(x){
q = quantile(x$DP)
x %>%
ggplot(aes(x = DP))+
geom_histogram(fill = 'deepskyblue') +
geom_vline(xintercept = q['25%'], linetype = 'longdash', color = 'purple3')+
geom_vline(xintercept = q['50%'], linetype = 'longdash', color = 'purple3')+
geom_vline(xintercept = q['75%'], linetype = 'longdash', color = 'purple3')+
CNAqc:::my_ggplot_theme(cex = .8)+
xlab('DP')+ylab('')+
xlim(0,400)
}
plot_posterior_vs_class = function(x){
tcga %>%
group_by(map_class) %>%
reframe(mp = median(map_posterior), across(everything())) %>%
ggplot(aes(x = map_class, y = map_posterior)) +
geom_violin()+
geom_jitter(width = .1, alpha = .1, color = 'blue')+
geom_hline(data = . %>% arrange(mp) %>% slice_head(n=1), aes(yintercept = mp), linetype = 'longdash')+
CNAqc:::my_ggplot_theme(cex = .8)+
xlab('MAP Class')+ylab('Posterior probability')
}
tcga_purity = test_purity(tcga)
tcga_posterior = test_posterior(tcga, filter_purity = FALSE)
tcga_posterior_filtered = test_posterior(tcga, filter_purity = TRUE)
p_tcga_overall_posterior = plot_overall_metrics(x = tcga_posterior_filtered, xlabel = 'Posterior threshold')
p_tcga_overall_purity = plot_overall_metrics(x = tcga_purity, xlabel = 'Purity accuracy threshold')
synth_purity = test_purity(synth %>% rename(purity = purity_true))
setwd('~/Documents/GitHub/INCOMMON/')
getwd()
