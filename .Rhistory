SAMPLE = y
) %>% filter(!is.na(REFERENCE),
!is.na(VARIANT)) %>%
select(CHROMOSOME, START, END, REFERENCE, VARIANT, SAMPLE)
x
}
) %>% bind_rows()
joint_samples
lapply(samples, function(y){
x %>%
filter(eval(parse(text=paste0("VAF.", y, " > 0")))) %>%
mutate(
CHROMOSOME = chr,
START = from,
END = to,
REFERENCE = ref,
VARIANT = alt,
SAMPLE = y
) %>% filter(!is.na(REFERENCE),
!is.na(VARIANT)) %>%
select(CHROMOSOME, START, END, REFERENCE, VARIANT, SAMPLE)
x
}
) %>% bind_rows()
lapply(samples, function(y){
x %>%
filter(eval(parse(text=paste0("VAF.", y, " > 0")))) %>%
mutate(
CHROMOSOME = chr,
START = from,
END = to,
REFERENCE = ref,
VARIANT = alt,
SAMPLE = y
) %>% filter(!is.na(REFERENCE),
!is.na(VARIANT)) %>%
select(CHROMOSOME, START, END, REFERENCE, VARIANT, SAMPLE)
}
) %>% bind_rows()
a = lapply(samples, function(y){
x %>%
filter(eval(parse(text=paste0("VAF.", y, " > 0")))) %>%
mutate(
CHROMOSOME = chr,
START = from,
END = to,
REFERENCE = ref,
VARIANT = alt,
SAMPLE = y
) %>% filter(!is.na(REFERENCE),
!is.na(VARIANT)) %>%
select(CHROMOSOME, START, END, REFERENCE, VARIANT, SAMPLE)
}
) %>% bind_rows()
a
a$SAMPLE %>% table()
a = lapply(samples, function(y){
x %>%
filter(eval(parse(text=paste0("VAF.", y, " > 0")))) %>%
mutate(
CHROMOSOME = chr,
START = from,
END = to,
REFERENCE = ref,
VARIANT = alt,
SAMPLE = y
) %>% filter(!is.na(REFERENCE),
!is.na(VARIANT)) %>%
select(CHROMOSOME, START, END, REFERENCE, VARIANT, SAMPLE)
}
) %>% rbind()
a
a[,1]
a[,2]
a[c(6, 1, 2, 3, 4, 5)]
a
a[,1][c(6, 1, 2, 3, 4, 5)]
a[,1]
a[,1][c(6, 1, 2, 3, 4, 5)]
a[,1]
a[,1][1]
a[,1][1]$.[1]
a[,1][1]$.[c(6, 1, 2, 3, 4, 5)]
a
a[,1]
a[,2]
samples = seq(1,4)
x = joint_calls %>%
filter(PASS, type=="SNV") %>%
filter(eval(parse(text=paste0("segment.", seq(1,4), "==\"1:1\"", collapse=" & "))))
joint_samples = lapply(samples, function(y){
x %>%
filter(eval(parse(text=paste0("VAF.", y, " > 0")))) %>%
mutate(
SAMPLE = y,
CHROMOSOME = chr,
START = from,
END = to,
REFERENCE = ref,
VARIANT = alt
) %>% filter(!is.na(REFERENCE),
!is.na(VARIANT)) %>%
select(SAMPLE, CHROMOSOME, START, END, REFERENCE, VARIANT)
}
) %>%
rbind()
joint_samples
joint_samples[1,]
joint_samples[,1]
counts = joint_samples
counts$CHROMOSOME = gsub(counts$CHROMOSOME,
pattern = "chr",
replacement = "")
counts$END = counts$START
counts
joint_samples[,1]
joint_samples[1]
joint_samples[2]
joint_samples
joint_samples[,1]$.
joint_samples$SAMPLE
joint_samples %>% as.data.frame()
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
library(ggplot2); library(gridExtra); library(ggpubr)
neoants.df <- read.delim('Example.neoantigens.txt', col.names=c('Sample','LineID', 'Chrom', 'Start',
'RefAll', 'AltAll', 'Gene', 'pos', 'hla', 'peptide', 'core', 'Of', 'Gp',
'Gl', 'Ip', 'Il', 'Icore', 'Identity', 'Score','Affinity', 'Rank',
'Cand','BindLevel', 'Novelty'))
head(neoants.df)
table(neoants.df$Sample, neoants.df$Novelty)
table(neoants.df$Sample, neoants.df$BindLevel)
table(neoants.df$Sample, neoants.df$hla)
neoants.filtered.df <- subset(neoants.df, Novelty==1 & BindLevel=='SB')
table(neoants.filtered.df$Sample)
neoants.filtered.df[neoants.filtered.df$Sample=='Patient1' & neoants.filtered.df$LineID=='line43',]
# De-duplicate table to have each mutation per each sample only once
neoants.filtered.muts.df <- neoants.filtered.df[!duplicated(paste0(neoants.filtered.df$Sample,neoants.filtered.df$LineID)),]
neoants.filtered.muts.df[neoants.filtered.muts.df$Sample=='Patient1' & neoants.filtered.muts.df$LineID=='line43',]
# Per-patient burden
table(neoants.filtered.muts.df$Sample)
recopo.df <- read.delim('Example.recognitionpotential.txt')
head(recopo.df)
# Match neoantigens between the two tables (note that HLAs have different notation format in the two tables!)
recopo.df$NeoantID <- paste0(recopo.df$Sample,':',recopo.df$Mutation,'-',recopo.df$MutantPeptide,':', recopo.df$HLA)
neoants.df$NeoantID <- paste0(neoants.df$Sample,':',neoants.df$Identity,'-',neoants.df$peptide,':', gsub('HLA-','',gsub('[*|:]','',neoants.df$hla)))
neoants.df$RecoPo <- recopo.df[match(neoants.df$NeoantID, recopo.df$NeoantID),'NeoantigenRecognitionPotential']
# Filter using RecoPo values
neoants.filtered.df <- subset(neoants.df, Novelty==1 & !is.na(RecoPo) & RecoPo>0.1)
neoants.filtered.muts.df <- neoants.filtered.df[!duplicated(paste0(neoants.filtered.df$Sample,neoants.filtered.df$LineID)),]
# Per-patient burden counting mutations only once
table(neoants.filtered.muts.df$Sample)
# Gather burden
burden.df <- as.data.frame(table(neoants.filtered.muts.df$Sample))
names(burden.df) <- c('Sample','NeoantigenBurden')
summary.df <- read.delim('TCGA_CRC_neoantigen_burden.txt')
ggplot(summary.df, aes(x=TcellScore, y=NeoantigenBurden, colour=Subtype)) +
geom_point(size=2, alpha=0.8) +
stat_cor(label.y.npc = 0.9) +
facet_wrap(.~Subtype, scales='free') +
theme_bw() + guides(colour='none')
# Function to read in fasta file and count entries
getTotalMutFromFasta <- function(sample){
fFile <- paste0('fastaFiles/',sample,'.tmp.9.fasta')
fData <- scan(file=fFile, what='string')
return(sum(grepl('>', fData))) # the number of header lines within the fasta file
}
# Use this on burden defined above
burden.df$TotalBurden <- sapply(burden.df$Sample, getTotalMutFromFasta)
# Plot burden
p.total <- ggplot(burden.df, aes(x=Sample, y=NeoantigenBurden)) + geom_point(size=2) +
theme_bw() + labs(y='Neoantigen mutation burden')
p.prop <- ggplot(burden.df, aes(x=Sample, y=NeoantigenBurden/TotalBurden)) + geom_point(size=2) +
theme_bw() + labs(y='Proportional neoantigen burden')
grid.arrange(p.total, p.prop, nrow=1)
# Settle on a specific filtering, e.g. SB neoantigens
neoants.filtered.df <- subset(neoants.df, Novelty==1 & BindLevel=='SB')
# Read in the vcf file for a given patient - it contains pre-computed VAF values
pat <- 'Patient1'
pat.neoants.df <- subset(neoants.df, Sample==pat)
pat.neoants.filt.df <- subset(neoants.filtered.df, Sample==pat)
vcf.df <- read.delim(paste0('VCF/',pat,'.vcf'), comment.char='?')
head(vcf.df)
# Compute total VAF distribution, taking all mutations into account
allVAF <- vcf.df$VAF
# Compute the VAF of antigenic mutations only, either by using all neoantigens, or only filtered neoantigens
neoantVAF <- vcf.df$VAF[vcf.df$LINE %in% pat.neoants.df$LineID]
#neoantVAF <- vcf.df$VAF[vcf.df$LINE %in% pat.neoants.filt.df$LineID]
vaf.test <- ks.test(allVAF, neoantVAF)
print(vaf.test)
vaf.comparison.df <- data.frame(vaf=c(allVAF,neoantVAF), type=c(rep('all',length(allVAF)),
rep('neoantigen',length(neoantVAF))))
ggplot(vaf.comparison.df, aes(x=vaf, fill=type, y=..density..)) +
geom_histogram(alpha=0.5) + theme_bw() + labs(title=paste0('KS test: p = ',format(vaf.test$p.value, digits=3)))
fmin <- 0.2; fmax <- 0.45 # best values for Patient1
# fmin <- 0.15; fmax <- 0.35 # best values for Patient2
# fmin <- 0.15; fmax <- 0.35 # best values for Patient3
f <- seq(fmax, fmin, by=-0.0125)
vaf.cumulative.df <- data.frame(invf = 1/f,
cum.allVAF = sapply(f, function(z) sum(allVAF>=z)),
cum.neoantVAF = sapply(f, function(z) sum(neoantVAF>=z)))
vaf.cumulative.df$cum.allVAF <- vaf.cumulative.df$cum.allVAF - min(vaf.cumulative.df$cum.allVAF)
vaf.cumulative.df$cum.neoantVAF <- vaf.cumulative.df$cum.neoantVAF - min(vaf.cumulative.df$cum.neoantVAF)
# plot it with two axis for the two cumulative VAF distributions
scaleFactor <- max(vaf.cumulative.df$cum.allVAF)/max(vaf.cumulative.df$cum.neoantVAF)
ggplot(vaf.cumulative.df, aes(x=invf, y=cum.allVAF)) + geom_line(color='grey35', size=2.5) +
geom_line(data=vaf.cumulative.df, aes(x=invf, y=cum.neoantVAF*scaleFactor), color='#d63027', size=2.5) +
scale_y_continuous(name='Cumulative number of\nall mutations',
sec.axis = sec_axis(~./scaleFactor, name='Cumulative number of\nantigenic mutations')) +
labs(x='Inverse allelic frequency 1/VAF') +
theme_bw() +
theme( axis.line.y.right = element_line(color = "#d63027"), axis.ticks.y.right = element_line(color = "#d63027"),
axis.text.y.right = element_text(color='#d63027'), axis.title.y.right = element_text(color='#d63027'),
axis.line.y.left = element_line(color = "grey35"), axis.ticks.y.left = element_line(color = "grey35"),
axis.text.y.left = element_text(color='grey35'), axis.title.y.left = element_text(color='grey35')) +
scale_x_continuous(breaks=c(1/0.3, 1/0.2,1/0.1),labels=c('1/0.3','1/0.2','1/0.1'))
dnds.df <- read.delim('Example.dnds.txt')
head(dnds.df)
# Visualise ON and OFF dNdS
p.on <- ggplot(dnds.df, aes(x=sampleID, y=ON_dnds)) + geom_point() +
geom_errorbar(aes(ymin=ON_lowci, ymax=ON_highci), width=0.5) + geom_hline(yintercept = 1, linetype='dashed') + theme_bw()
p.off <- ggplot(dnds.df, aes(x=sampleID, y=OFF_dnds)) + geom_point() +
geom_errorbar(aes(ymin=OFF_lowci, ymax=OFF_highci), width=0.5) + geom_hline(yintercept = 1, linetype='dashed') + theme_bw()
grid.arrange(p.on, p.off, nrow=1)
# Compute immune dNdS
dnds.df$immune_dnds <- dnds.df$ON_dnds/dnds.df$OFF_dnds
dnds.df$immune_lowci <- dnds.df$ON_lowci/dnds.df$OFF_lowci
dnds.df$immune_highci <- dnds.df$ON_highci/dnds.df$OFF_highci
ggplot(dnds.df, aes(x=sampleID, y=immune_dnds)) + geom_point() +
geom_errorbar(aes(ymin=immune_lowci, ymax=immune_highci), width=0.5) + geom_hline(yintercept = 1, linetype='dashed') + theme_bw()
hlas <- scan('TCGA_CRC_hlatypes.txt',what='character()')
N <- length(hlas)
# assign HLA types to synthetic patients and write them into a shared HLA file
for (i in 1:ceiling(N/20)){
hlas.patient <- hlas[((i-1)*20+1):min(i*20,N)]
cat(c(paste0('hlaPatient',i),hlas.patient,'\n'), file='TCGA_CRC_hlatypes.synthetic_patient.txt',sep='\t', append=T)
}
common.drivers <- read.delim('VCF/Common_CRC_drivers.vcf',comment.char='?')
ranks.df <- read.delim('Example_PHBR.neoantigens.unfiltered.txt',header=F,
col.names=c('Sample','LineID', 'Chrom', 'Start',
'RefAll', 'AltAll', 'Gene', 'pos', 'hla', 'peptide', 'core', 'Of', 'Gp',
'Gl', 'Ip', 'Il', 'Icore', 'Identity', 'Score','Affinity', 'Rank',
'Cand','BindLevel'))
ranks.df$mutID <- paste0(ranks.df$Chrom,':',ranks.df$Start,'_',
ranks.df$RefAll,'/',ranks.df$AltAll)
# Compute Best Rank for each mutation-HLA pair as the lowest rank (highest affinity)
br.df <- aggregate(ranks.df$Rank, by=list(ranks.df$mutID, ranks.df$hla), min)
names(br.df) <- c('mutID','HLA','BestRank')
head(br.df)
mut<- br.df$mutID[1]
for (pat in c('Patient1','Patient2','Patient3')){
pat.hlas <- unique(neoants.df$hla[neoants.df$Sample==pat])
pat.brs <- sapply(pat.hlas, function(h) br.df$BestRank[br.df$mutID==mut & br.df$HLA==h])
# PHBR is computed as the harmonic mean of the BR values associated with the patient-specific HLA types
phbr <- 1/mean(1/pat.brs)
print(phbr)
}
phbr.df <- read.delim('Common_CRC_drivers.PHBR.txt')
muts.df <- read.delim('VCF/Common_CRC_drivers.vcf',comment.char='?')
muts.df$mutID <- paste0(muts.df$X.CHROM,':',muts.df$POS,'_',muts.df$REF,'/',muts.df$ALT)
median.phbr.df <- data.frame(mutID=row.names(phbr.df), medianPHBR=apply(phbr.df, 1, median))
median.phbr.df$Freq <- muts.df$FREQ[match(median.phbr.df$mutID,muts.df$mutID)]
# As an extra step, we can pull together mutations at the same population frequency
#aggr.median.df <- aggregate(median.phbr.df$medianPHBR, by=list(median.phbr.df$Freq), median)
#names(aggr.median.df) <- c('Freq','medianPHBR')
ggplot(median.phbr.df, aes(x=Freq, y=medianPHBR)) + geom_point(size=2) +
theme_bw() + scale_x_log10() + stat_cor()
setwd("~/Documents/GitHub/TAPACLOTH/")
DP = 500
purity=1
cutoff=0.82
normalise=TRUE
model = "beta-binomial"
rho=0.01
karyotypes=c("1:0","1:1","2:0","2:1","2:2")
NV_x = 1:DP
# Density
db = function(Major, minor)
{
peaks = CNAqc:::expected_vaf_peak(Major, minor, purity)$peak
lapply(peaks %>% seq_along, function(p)
data.frame(
density = compute_density(NV_x, DP, prob = peaks[p], model, rho),
NV = NV_x,
Major = Major,
minor = minor,
multiplicity = p,
karyotype = paste0(Major, ":", minor),
label = paste0(Major, ":", minor, ' ', p),
peak = peaks[p]
)) %>%
Reduce(f = bind_rows)
}
# Re-scaled likelihoods (makes them comparable)
scaling = function(x, normalise)
{
x %>%
group_by(karyotype, multiplicity) %>%
mutate(density = density / max(density)) %>%
ungroup()
}
# Cutoff
cut = function(x, cutoff)
{
cut_offs = x %>%
group_by(label) %>%
filter(density == max(density)) %>%
ungroup() %>%
mutate(cutoff = density*cutoff) %>%
select(label, cutoff)
x %>%
left_join(cut_offs, by = "label") %>%
mutate(label = ifelse(density < cutoff, "out of sample", label))
}
dataset = lapply(karyotypes, function(k) {
alleles = strsplit(k, split = ":")[[1]] %>% as.integer()
db(alleles[1],alleles[2])
}) %>% bind_rows() %>% cut(cutoff)
library(tidyverse)
dataset = lapply(karyotypes, function(k) {
alleles = strsplit(k, split = ":")[[1]] %>% as.integer()
db(alleles[1],alleles[2])
}) %>% bind_rows() %>% cut(cutoff)
devtools::load_all()
dataset = lapply(karyotypes, function(k) {
alleles = strsplit(k, split = ":")[[1]] %>% as.integer()
db(alleles[1],alleles[2])
}) %>% bind_rows() %>% cut(cutoff)
dataset
class_of =  dataset %>%
maximise() %>%
filter(NV == test) %>%
mutate(label = ifelse(closer == TRUE, paste0(karyotype, ' ', multiplicity), label)) %>%
pull(label) %>%
unique() %>%
paste(collapse = ', ')
test = 250
class_of =  dataset %>%
maximise() %>%
filter(NV == test) %>%
mutate(label = ifelse(closer == TRUE, paste0(karyotype, ' ', multiplicity), label)) %>%
pull(label) %>%
unique() %>%
paste(collapse = ', ')
ploidy = NA
multiplicity = NA
closer=FALSE
class_of =  dataset %>%
maximise() %>%
filter(NV == test) %>%
mutate(label = ifelse(closer == TRUE, paste0(karyotype, ' ', multiplicity), label)) %>%
pull(label) %>%
unique() %>%
paste(collapse = ', ')
ploidy = NA
multiplicity = NA
if(class_of != "out of sample"){
info = strsplit(class_of, ",")[[1]][1] %>% strsplit(" ")
ploidy = strsplit(info[[1]][1],"\\:")[[1]] %>% as.integer() %>% sum()
multiplicity = info[[1]][2] %>% as.integer()
}
tibble(ploidy = ploidy,
multiplicity = multiplicity,
wt = ploidy-multiplicity,
density = list(dataset))
a = tibble(ploidy = ploidy,
multiplicity = multiplicity,
wt = ploidy-multiplicity,
density = list(dataset))
dataset=a
dataset %>%
ggplot() +
geom_line(aes(x = NV, y = density), color = 'gainsboro',  size = .3)
dataset$density
a$density %>%
ggplot() +
geom_line(aes(x = NV, y = density), color = 'gainsboro',  size = .3)
a$density
a$density %>% ggplot()
a$density[[1]]
a
a$density[[1]]
a$density[[1]] %>%  ggplot() +
geom_line(aes(x = NV, y = density), color = 'gainsboro',  size = .3) +
CNAqc:::my_ggplot_theme() +
scale_color_manual(values = colors) +
geom_point(data = dataset %>% maximise(),
aes(x = NV,
y = density,
color = label),
size = 1) +
geom_line(data = dataset %>% maximise(),
aes(x = NV,
y = density,
color = label),
size = .3)
dataset = a$density[[1]]
dataset %>%
ggplot() +
geom_line(aes(x = NV, y = density), color = 'gainsboro',  size = .3) +
CNAqc:::my_ggplot_theme() +
scale_color_manual(values = colors) +
geom_point(data = dataset %>% maximise(),
aes(x = NV,
y = density,
color = label),
size = 1)
dataset
dataset %>% maximise()
dataset %>%
ggplot() +
geom_line(aes(x = NV, y = density), color = 'gainsboro',  size = .3)
dataset %>%
ggplot() +
geom_line(aes(x = NV, y = density), color = 'gainsboro',  size = .3) +
CNAqc:::my_ggplot_theme()
dataset %>%
ggplot() +
geom_line(aes(x = NV, y = density), color = 'gainsboro',  size = .3) +
CNAqc:::my_ggplot_theme() +
scale_color_manual(values = colors)
dataset %>%
ggplot() +
geom_line(aes(x = NV, y = density), color = 'gainsboro',  size = .3) +
CNAqc:::my_ggplot_theme() +
scale_color_manual(values = colors) +
geom_point(data = dataset %>% maximise(),
aes(x = NV,
y = density,
color = label),
size = 1)
dataset %>% maximise()
geom_point(data = dataset %>% maximise(),
aes(x = NV,
y = density,
color = label),
size = 1)
ggplot()+geom_point(data = dataset %>% maximise(),
aes(x = NV,
y = density,
color = label),
size = 1)
geom_point(data = dataset %>% maximise(),
aes(x = NV,
y = density,
color = label),
size = 1) +
geom_line(data = dataset %>% maximise(),
aes(x = NV,
y = density,
color = label),
size = .3)
ggplot()+geom_point(data = dataset %>% maximise(),
aes(x = NV,
y = density,
color = label),
size = 1) +
geom_line(data = dataset %>% maximise(),
aes(x = NV,
y = density,
color = label),
size = .3)
ggplot()+geom_line(aes(x = NV, y = density), color = 'gainsboro',  size = .3)+geom_point(data = dataset %>% maximise(),
aes(x = NV,
y = density,
color = label),
size = 1) +
geom_line(data = dataset %>% maximise(),
aes(x = NV,
y = density,
color = label),
size = .3)
ggplot()+geom_line(data = dataset,aes(x = NV, y = density), color = 'gainsboro',  size = .3)+geom_point(data = dataset %>% maximise(),
aes(x = NV,
y = density,
color = label),
size = 1) +
geom_line(data = dataset %>% maximise(),
aes(x = NV,
y = density,
color = label),
size = .3)
test
DP
bintest = binomial_test(test,
DP,
purity,
cutoff,
normalise = TRUE,
model,
rho = 0.01,
karyotypes,
closer)
bintest
x = init(mutations = tibble(chr="chr1",from=1,to=1,ref="A",alt="G",NV=250,DP=500,VAF=0.5,gene="SPEN",gene_role="oncogene"), sample = "ccc",purity=1)
x
x = run_classifier(x,cutoff = 0.85,model = "binomial")
plot_test(x, id = "chr1:1:1:A:G",model = "binomial")
x = run_classifier(x,cutoff = 0.85,model = "binomial")
plot_test(x, id = "chr1:1:1:A:G",model = "binomial")
x
x = init(mutations = tibble(chr="chr1",from=1,to=1,ref="A",alt="G",NV=250,DP=500,VAF=0.5,gene="SPEN", sample = "ccc",purity=1)
)
x = init(mutations = tibble(chr="chr1",from=1,to=1,ref="A",alt="G",NV=250,DP=500,VAF=0.5,gene="SPEN"), sample = "ccc",purity=1)
x = run_classifier(x,cutoff = 0.85,model = "binomial")
plot_test(x, id = "chr1:1:1:A:G",model = "binomial")
x = init(mutations = tibble(chr="chr1",from=1,to=1,ref="A",alt="G",NV=250,DP=500,VAF=0.5,gene="SPEN"), sample = "ccc",purity=0.8)
x = run_classifier(x,cutoff = 0.85,model = "binomial")
plot_test(x, id = "chr1:1:1:A:G",model = "binomial")
x = init(mutations = tibble(chr="chr1",from=1,to=1,ref="A",alt="G",NV=20,DP=80,VAF=0.25,gene="SPEN"), sample = "ccc",purity=1)
x = run_classifier(x,cutoff = 0.85,model = "binomial")
plot_test(x, id = "chr1:1:1:A:G",model = "binomial")
