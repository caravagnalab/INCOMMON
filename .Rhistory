print(classified_wrong)
# Example error with purity = 0.4
data = list(data = dplyr::tibble(
chr = sample(paste("chr",1:23), size = 30, replace = TRUE),
from = seq(1000,30000,1000),
to = seq(1001,30001,1000),
ref = sample(c("A","T","C","G"), size = 30, replace = TRUE),
alt = sample(c("A","T","C","G"), size = 30, replace = TRUE),
NV =  c(seq(5, 14, 1), seq(40,58,2), seq(80, 98, 2))*2,
DP = 200,
VAF = c(seq(5, 14, 1), seq(40,58,2), seq(80, 98, 2))*2/200,
gene = paste0("test gene ", 1:30),
),
sample = "test",
purity = 0.4
)
out = estimate_purity(x = data,
model = "binomial",
eps = 0.01)
print(out)
data
# Example error with purity = 0.4
data = list(data = dplyr::tibble(
chr = sample(paste0("chr",1:23), size = 30, replace = TRUE),
from = seq(1000,30000,1000),
to = seq(1001,30001,1000),
ref = sample(c("A","T","C","G"), size = 30, replace = TRUE),
alt = sample(c("A","T","C","G"), size = 30, replace = TRUE),
NV =  c(seq(5, 14, 1), seq(40,58,2), seq(80, 98, 2))*2,
DP = 200,
VAF = c(seq(5, 14, 1), seq(40,58,2), seq(80, 98, 2))*2/200,
gene = paste0("test gene ", 1:30),
),
sample = "test",
purity = 0.4
)
out = estimate_purity(x = data,
model = "binomial",
eps = 0.01)
print(out)
data
classified_wrong = run_classifier(
x = data,
alpha_level = 1e-3,
model = "Beta-Binomial",
rho = 0.01
)
print(classified_right)
plot_gene(x = classified_wrong,
model = "Beta-Binomial",
gene_name = "test gene 1")
classified_wrong = run_classifier(
x = data,
alpha_level = 1e-3,
model = "Beta-Binomial",
rho = 0.01
)
classified_wrong = run_classifier(
x = data,
alpha_level = 1e-3,
model = "Beta-Binomial",
rho = 0.01
)
plot_gene(x = classified_wrong,
model = "Beta-Binomial",
gene_name = "test gene 1")
classified_wrong = plot_test(classified_wrong)
classified_wrong = plot_test(classified_wrong)
plot_gene(x = classified_wrong,
model = "Beta-Binomial",
gene_name = "test gene 1")
data
# Example error with purity = 0.4
data = list(data = dplyr::tibble(
chr = sample(paste0("chr",1:23), size = 30, replace = TRUE),
from = seq(1000,30000,1000),
to = seq(1001,30001,1000),
ref = sample(c("A","T","C","G"), size = 30, replace = TRUE),
alt = sample(c("A","T","C","G"), size = 30, replace = TRUE),
NV =  c(seq(5, 14, 1), seq(40,58,2), seq(80, 98, 2))*2,
DP = 200,
VAF = c(seq(5, 14, 1), seq(40,58,2), seq(80, 98, 2))*2/200,
gene = paste0("test gene ", 1:30),
),
sample = "test",
purity = 0.4
)
data
out = estimate_purity(x = data,
model = "binomial",
eps = 0.01)
data
out = estimate_purity(x = data,
model = "Beta-Binomial",
eps = 0.01)
out$purity
get_purity_bmix(out)
out
get_purity_bmix(out, model = "Beta-Binomial")
x = out
inherits(x, "TAPACLOTH")
model = "Beta-Binomial"
devtools::load_all()
get_purity_bmix(out, model = "Beta-Binomial")
data$purity = get_purity_bmix(out, model = "Beta-Binomial")
print(data)
# Example error with purity = 0.4
data = list(data = dplyr::tibble(
chr = sample(paste0("chr",1:23), size = 30, replace = TRUE),
from = seq(1000,30000,1000),
to = seq(1001,30001,1000),
ref = sample(c("A","T","C","G"), size = 30, replace = TRUE),
alt = sample(c("A","T","C","G"), size = 30, replace = TRUE),
NV =  c(seq(5, 14, 1), seq(40,58,2), seq(80, 98, 2))*2,
DP = 200,
VAF = c(seq(5, 14, 1), seq(40,58,2), seq(80, 98, 2))*2/200,
gene = paste0("test gene ", 1:30),
),
sample = "test",
purity = 0.4
)
out = estimate_purity(x = data,
model = "Beta-Binomial",
eps = 0.01)
data
data$purity
data$purity = get_purity_bmix(out, model = "Beta-Binomial")
print(data)
data$data
x = data
x
# Example error with purity = 0.4
input = list(data = dplyr::tibble(
chr = sample(paste0("chr",1:23), size = 30, replace = TRUE),
from = seq(1000,30000,1000),
to = seq(1001,30001,1000),
ref = sample(c("A","T","C","G"), size = 30, replace = TRUE),
alt = sample(c("A","T","C","G"), size = 30, replace = TRUE),
NV =  c(seq(5, 14, 1), seq(40,58,2), seq(80, 98, 2))*2,
DP = 200,
VAF = c(seq(5, 14, 1), seq(40,58,2), seq(80, 98, 2))*2/200,
gene = paste0("test gene ", 1:30),
),
sample = "test",
purity = 0.4
)
out = estimate_purity(x = input,
model = "binomial",
eps = 0.01)
print(out)
plot_bmix(out, model = "Binomial")
out
plot_bmix(out, model = "Binomial")
x = out
model = "beta-binomial"
model = model %>% tolower()
devtools::load_all()
plot_bmix(out, model = "Binomial")
classified_wrong = run_classifier(
x = input,
alpha_level = 1e-3,
model = "Beta-Binomial",
rho = 0.01
)
classified_wrong = plot_test(classified_wrong)
plot_gene(x = classified_wrong,
model = "Beta-Binomial",
gene_name = "test gene 1")
out = estimate_purity(x = input,
model = "Beta-Binomial",
eps = 0.01)
input
class(input)
input$data
input$purity
get_purity_bmix(out, model = "Beta-Binomial")
input$purity = get_purity_bmix(out, model = "Beta-Binomial")
print(input)
classified_right = run_classifier(
x = input,
alpha_level = 1e-3,
model = "Beta-Binomial",
rho = 0.01
)
print(classified_right)
classified_right = plot_test(classified_right)
plot_gene(x = classified_right,
model = "Beta-Binomial",
gene_name = "test gene 1")
plot_gene(x = classified_right,
model = "Beta-Binomial",
gene_name = "test gene 2")
plot_gene(x = classified_right,
model = "Beta-Binomial",
gene_name = "test gene 3")
plot_gene(x = classified_right,
model = "Beta-Binomial",
gene_name = "test gene 4")
plot_gene(x = classified_right,
model = "Beta-Binomial",
gene_name = "test gene 10")
plot_gene(x = classified_wrong,
model = "Beta-Binomial",
gene_name = "test gene 10")
plot_gene(x = classified_wrong,
model = "Beta-Binomial",
gene_name = "test gene 11")
plot_gene(x = classified_right,
model = "Beta-Binomial",
gene_name = "test gene 11")
plot_gene(x = classified_right,
model = "Beta-Binomial",
gene_name = "test gene 12")
plot_gene(x = classified_right,
model = "Beta-Binomial",
gene_name = "test gene 13")
plot_gene(x = classified_wrong,
model = "Beta-Binomial",
gene_name = "test gene 13")
plt_right = plot_gene(x = classified_right,
model = "Beta-Binomial",
gene_name = "test gene 13")
plt_wrong = plot_gene(x = classified_wrong,
model = "Beta-Binomial",
gene_name = "test gene 13")
ggpubr::ggarrange(plotlist = list(
plt_wrong,
plt_right
),
ncol = 2,
nrow = 1)
list(
plt_wrong,
plt_right
)
ggpubr::ggarrange(plotlist = list(
plt_wrong[[1]],
plt_right[[1]]
),
ncol = 2,
nrow = 1)
ggpubr::ggarrange(plotlist = list(
plt_wrong[[1]],
plt_right[[1]]
),
ncol = 1,
nrow = 2)+
ggplot2::xlim(1:200)
ggpubr::ggarrange(plotlist = list(
plt_wrong[[1]],
plt_right[[1]]
),
ncol = 1,
nrow = 2)+
ggplot2::xlim(1,200)
ggpubr::ggarrange(plotlist = list(
plt_wrong[[1]]+xlim(1,200),
plt_right[[1]]+xlim(1,200)
),
ncol = 1,
nrow = 2)
devtools::document()
pkgdown::build_site()
pkgdown::build_site()
devtools::document()
pkgdown::build_site()
TAPACLOTH::cancer_gene_census
devtools::load_all()
print(example_data)
data = run_classifier(
mutations = example_data$data,
sample = example_data$sample,
purity = example_data$purity
alpha_level = 0.1,
out = run_classifier(
mutations = example_data$data,
sample = example_data$sample,
purity = example_data$purity,
alpha_level = 0.1,
model = "Binomial"
)
out_b = run_classifier(
mutations = example_data$data,
sample = example_data$sample,
purity = example_data$purity,
alpha_level = 0.1,
model = "Binomial"
)
out_b = run_classifier(
mutations = example_data$data,
sample = example_data$sample,
purity = example_data$purity,
alpha_level = 0.1,
model = "Binomial"
)
data = run_classifier(
mutations = example_data$data,
sample = example_data$sample,
purity = example_data$purity,
alpha_level = 0.1,
model = "Beta-Binomial",
rho = 0.01
)
get_classifier(out_b, model = "binomial")
out = example_data
out$classifier$binomial = get_classifier(out_b, model = "binomial")
out
out$classifier$`beta-binomial = get_classifier(out_bb, model = "beta-binomial")
out$classifier$`beta-binomial` = get_classifier(out_bb, model = "beta-binomial")
out_bb
out_bb = run_classifier(
mutations = example_data$data,
sample = example_data$sample,
purity = example_data$purity,
alpha_level = 0.1,
model = "Beta-Binomial",
rho = 0.01
)
out$classifier$`beta-binomial` = get_classifier(out_bb, model = "beta-binomial")
print(out)
print(out)
class(out)
class(out_b)
append(out_b$classifier, out_bb$classifier)
out_b$classifier = append(out_b$classifier, out_bb$classifier)
class(out_b)
out = run_classifier(
mutations = example_data$data,
sample = example_data$sample,
purity = example_data$purity,
alpha_level = 0.1,
model = "Binomial"
)
out$classifier =
append(
out$classifier,
run_classifier(
mutations = example_data$data,
sample = example_data$sample,
purity = example_data$purity,
alpha_level = 0.1,
model = "Beta-Binomial",
rho = 0.01
)
)
print(out)
out$data
example_data$data = example_data$data %>% select(-gene_rola)
example_data$data = example_data$data %>% select(-gene_rol)
example_data$data = example_data$data %>% select(-gene_role)
example_data
out = run_classifier(
mutations = example_data$data,
sample = example_data$sample,
purity = example_data$purity,
alpha_level = 0.1,
model = "Binomial"
)
out
out$data
out$classifier$binomial$data
usethis::use_data(example_data)
usethis::use_data(example_data, overwrite = TRUE)
devtools::load_all()
out = run_classifier(
mutations = example_data$data,
sample = example_data$sample,
purity = example_data$purity,
alpha_level = 0.1,
model = "Binomial"
)
out
out$classifier
out$data
out$classifier$binomial
out$classifier =
append(
out$classifier,
run_classifier(
mutations = example_data$data,
sample = example_data$sample,
purity = example_data$purity,
alpha_level = 0.1,
model = "Beta-Binomial",
rho = 0.01
) %>% get_classifier()
)
out
out$classifier$binomial
out = run_classifier(
mutations = example_data$data,
sample = example_data$sample,
purity = example_data$purity,
alpha_level = 0.1,
model = "Binomial"
)
out$classifier =
append(
out$classifier,
run_classifier(
mutations = example_data$data,
sample = example_data$sample,
purity = example_data$purity,
alpha_level = 0.1,
model = "Beta-Binomial",
rho = 0.01
) %>% get_classifier(., model = "Beta-Binomial")
)
print(out)
out
out %>% get_classifier()
out %>% get_classifier(., model = "binomial")
out$classifier$binomial
out$classifier$`beta-binomial` =
run_classifier(
mutations = example_data$data,
sample = example_data$sample,
purity = example_data$purity,
alpha_level = 0.1,
model = "Beta-Binomial",
rho = 0.01
) %>% get_classifier(., model = "Beta-Binomial")
out$classifier$`beta-binomial`
run_classifier(
mutations = example_data$data,
sample = example_data$sample,
purity = example_data$purity,
alpha_level = 0.1,
model = "Beta-Binomial",
rho = 0.01
)
run_classifier(
mutations = example_data$data,
sample = example_data$sample,
purity = example_data$purity,
alpha_level = 0.1,
model = "Beta-Binomial",
rho = 0.01
) %>% get_classifier(., model = "Beta-Binomial")
out = run_classifier(
mutations = example_data$data,
sample = example_data$sample,
purity = example_data$purity,
alpha_level = 0.1,
model = "Beta-Binomial",
rho = 0.01
)
out %>% get_classifier(., model = "Beta-Binomial")
out
get_classifier(out, model = "beta-binomial")
devtools::load_all()
out %>% get_classifier(., model = "Beta-Binomial")
out = run_classifier(
mutations = example_data$data,
sample = example_data$sample,
purity = example_data$purity,
alpha_level = 0.1,
model = "Binomial"
)
out$classifier$`beta-binomial` =
out = run_classifier(
mutations = example_data$data,
sample = example_data$sample,
purity = example_data$purity,
alpha_level = 0.1,
model = "Beta-Binomial",
rho = 0.01
) %>% get_classifier(., model = "Beta-Binomial")
print(out)
print(out)
print(out)
class(out)
out = run_classifier(
mutations = example_data$data,
sample = example_data$sample,
purity = example_data$purity,
alpha_level = 0.1,
model = "Binomial"
)
out$classifier$`beta-binomial` =
run_classifier(
mutations = example_data$data,
sample = example_data$sample,
purity = example_data$purity,
alpha_level = 0.1,
model = "Beta-Binomial",
rho = 0.01
) %>% get_classifier(., model = "Beta-Binomial")
)
out
class(out)
print(out)
out = plot_test(out)
run_classifier(
mutations = example_data$data,
sample = example_data$sample,
purity = example_data$purity,
alpha_level = 0.1,
model = "Binomial"
)
devtools::document()
devtools::load_all()
devtools::install()
devtools::load_all()
devtools::load_all()
data = estimate_purity(
mutations = example_data$data,
sample = example_data$sample,
purity = example_data$purity,
model = "Beta-Binomial",
eps = 0.01)
devtools::install()
