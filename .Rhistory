toplot %>%
ggplot2::ggplot(ggplot2::aes(x = x, y = density)) +
ggplot2::geom_line(color = 'steelblue', size = 1.2) +
ggplot2::labs(
title = paste0("Beta Distribution (α = ", alpha_pi, ", β = ", beta_pi, ")"),
x = bquote(pi),
y = "Density"
)
toplot = dplyr::tibble(
x = seq(0, 1, length.out = 1000),
density = stats::dbeta(
seq(0, 1, length.out = 1000),
shape1 = alpha_pi,
shape2 = beta_pi)
)
# Plot using ggplot2
toplot %>%
ggplot2::ggplot(ggplot2::aes(x = x, y = density)) +
ggplot2::geom_line(color = 'steelblue', size = 1.2) +
ggplot2::labs(
title = paste0("Beta Distribution (α = ", alpha_pi, ", β = ", beta_pi, ")"),
x = bquote(pi),
y = "Density"
)
# Plot using ggplot2
toplot %>%
ggplot2::ggplot(ggplot2::aes(x = x, y = density)) +
ggplot2::geom_line(color = 'steelblue', size = 1.2) +
ggplot2::labs(
title = paste0("Beta Distribution (α = ", alpha_pi, ", β = ", beta_pi, ")"),
x = bquote(pi),
y = "Density"
)+
my_ggplot_theme()
# Plot using ggplot2
toplot %>%
ggplot2::ggplot(ggplot2::aes(x = x, y = density)) +
ggplot2::geom_line(color = 'steelblue', size = 1.2) +
ggplot2::labs(
title = paste0("Prior Purity Distribution"),
subtitle = paste0("Beta distribution, "(α = ", alpha_pi, ", β = ", beta_pi, ")),
x = bquote(pi),
y = "Density"
)+
my_ggplot_theme()
# Plot using ggplot2
toplot %>%
ggplot2::ggplot(ggplot2::aes(x = x, y = density)) +
ggplot2::geom_line(color = 'steelblue', size = 1.2) +
ggplot2::labs(
title = paste0("Prior Purity Distribution"),
subtitle = paste0("Beta Distribution (α = ", alpha_pi, ", β = ", beta_pi, ")"),
x = bquote(pi),
y = "Density"
)+
my_ggplot_theme()
purity_mean = unique(x$input$purity)
alpha_pi = purity_mean * (purity_mean * (1 - purity_mean) / purity_error) - 1)
beta_pi = (1 - purity_mean) * (purity_mean * (1 - purity_mean) / purity_error))
purity_mean * ((purity_mean * (1 - purity_mean) / purity_error) - 1)
(1 - purity_mean) * (purity_mean * (1 - purity_mean) / purity_error))
(1 - purity_mean) * (purity_mean * (1 - purity_mean) / purity_error)
# Plot using ggplot2
toplot %>%
ggplot2::ggplot(ggplot2::aes(x = x, y = density)) +
ggplot2::geom_line(color = 'steelblue', size = 1.2) +
ggplot2::geom_vline(xintercept = purity_mean)+
ggplot2::labs(
title = paste0("Prior Purity Distribution"),
subtitle = paste0("Beta Distribution (α = ", alpha_pi, ", β = ", beta_pi, ")"),
x = bquote(pi),
y = "Density"
)+
my_ggplot_theme()
# Plot using ggplot2
toplot %>%
ggplot2::ggplot(ggplot2::aes(x = x, y = density)) +
ggplot2::geom_line(color = 'steelblue', size = 1.2) +
ggplot2::geom_vline(xintercept = purity_mean, linetype = 'longdash')+
ggplot2::labs(
title = paste0("Prior Purity Distribution"),
subtitle = paste0("Beta Distribution (α = ", alpha_pi, ", β = ", beta_pi, ")"),
x = bquote(pi),
y = "Density"
)+
my_ggplot_theme()
# Plot using ggplot2
toplot %>%
ggplot2::ggplot(ggplot2::aes(x = x, y = density)) +
ggplot2::geom_line(color = 'steelblue', size = 1.2) +
ggplot2::geom_vline(xintercept = purity_mean, linetype = 'longdash')+
ggplot2::labs(
title = paste0("Prior Purity Distribution"),
subtitle = paste0("Beta Distribution (α = ", alpha_pi, ", β = ", beta_pi, "); Mean = ", purity_mean),
x = bquote(pi),
y = "Density"
)+
my_ggplot_theme()
devtools::load_all('./')
data('MSK_genomic_data')
datatable(
head(MSK_genomic_data, n = 500), filter = 'top',
extensions = 'FixedColumns',
options = list(
dom = 't',
scrollX = TRUE,
scrollCollapse = TRUE
))
data('MSK_clinical_data')
datatable(
head(MSK_clinical_data, n = 500), filter = 'top',
extensions = 'FixedColumns',
options = list(
dom = 't',
scrollX = TRUE,
scrollCollapse = TRUE
))
sample = 'P-0002081'
genomic_data = MSK_genomic_data %>% filter(sample == !!sample)
clinical_data = MSK_clinical_data %>% filter(sample == !!sample)
print(genomic_data)
print(clinical_data)
data("cancer_gene_census")
datatable(cancer_gene_census, filter = 'top')
x = init(genomic_data = genomic_data,
clinical_data = clinical_data,
gene_roles = cancer_gene_census)
print(x)
sample
purity(x = x, sample = sample)
devtools::load_all('./')
plot_purity_prior(x = x, sample, = sample, purity_error = 0.05)
plot_purity_prior(x = x, sample = sample, purity_error = 0.05)
devtools::load_all('./')
plot_purity_prior(x = x, sample = sample, purity_error = 0.05)
devtools::load_all('./')
devtools::load_all('./')
priors_k_m
data('priors_k_m')
priors_eta = compute_eta_prior(x = x, priors_k_m = priors_k_m)
devtools::load_all('./')
data('priors_k_m')
priors_eta = compute_eta_prior(x = x, priors_k_m = priors_k_m)
x
devtools::load_all('./')
data('priors_k_m')
priors_eta = compute_eta_prior(x = x, priors_k_m = priors_k_m)
priors_eta
devtools::load_all('./')
t
data('priors_k_m')
priors_eta = compute_eta_prior(x = x, priors_k_m = priors_k_m)
data('priors_k_m')
priors_eta = compute_eta_prior(x = x, priors_k_m = priors_k_m)
priors_eta
data('priors_k_m')
priors_eta = compute_eta_prior(x = x, priors_k_m = priors_k_m)
print(priors_eta)
priors_eta
priors_k_m %>%
dplyr::group_by(gene, tumor_type) %>%
dplyr::mutate(p = n / sum(n))
priors_k_m = priors_k_m %>%
dplyr::group_by(gene, tumor_type) %>%
dplyr::mutate(p = n / sum(n))
x_data = x$input %>%
dplyr::select(sample, tumor_type, gene, purity, DP) %>%
unique() %>%
dplyr::left_join(priors_k_m, by = c('gene', 'tumor_type')) %>%
dplyr::mutate(x = DP*p/(2*(1-purity)+k*purity)) %>%
dplyr::group_by(tumor_type, gene, sample) %>%
dplyr::reframe(x = sum(x, na.rm = T)) %>%
dplyr::filter(!is.na(x)) %>% filter(x > 0) %>%
unique() %>%
dplyr::group_by(sample) %>%
dplyr::reframe(x = mean(x), tumor_type) %>%
unique()
x_data
x_data %>%
dplyr::group_by(tumor_type) %>%
dplyr::reframe(mean_eta = mean(x), var_eta = stats::var(x), N = length(unique(sample))) %>%
dplyr::filter(N >= 50)
x_data %>%
dplyr::group_by(tumor_type)
x_data %>%
dplyr::group_by(tumor_type) %>%
dplyr::reframe(mean_eta = mean(x), var_eta = stats::var(x), N = length(unique(sample)))
data('priors_k_m')
msk = init(genomic_data = MSK_genomic_data,
clinical_data = MSK_clinical_data,
gene_roles = cancer_gene_census)
priors_eta = compute_eta_prior(x = msk, priors_k_m = priors_k_m)
print(priors_eta)
toplot = lapply(1:nrow(priors_eta), function(i){
tibble(
tumor_type = priors_eta[i,]$tumor_type,
cohort = priors_eta[i,]$cohort,
x = rgamma(n = 1:10000, shape = priors_eta[i,]$alpha_x, rate = priors_eta[i,]$beta_x)
)
}) %>% do.call(rbind, .)
toplot
toplot_dp = x$input %>% select(DP, tumor_type),
toplot_dp = x$input %>% select(DP, tumor_type)
plot_gamma_prior = rbind(
toplot %>% mutate(what = 'Read count rate per copy (Prior)'),
toplot_dp %>% mutate(what = 'Sequencing Depth (Oberved)') %>% rename(x = DP)
) %>%
filter(
tumor_type %in% prior_eta_msk_met$tumor_type
) %>%
mutate(
cohort = factor(cohort, levels = c('MSK-MET', 'DFCI', 'MSK-CHORD')),
tumor_type = factor(tumor_type)
) %>%
mutate(tumor_type = relevel(tumor_type, ref = 'PANCA')) %>%
ggplot(aes(x = x, fill = what))+
ggridges::geom_density_ridges(aes(y = tumor_type), alpha = .5, scale = .9)+
scale_fill_manual(values = c('indianred', 'steelblue'))+
my_ggplot_theme()+
facet_wrap(~cohort)+
labs(
x = '',
y = 'density',
fill = ''
)+
xlim(0,1500)
plot_gamma_prior = rbind(
toplot %>% mutate(what = 'Read count rate per copy (Prior)'),
toplot_dp %>% mutate(what = 'Sequencing Depth (Oberved)') %>% rename(x = DP)
) %>%
filter(
tumor_type %in% prior_eta_msk_met$tumor_type
) %>%
mutate(
cohort = factor(cohort, levels = c('MSK-MET', 'DFCI', 'MSK-CHORD')),
tumor_type = factor(tumor_type)
) %>%
mutate(tumor_type = relevel(tumor_type, ref = 'PANCA')) %>%
ggplot2::ggplot(ggplot2::aes(x = x, fill = what))+
ggridges::geom_density_ridges(ggplot2::aes(y = tumor_type), alpha = .5, scale = .9)+
ggplot2::scale_fill_manual(values = c('indianred', 'steelblue'))+
my_ggplot_theme()+
ggplot2::facet_wrap(~cohort)+
ggplot2::labs(
x = '',
y = 'density',
fill = ''
)+
ggplot2::xlim(0,1500)
prior_eta
plot_gamma_prior = rbind(
toplot %>% mutate(what = 'Read count rate per copy (Prior)'),
toplot_dp %>% mutate(what = 'Sequencing Depth (Oberved)') %>% rename(x = DP)
) %>%
filter(
tumor_type %in% priors_eta$tumor_type
) %>%
mutate(
cohort = factor(cohort, levels = c('MSK-MET', 'DFCI', 'MSK-CHORD')),
tumor_type = factor(tumor_type)
) %>%
mutate(tumor_type = relevel(tumor_type, ref = 'PANCA')) %>%
ggplot2::ggplot(ggplot2::aes(x = x, fill = what))+
ggridges::geom_density_ridges(ggplot2::aes(y = tumor_type), alpha = .5, scale = .9)+
ggplot2::scale_fill_manual(values = c('indianred', 'steelblue'))+
my_ggplot_theme()+
ggplot2::facet_wrap(~cohort)+
ggplot2::labs(
x = '',
y = 'density',
fill = ''
)+
ggplot2::xlim(0,1500)
plot_gamma_prior = rbind(
toplot %>% mutate(what = 'Read count rate per copy (Prior)'),
toplot_dp %>% mutate(what = 'Sequencing Depth (Oberved)') %>% rename(x = DP)
) %>%
filter(
tumor_type %in% priors_eta$tumor_type
) %>%
mutate(
cohort = factor(cohort, levels = c('MSK-MET', 'DFCI', 'MSK-CHORD')),
tumor_type = factor(tumor_type)
) %>%
mutate(tumor_type = relevel(tumor_type, ref = 'PANCA')) %>%
ggplot2::ggplot(ggplot2::aes(x = x, fill = what))+
ggridges::geom_density_ridges(ggplot2::aes(y = tumor_type), alpha = .5, scale = .9)+
ggplot2::scale_fill_manual(values = c('indianred', 'steelblue'))+
my_ggplot_theme()+
ggplot2::labs(
x = '',
y = 'density',
fill = ''
)+
ggplot2::xlim(0,1500)
plot_gamma_prior = rbind(
toplot %>% mutate(what = 'Read count rate per copy (Prior)'),
toplot_dp %>% mutate(what = 'Sequencing Depth (Oberved)') %>% rename(x = DP)
) %>%
filter(
tumor_type %in% priors_eta$tumor_type
) %>%
mutate(
tumor_type = factor(tumor_type)
) %>%
mutate(tumor_type = relevel(tumor_type, ref = 'PANCA')) %>%
ggplot2::ggplot(ggplot2::aes(x = x, fill = what))+
ggridges::geom_density_ridges(ggplot2::aes(y = tumor_type), alpha = .5, scale = .9)+
ggplot2::scale_fill_manual(values = c('indianred', 'steelblue'))+
my_ggplot_theme()+
ggplot2::labs(
x = '',
y = 'density',
fill = ''
)+
ggplot2::xlim(0,1500)
rbind(
toplot %>% mutate(what = 'Read count rate per copy (Prior)'),
toplot_dp %>% mutate(what = 'Sequencing Depth (Oberved)') %>% rename(x = DP)
) %>%
filter(
tumor_type %in% priors_eta$tumor_type
) %>%
mutate(
tumor_type = factor(tumor_type)
) %>%
mutate(tumor_type = relevel(tumor_type, ref = 'PANCA')) %>%
ggplot2::ggplot(ggplot2::aes(x = x, fill = what))+
ggridges::geom_density_ridges(ggplot2::aes(y = tumor_type), alpha = .5, scale = .9)+
ggplot2::scale_fill_manual(values = c('indianred', 'steelblue'))+
my_ggplot_theme()+
ggplot2::labs(
x = '',
y = 'density',
fill = ''
)+
ggplot2::xlim(0,1500)
toplot_dp = msk$input %>% select(DP, tumor_type)
rbind(
toplot %>% mutate(what = 'Read count rate per copy (Prior)'),
toplot_dp %>% mutate(what = 'Sequencing Depth (Oberved)') %>% rename(x = DP)
) %>%
filter(
tumor_type %in% priors_eta$tumor_type
) %>%
mutate(
tumor_type = factor(tumor_type)
) %>%
mutate(tumor_type = relevel(tumor_type, ref = 'PANCA')) %>%
ggplot2::ggplot(ggplot2::aes(x = x, fill = what))+
ggridges::geom_density_ridges(ggplot2::aes(y = tumor_type), alpha = .5, scale = .9)+
ggplot2::scale_fill_manual(values = c('indianred', 'steelblue'))+
my_ggplot_theme()+
ggplot2::labs(
x = '',
y = 'density',
fill = ''
)+
ggplot2::xlim(0,1500)
getwd()
setwd('~/Documents/GitHub/chordR/')
devtools::load_all('./')
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("cBioPortalData")
devtools::load_all('./')
x = chordR::download_data()
plot_biomarker_timeline(msk_data = x, biomarker = 'PSA', cancer_type = 'Prostate')
plot_biomarker_timeline %>% View()
plot_biomarker_timeline %>% View()
MultiAssayExperiment::metadata(msk_data)
MultiAssayExperiment::metadata(x)
# Get metadata
metadata_list = MultiAssayExperiment::metadata(x)
# Map biomarker to timeline data
timeline_map = list(
"PSA" = "timeline_psa_labs",
"CEA" = "timeline_cea_labs",
"CA_15-3" = "timeline_ca_15-3_labs",
"CA_19-9" = "timeline_ca_19-9_labs",
"GLEASON" = "timeline_gleason"
)
timeline_map
biomarker = 'PSA'
timeline_map[[biomarker]]
timeline_name <- timeline_map[[biomarker]]
names(metadata_list)
as.data.frame(metadata_list[[timeline_name]])
timeline_name
names(metadata_list)
as.data.frame(metadata_list[[timeline_name]])
# Get biomarker timeline data
biomarker_data = as.data.frame(metadata_list[[timeline_name]])
biomarker_data
# Get biomarker timeline data
biomarker_data = as.data.frame(metadata_list[[timeline_name]]) %>% as_tibble()
biomarker_data
as.data.frame(metadata_list[[timeline_name]]) %>% dplyr::as_tibble()
cancer_type
cancer_type = 'PRAD'
!is.null(cancer_type)
MultiAssayExperiment::colData(msk_data)
MultiAssayExperiment::colData(x)
MultiAssayExperiment::colData(x) %>% as_tibble()
MultiAssayExperiment::colData(x) %>% dplyr::as_tibble()
clinical_data = as.data.frame(MultiAssayExperiment::colData(x)) %>% dplyr::as_tibble()
clinical_data
unique(clinical_data$PATIENT_ID[clinical_data$CANCER_TYPE == cancer_type])
clinical_data
clinical_data[clinical_data$CANCER_TYPE == cancer_type,]$PATIENT_ID
clinical_data
clinical_data[clinical_data$ONCOTREE_CODE == cancer_type,]$PATIENT_ID
unique(clinical_data[clinical_data$ONCOTREE_CODE == cancer_type,]$PATIENT_ID)
clinical_data$CANCER_TYPE %>% unique()
cancer_type = 'Prostate Cancer'
unique(clinical_data[clinical_data$CANCER_TYPE == cancer_type,]$PATIENT_ID)
biomarker_data
# Get biomarker timeline data
biomarker_data = as.data.frame(metadata_list[[timeline_name]]) %>% dplyr::as_tibble()
biomarker_data
patient_ids
patient_ids = NULL
!is.null(patient_ids)
unique(biomarker_data$PATIENT_ID)
# Sample random patients
unique_patients = unique(biomarker_data$PATIENT_ID)
unique_patients
length(unique_patients)
n_patients
n_patients = 50
min(n_patients, 100)
sample(unique_patients, min(n_patients, 100))
selected_patients = sample(unique_patients, min(n_patients, 100))
selected_patients
biomarker_data[biomarker_data$PATIENT_ID %in% selected_patients, ]
biomarker_data = biomarker_data[biomarker_data$PATIENT_ID %in% selected_patients, ]
message("Plotting ", length(selected_patients), " randomly selected patients")
nrow(biomarker_data) == 0
stop("No biomarker data available for the specified criteria")
biomarker == "GLEASON"
biomarker_data$value
biomarker_data
biomarker_data$RESULT
biomarker_data$value = biomarker_data$RESULT
biomarker
y_label = paste(biomarker, "Value")
y_label
biomarker_data[!is.na(biomarker_data$value), ]
# Remove missing values
biomarker_data = biomarker_data[!is.na(biomarker_data$value), ]
date_range
biomarker
p = ggplot2::ggplot(biomarker_data, ggplot2::aes(x = START_DATE, y = value,
group = PATIENT_ID, color = PATIENT_ID))
p
ggplot2::ggplot(
biomarker_data,
ggplot2::aes(x = START_DATE, y = value,
group = PATIENT_ID, color = PATIENT_ID)) +
ggplot2::labs(y = y_label)
biomarker_data
p +
ggplot2::geom_line(alpha = 0.7, linewidth = 0.8) +
ggplot2::geom_point(alpha = 0.8, size = 1.5)
p +
ggplot2::geom_line(alpha = 0.7, linewidth = 0.8) +
ggplot2::geom_point(alpha = 0.8, size = 1.5) +
ggplot2::labs(
title = paste(biomarker, "Timeline"),
subtitle = if (!is.null(cancer_type)) paste("Cancer Type:", cancer_type) else "All Cancer Types",
x = "Days from Reference Point",
caption = paste("Data from", length(unique(biomarker_data$PATIENT_ID)), "patients")
)
p +
ggplot2::geom_line(alpha = 0.7, linewidth = 0.8) +
ggplot2::geom_point(alpha = 0.8, size = 1.5) +
ggplot2::labs(
title = paste(biomarker, "Timeline"),
subtitle = if (!is.null(cancer_type)) paste("Cancer Type:", cancer_type) else "All Cancer Types",
x = "Days from Reference Point",
caption = paste("Data from", length(unique(biomarker_data$PATIENT_ID)), "patients")
) +
ggplot2::theme_minimal() +
ggplot2::scale_color_viridis_d(guide = "none")
p +
ggplot2::geom_line(alpha = 0.7, linewidth = 0.8) +
ggplot2::geom_point(alpha = 0.8, size = 1.5) +
ggplot2::labs(
title = paste(biomarker, "Timeline"),
subtitle = if (!is.null(cancer_type)) paste("Cancer Type:", cancer_type) else "All Cancer Types",
x = "Days from Reference Point",
caption = paste("Data from", length(unique(biomarker_data$PATIENT_ID)), "patients")
) +
ggplot2::theme_minimal()
p +
ggplot2::geom_line(alpha = 0.7, linewidth = 0.8) +
ggplot2::geom_point(alpha = 0.8, size = 1.5) +
ggplot2::labs(
title = paste(biomarker, "Timeline"),
subtitle = if (!is.null(cancer_type)) paste("Cancer Type:", cancer_type) else "All Cancer Types",
x = "Days from Reference Point",
caption = paste("Data from", length(unique(biomarker_data$PATIENT_ID)), "patients")
) +
ggplot2::theme_minimal()+
ggplot2::guides(color = 'none')
add_events
devtools::load_all('./')
x = download_data()
plot_biomarker_timeline(msk_data = x, biomarker = 'PSA', cancer_type = 'Prostate Cancer', n_patients = 50)
plot_biomarker_timeline(msk_data = x, biomarker = 'PSA', cancer_type = 'Prostate Cancer', n_patients = 50, add_events = F)
p = plot_biomarker_timeline(msk_data = x, biomarker = 'PSA', cancer_type = 'Prostate Cancer', n_patients = 50, add_events = F)
get_clinical_events(x, unique(biomarker_data$PATIENT_ID))
